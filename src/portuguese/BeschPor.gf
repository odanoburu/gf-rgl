--# -path=.:../romance:../common:../abstract:../prelude

resource BeschPor = open Prelude, Predef, CommonRomance in {

flags optimize=noexpand ; -- faster than values
      coding=utf8 ;

-- machine-generated file: do not edit directly!

oper
  Verbum = {root : Str ; suff : VFB => Str} ;

  -- The full conjunction is a table on $VForm$:
 param
    VImpers =
        Infn -- garantir
      | Ger  -- garantindo
      | Part -- garantido
      ;

    Mode = Ind | Sub ;

    VPers =
        Pres   Mode Number Person
      | PretI  Mode Number Person    --# notpresent --# notpresent
      | MQPerf      Number Person    --# notpresent --# notpresent
      | PretP       Number Person    --# notpresent --# notpresent
      | Fut    Mode Number Person    --# notpresent --# notpresent
      | Cond        Number Person    --# notpresent --# notpresent
      | Imper       Number Person
      ;

    VFB =
        VI VImpers
      | VPB VPers
      ;

oper
  -- hack to get the same behaviour as from variants. parses both,
  -- linearizes the first.
  vars : Str -> Str -> Str = \x,y -> pre { "" => x ; _ => y } ;

  verbBesch : {root : Str ; suff : VFB => Str} -> {root : Str ; suff : CommonRomance.VF => Str} = \amar ->
  -- conversion from Portuguese forms to romance forms
    {root = amar.root ;
     suff = table {
       VInfin _ => amar.suff ! VI Infn ;
       VFin (VPres Indic) n p => amar.suff ! VPB (Pres Ind n p) ;
       VFin (VPres Conjunct) n p => amar.suff ! VPB (Pres Sub n p) ;
       VFin (VImperf Indic) n p => amar.suff ! VPB (PretI Ind n p) ;  --# notpresent --# notpresent
       VFin (VImperf Conjunct) n p => amar.suff ! VPB (PretI Sub n p) ; --# notpresent --# notpresent
       VFin VPasse n p        => amar.suff ! VPB (PretP n p) ; --# notpresent --# notpresent
       VFin VFut n p          => amar.suff ! VPB (Fut Ind n p) ; --# notpresent --# notpresent
       VFin VCondit n p       => amar.suff ! VPB (Cond n p) ; --# notpresent --# notpresent
       VImper SgP2            => amar.suff ! VPB (Imper  Sg P2) ;
       VImper PlP1            => amar.suff ! VPB (Imper  Pl P1) ;
       VImper PlP2            => amar.suff ! VPB (Imper  Pl P2) ;
       VPart g n              => mkPass (amar.suff ! VI Part) ! g ! n ;
       VGer | VPresPart       => amar.suff ! VI Ger
       }
    } ;

  mkPass : Str -> Gender => Number => Str ;
  -- passive form is highly predictable from singular masculine
  mkPass p' = let p = p' + [] in case p of {
    amad + "o" => genNumForms p (amad + "a") (amad + "os") (amad + "as") ;
    entregu + "e" => \\g => numForms p (p + "s") ;
    _ => error "unknown ending" -- nothing should reach here
    } ;

    -- you can look up verb paradigms in the Portuguese Bescherelle,
    -- or in =Ryan, M. A. Conjugação dos Verbos em Português. ática,
    -- 1991.=

    -- the numbers in the comments below the oper declaration are the
    -- verb's paradigm numbers in bescherelle and in Ryan

oper ter_Besch : Str -> Verbum = \ter ->
-- 1 | r3
  let x_ = Predef.tk 3 ter in
 {root = x_ ;
  suff = table {
    VI Infn => "ter" ;
    VI Ger => "tendo" ;
    VI Part => "tido" ;
    VPB (Pres Ind Sg P1) => "tenho" ;
    VPB (Pres Ind Sg P2) => "tens" ;
    VPB (Pres Ind Sg P3) => "tem" ;
    VPB (Pres Ind Pl P1) => "temos" ;
    VPB (Pres Ind Pl P2) => "tendes" ;
    VPB (Pres Ind Pl P3) => "têm" ;
    VPB (Pres Sub Sg P1) => "tenha" ;
    VPB (Pres Sub Sg P2) => "tenhas" ;
    VPB (Pres Sub Sg P3) => "tenha" ;
    VPB (Pres Sub Pl P1) => "tenhamos" ;
    VPB (Pres Sub Pl P2) => "tenhais" ;
    VPB (Pres Sub Pl P3) => "tenham" ;
    VPB (PretI Ind Sg P1) => "tinha" ; --# notpresent
    VPB (PretI Ind Sg P2) => "tinhas" ; --# notpresent
    VPB (PretI Ind Sg P3) => "tinha" ; --# notpresent
    VPB (PretI Ind Pl P1) => "tínhamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => "tínheis" ; --# notpresent
    VPB (PretI Ind Pl P3) => "tinham" ; --# notpresent
    VPB (PretI Sub Sg P1) => "tivesse" ; --# notpresent
    VPB (PretI Sub Sg P2) => "tivesses" ; --# notpresent
    VPB (PretI Sub Sg P3) => "tivesse" ; --# notpresent
    VPB (PretI Sub Pl P1) => "tivéssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => "tivésseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => "tivessem" ; --# notpresent
    VPB (MQPerf Sg P1) => "tivera" ; --# notpresent
    VPB (MQPerf Sg P2) => "tiveras" ; --# notpresent
    VPB (MQPerf Sg P3) => "tivera" ; --# notpresent
    VPB (MQPerf Pl P1) => "tivéramos" ; --# notpresent
    VPB (MQPerf Pl P2) => "tivéreis" ; --# notpresent
    VPB (MQPerf Pl P3) => "tiveram" ; --# notpresent
    VPB (PretP Sg P1) => "tive" ; --# notpresent
    VPB (PretP Sg P2) => "tiveste" ; --# notpresent
    VPB (PretP Sg P3) => "teve" ; --# notpresent
    VPB (PretP Pl P1) => "tivemos" ; --# notpresent
    VPB (PretP Pl P2) => "tivestes" ; --# notpresent
    VPB (PretP Pl P3) => "tiveram" ; --# notpresent
    VPB (Fut Ind Sg P1) => "terei" ; --# notpresent
    VPB (Fut Ind Sg P2) => "terás" ; --# notpresent
    VPB (Fut Ind Sg P3) => "terá" ; --# notpresent
    VPB (Fut Ind Pl P1) => "teremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => "tereis" ; --# notpresent
    VPB (Fut Ind Pl P3) => "terão" ; --# notpresent
    VPB (Fut Sub Sg P1) => "tiver" ; --# notpresent
    VPB (Fut Sub Sg P2) => "tiveres" ; --# notpresent
    VPB (Fut Sub Sg P3) => "tiver" ; --# notpresent
    VPB (Fut Sub Pl P1) => "tivermos" ; --# notpresent
    VPB (Fut Sub Pl P2) => "tiverdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => "tiverem" ; --# notpresent
    VPB (Cond Sg P1) => "teria" ; --# notpresent
    VPB (Cond Sg P2) => "terias" ; --# notpresent
    VPB (Cond Sg P3) => "teria" ; --# notpresent
    VPB (Cond Pl P1) => "teríamos" ; --# notpresent
    VPB (Cond Pl P2) => "teríeis" ; --# notpresent
    VPB (Cond Pl P3) => "teriam" ; --# notpresent
    VPB (Imper Sg P2) => "tem" ;
    VPB (Imper Sg P3) => "tenha" ;
    VPB (Imper Pl P1) => "tenhamos" ;
    VPB (Imper Pl P2) => "tende" ;
    VPB (Imper Pl P3) => "tenham" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper haver_Besch : Str -> Verbum = \haver ->
-- 2 | r4
  let x_ = Predef.tk 5 haver in
 {root = x_ ;
  suff = table {
    VI Infn => "haver" ;
    VI Ger => "havendo" ;
    VI Part => "havido" ;
    VPB (Pres Ind Sg P1) => "hei" ;
    VPB (Pres Ind Sg P2) => "hás" ;
    VPB (Pres Ind Sg P3) => "há" ;
    VPB (Pres Ind Pl P1) => vars "havemos" "hemos" ;
    VPB (Pres Ind Pl P2) => vars "haveis" "heis" ;
    VPB (Pres Ind Pl P3) => "hão" ;
    VPB (Pres Sub Sg P1) => "haja" ;
    VPB (Pres Sub Sg P2) => "hajas" ;
    VPB (Pres Sub Sg P3) => "haja" ;
    VPB (Pres Sub Pl P1) => "hajamos" ;
    VPB (Pres Sub Pl P2) => "hajais" ;
    VPB (Pres Sub Pl P3) => "hajam" ;
    VPB (PretI Ind Sg P1) => "havia" ; --# notpresent
    VPB (PretI Ind Sg P2) => "havias" ; --# notpresent
    VPB (PretI Ind Sg P3) => "havia" ; --# notpresent
    VPB (PretI Ind Pl P1) => "havíamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => "havíeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => "haviam" ; --# notpresent
    VPB (PretI Sub Sg P1) => "houvesse" ; --# notpresent
    VPB (PretI Sub Sg P2) => "houvesses" ; --# notpresent
    VPB (PretI Sub Sg P3) => "houvesse" ; --# notpresent
    VPB (PretI Sub Pl P1) => "houvéssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => "houvésseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => "houvessem" ; --# notpresent
    VPB (MQPerf Sg P1) => "houvera" ; --# notpresent
    VPB (MQPerf Sg P2) => "houveras" ; --# notpresent
    VPB (MQPerf Sg P3) => "houvera" ; --# notpresent
    VPB (MQPerf Pl P1) => "houvéramos" ; --# notpresent
    VPB (MQPerf Pl P2) => "houvéreis" ; --# notpresent
    VPB (MQPerf Pl P3) => "houveram" ; --# notpresent
    VPB (PretP Sg P1) => "houve" ; --# notpresent
    VPB (PretP Sg P2) => "houveste" ; --# notpresent
    VPB (PretP Sg P3) => "houve" ; --# notpresent
    VPB (PretP Pl P1) => "houvemos" ; --# notpresent
    VPB (PretP Pl P2) => "houvestes" ; --# notpresent
    VPB (PretP Pl P3) => "houveram" ; --# notpresent
    VPB (Fut Ind Sg P1) => "haverei" ; --# notpresent
    VPB (Fut Ind Sg P2) => "haverás" ; --# notpresent
    VPB (Fut Ind Sg P3) => "haverá" ; --# notpresent
    VPB (Fut Ind Pl P1) => "haveremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => "havereis" ; --# notpresent
    VPB (Fut Ind Pl P3) => "haverão" ; --# notpresent
    VPB (Fut Sub Sg P1) => "houver" ; --# notpresent
    VPB (Fut Sub Sg P2) => "houveres" ; --# notpresent
    VPB (Fut Sub Sg P3) => "houver" ; --# notpresent
    VPB (Fut Sub Pl P1) => "houvermos" ; --# notpresent
    VPB (Fut Sub Pl P2) => "houverdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => "houveram" ; --# notpresent
    VPB (Cond Sg P1) => "haveria" ; --# notpresent
    VPB (Cond Sg P2) => "haverias" ; --# notpresent
    VPB (Cond Sg P3) => "haveria" ; --# notpresent
    VPB (Cond Pl P1) => "haveríamos" ; --# notpresent
    VPB (Cond Pl P2) => "haveríeis" ; --# notpresent
    VPB (Cond Pl P3) => "haveriam" ; --# notpresent
    VPB (Imper Sg P2) => "há" ;
    VPB (Imper Sg P3) => "haja" ;
    VPB (Imper Pl P1) => "hajamos" ;
    VPB (Imper Pl P2) => "havei" ;
    VPB (Imper Pl P3) => "hajam" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper ser_Besch : Str -> Verbum = \ser ->
-- 3 | r1
  let x_ = Predef.tk 3 ser in
 {root = x_ ;
  suff = table {
    VI Infn => "ser" ;
    VI Ger => "sendo" ;
    VI Part => "sido" ;
    VPB (Pres Ind Sg P1) => "sou" ;
    VPB (Pres Ind Sg P2) => "és" ;
    VPB (Pres Ind Sg P3) => "é" ;
    VPB (Pres Ind Pl P1) => "somos" ;
    VPB (Pres Ind Pl P2) => "sois" ;
    VPB (Pres Ind Pl P3) => "são" ;
    VPB (Pres Sub Sg P1) => "seja" ;
    VPB (Pres Sub Sg P2) => "sejas" ;
    VPB (Pres Sub Sg P3) => "seja" ;
    VPB (Pres Sub Pl P1) => "sejamos" ;
    VPB (Pres Sub Pl P2) => "sejais" ;
    VPB (Pres Sub Pl P3) => "sejam" ;
    VPB (PretI Ind Sg P1) => "era" ; --# notpresent
    VPB (PretI Ind Sg P2) => "eras" ; --# notpresent
    VPB (PretI Ind Sg P3) => "era" ; --# notpresent
    VPB (PretI Ind Pl P1) => "éramos" ; --# notpresent
    VPB (PretI Ind Pl P2) => "éreis" ; --# notpresent
    VPB (PretI Ind Pl P3) => "eram" ; --# notpresent
    VPB (PretI Sub Sg P1) => "fosse" ; --# notpresent
    VPB (PretI Sub Sg P2) => "fosses" ; --# notpresent
    VPB (PretI Sub Sg P3) => "fosse" ; --# notpresent
    VPB (PretI Sub Pl P1) => "fôssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => "fôsseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => "fossem" ; --# notpresent
    VPB (MQPerf Sg P1) => "fora" ; --# notpresent
    VPB (MQPerf Sg P2) => "foras" ; --# notpresent
    VPB (MQPerf Sg P3) => "fora" ; --# notpresent
    VPB (MQPerf Pl P1) => "fôramos" ; --# notpresent
    VPB (MQPerf Pl P2) => "fôreis" ; --# notpresent
    VPB (MQPerf Pl P3) => "foram" ; --# notpresent
    VPB (PretP Sg P1) => "fui" ; --# notpresent
    VPB (PretP Sg P2) => "foste" ; --# notpresent
    VPB (PretP Sg P3) => "foi" ; --# notpresent
    VPB (PretP Pl P1) => "fomos" ; --# notpresent
    VPB (PretP Pl P2) => "fostes" ; --# notpresent
    VPB (PretP Pl P3) => "foram" ; --# notpresent
    VPB (Fut Ind Sg P1) => "serei" ; --# notpresent
    VPB (Fut Ind Sg P2) => "serás" ; --# notpresent
    VPB (Fut Ind Sg P3) => "será" ; --# notpresent
    VPB (Fut Ind Pl P1) => "seremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => "sereis" ; --# notpresent
    VPB (Fut Ind Pl P3) => "serão" ; --# notpresent
    VPB (Fut Sub Sg P1) => "for" ; --# notpresent
    VPB (Fut Sub Sg P2) => "fores" ; --# notpresent
    VPB (Fut Sub Sg P3) => "for" ; --# notpresent
    VPB (Fut Sub Pl P1) => "formos" ; --# notpresent
    VPB (Fut Sub Pl P2) => "fordes" ; --# notpresent
    VPB (Fut Sub Pl P3) => "forem" ; --# notpresent
    VPB (Cond Sg P1) => "seria" ; --# notpresent
    VPB (Cond Sg P2) => "serias" ; --# notpresent
    VPB (Cond Sg P3) => "seria" ; --# notpresent
    VPB (Cond Pl P1) => "seríamos" ; --# notpresent
    VPB (Cond Pl P2) => "seríeis" ; --# notpresent
    VPB (Cond Pl P3) => "seriam" ; --# notpresent
    VPB (Imper Sg P2) => "sê" ;
    VPB (Imper Sg P3) => "seja" ;
    VPB (Imper Pl P1) => "sejamos" ;
    VPB (Imper Pl P2) => "sede" ;
    VPB (Imper Pl P3) => "sejam" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper comprar_Besch : Str -> Verbum = \comprar ->
-- 4 | r5
  let compr_ = Predef.tk 2 comprar in
 {root = compr_ ;
  suff = table {
    VI Infn => "ar" ;
    VI Ger => "ando" ;
    VI Part => "ado" ;
    VPB (Pres Ind Sg P1) => "o" ;
    VPB (Pres Ind Sg P2) => "as" ;
    VPB (Pres Ind Sg P3) => "a" ;
    VPB (Pres Ind Pl P1) => "amos" ;
    VPB (Pres Ind Pl P2) => "ais" ;
    VPB (Pres Ind Pl P3) => "am" ;
    VPB (Pres Sub Sg P1) => "e" ;
    VPB (Pres Sub Sg P2) => "es" ;
    VPB (Pres Sub Sg P3) => "e" ;
    VPB (Pres Sub Pl P1) => "emos" ;
    VPB (Pres Sub Pl P2) => "eis" ;
    VPB (Pres Sub Pl P3) => "em" ;
    VPB (PretI Ind Sg P1) => "ava" ; --# notpresent
    VPB (PretI Ind Sg P2) => "avas" ; --# notpresent
    VPB (PretI Ind Sg P3) => "ava" ; --# notpresent
    VPB (PretI Ind Pl P1) => "ávamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => "áveis" ; --# notpresent
    VPB (PretI Ind Pl P3) => "avam" ; --# notpresent
    VPB (PretI Sub Sg P1) => "asse" ; --# notpresent
    VPB (PretI Sub Sg P2) => "asses" ; --# notpresent
    VPB (PretI Sub Sg P3) => "asse" ; --# notpresent
    VPB (PretI Sub Pl P1) => "ássemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => "ásseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => "assem" ; --# notpresent
    VPB (MQPerf Sg P1) => "ara" ; --# notpresent
    VPB (MQPerf Sg P2) => "aras" ; --# notpresent
    VPB (MQPerf Sg P3) => "ara" ; --# notpresent
    VPB (MQPerf Pl P1) => "arámos" ; --# notpresent
    VPB (MQPerf Pl P2) => "áreis" ; --# notpresent
    VPB (MQPerf Pl P3) => "aram" ; --# notpresent
    VPB (PretP Sg P1) => "ei" ; --# notpresent
    VPB (PretP Sg P2) => "aste" ; --# notpresent
    VPB (PretP Sg P3) => "ou" ; --# notpresent
    VPB (PretP Pl P1) => vars "amos" "ámos" ; --# notpresent
    VPB (PretP Pl P2) => "astes" ; --# notpresent
    VPB (PretP Pl P3) => "aram" ; --# notpresent
    VPB (Fut Ind Sg P1) => "arei" ; --# notpresent
    VPB (Fut Ind Sg P2) => "arás" ; --# notpresent
    VPB (Fut Ind Sg P3) => "ará" ; --# notpresent
    VPB (Fut Ind Pl P1) => "aremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => "areis" ; --# notpresent
    VPB (Fut Ind Pl P3) => "arão" ; --# notpresent
    VPB (Fut Sub Sg P1) => "ar" ; --# notpresent
    VPB (Fut Sub Sg P2) => "ares" ; --# notpresent
    VPB (Fut Sub Sg P3) => "ar" ; --# notpresent
    VPB (Fut Sub Pl P1) => "armos" ; --# notpresent
    VPB (Fut Sub Pl P2) => "ardes" ; --# notpresent
    VPB (Fut Sub Pl P3) => "arem" ; --# notpresent
    VPB (Cond Sg P1) => "aria" ; --# notpresent
    VPB (Cond Sg P2) => "arias" ; --# notpresent
    VPB (Cond Sg P3) => "aria" ; --# notpresent
    VPB (Cond Pl P1) => "aríamos" ; --# notpresent
    VPB (Cond Pl P2) => "aríeis" ; --# notpresent
    VPB (Cond Pl P3) => "ariam" ; --# notpresent
    VPB (Imper Sg P2) => "a" ;
    VPB (Imper Sg P3) => "e" ;
    VPB (Imper Pl P1) => "emos" ;
    VPB (Imper Pl P2) => "ai" ;
    VPB (Imper Pl P3) => "em" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper vender_Besch : Str -> Verbum = \vender ->
-- 5 | r6
  let vend_ = Predef.tk 2 vender in
 {root = vend_ ;
  suff = table {
    VI Infn => "er" ;
    VI Ger => "endo" ;
    VI Part => "ido" ;
    VPB (Pres Ind Sg P1) => "o" ;
    VPB (Pres Ind Sg P2) => "es" ;
    VPB (Pres Ind Sg P3) => "e" ;
    VPB (Pres Ind Pl P1) => "emos" ;
    VPB (Pres Ind Pl P2) => "eis" ;
    VPB (Pres Ind Pl P3) => "em" ;
    VPB (Pres Sub Sg P1) => "a" ;
    VPB (Pres Sub Sg P2) => "as" ;
    VPB (Pres Sub Sg P3) => "a" ;
    VPB (Pres Sub Pl P1) => "amos" ;
    VPB (Pres Sub Pl P2) => "ais" ;
    VPB (Pres Sub Pl P3) => "am" ;
    VPB (PretI Ind Sg P1) => "ia" ; --# notpresent
    VPB (PretI Ind Sg P2) => "ias" ; --# notpresent
    VPB (PretI Ind Sg P3) => "ia" ; --# notpresent
    VPB (PretI Ind Pl P1) => "íamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => "íeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => "iam" ; --# notpresent
    VPB (PretI Sub Sg P1) => "esse" ; --# notpresent
    VPB (PretI Sub Sg P2) => "esses" ; --# notpresent
    VPB (PretI Sub Sg P3) => "esse" ; --# notpresent
    VPB (PretI Sub Pl P1) => "êssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => "êsseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => "essem" ; --# notpresent
    VPB (MQPerf Sg P1) => "era" ; --# notpresent
    VPB (MQPerf Sg P2) => "eras" ; --# notpresent
    VPB (MQPerf Sg P3) => "era" ; --# notpresent
    VPB (MQPerf Pl P1) => "êramos" ; --# notpresent
    VPB (MQPerf Pl P2) => "êreis" ; --# notpresent
    VPB (MQPerf Pl P3) => "eram" ; --# notpresent
    VPB (PretP Sg P1) => "i" ; --# notpresent
    VPB (PretP Sg P2) => "este" ; --# notpresent
    VPB (PretP Sg P3) => "eu" ; --# notpresent
    VPB (PretP Pl P1) => "emos" ; --# notpresent
    VPB (PretP Pl P2) => "estes" ; --# notpresent
    VPB (PretP Pl P3) => "eram" ; --# notpresent
    VPB (Fut Ind Sg P1) => "erei" ; --# notpresent
    VPB (Fut Ind Sg P2) => "erás" ; --# notpresent
    VPB (Fut Ind Sg P3) => "erá" ; --# notpresent
    VPB (Fut Ind Pl P1) => "eremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => "ereis" ; --# notpresent
    VPB (Fut Ind Pl P3) => "erão" ; --# notpresent
    VPB (Fut Sub Sg P1) => "er" ; --# notpresent
    VPB (Fut Sub Sg P2) => "ereis" ; --# notpresent
    VPB (Fut Sub Sg P3) => "er" ; --# notpresent
    VPB (Fut Sub Pl P1) => "ermos" ; --# notpresent
    VPB (Fut Sub Pl P2) => "erdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => "erem" ; --# notpresent
    VPB (Cond Sg P1) => "eria" ; --# notpresent
    VPB (Cond Sg P2) => "erias" ; --# notpresent
    VPB (Cond Sg P3) => "eria" ; --# notpresent
    VPB (Cond Pl P1) => "eríamos" ; --# notpresent
    VPB (Cond Pl P2) => "eríeis" ; --# notpresent
    VPB (Cond Pl P3) => "eriam" ; --# notpresent
    VPB (Imper Sg P2) => "e" ;
    VPB (Imper Sg P3) => "a" ;
    VPB (Imper Pl P1) => "amos" ;
    VPB (Imper Pl P2) => "ei" ;
    VPB (Imper Pl P3) => "am" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper garantir_Besch : Str -> Verbum = \garantir ->
-- 6 | r7
  let garant_ = Predef.tk 2 garantir in
 {root = garant_ ;
  suff = table {
    VI Infn => "ir" ;
    VI Ger => "indo" ;
    VI Part => "ido" ;
    VPB (Pres Ind Sg P1) => "o" ;
    VPB (Pres Ind Sg P2) => "es" ;
    VPB (Pres Ind Sg P3) => "e" ;
    VPB (Pres Ind Pl P1) => "imos" ;
    VPB (Pres Ind Pl P2) => "is" ;
    VPB (Pres Ind Pl P3) => "em" ;
    VPB (Pres Sub Sg P1) => "a" ;
    VPB (Pres Sub Sg P2) => "as" ;
    VPB (Pres Sub Sg P3) => "a" ;
    VPB (Pres Sub Pl P1) => "amos" ;
    VPB (Pres Sub Pl P2) => "ais" ;
    VPB (Pres Sub Pl P3) => "am" ;
    VPB (PretI Ind Sg P1) => "ia" ; --# notpresent
    VPB (PretI Ind Sg P2) => "ias" ; --# notpresent
    VPB (PretI Ind Sg P3) => "ia" ; --# notpresent
    VPB (PretI Ind Pl P1) => "íamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => "íeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => "iam" ; --# notpresent
    VPB (PretI Sub Sg P1) => "isse" ; --# notpresent
    VPB (PretI Sub Sg P2) => "isses" ; --# notpresent
    VPB (PretI Sub Sg P3) => "isse" ; --# notpresent
    VPB (PretI Sub Pl P1) => "íssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => "ísseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => "issem" ; --# notpresent
    VPB (MQPerf Sg P1) => "ira" ; --# notpresent
    VPB (MQPerf Sg P2) => "iras" ; --# notpresent
    VPB (MQPerf Sg P3) => "ira" ; --# notpresent
    VPB (MQPerf Pl P1) => "íramos" ; --# notpresent
    VPB (MQPerf Pl P2) => "íreis" ; --# notpresent
    VPB (MQPerf Pl P3) => "iram" ; --# notpresent
    VPB (PretP Sg P1) => "i" ; --# notpresent
    VPB (PretP Sg P2) => "iste" ; --# notpresent
    VPB (PretP Sg P3) => "iu" ; --# notpresent
    VPB (PretP Pl P1) => "imos" ; --# notpresent
    VPB (PretP Pl P2) => "istes" ; --# notpresent
    VPB (PretP Pl P3) => "iram" ; --# notpresent
    VPB (Fut Ind Sg P1) => "irei" ; --# notpresent
    VPB (Fut Ind Sg P2) => "irás" ; --# notpresent
    VPB (Fut Ind Sg P3) => "irá" ; --# notpresent
    VPB (Fut Ind Pl P1) => "iremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => "ireis" ; --# notpresent
    VPB (Fut Ind Pl P3) => "irão" ; --# notpresent
    VPB (Fut Sub Sg P1) => "ir" ; --# notpresent
    VPB (Fut Sub Sg P2) => "ires" ; --# notpresent
    VPB (Fut Sub Sg P3) => "ir" ; --# notpresent
    VPB (Fut Sub Pl P1) => "irmos" ; --# notpresent
    VPB (Fut Sub Pl P2) => "irdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => "irem" ; --# notpresent
    VPB (Cond Sg P1) => "iria" ; --# notpresent
    VPB (Cond Sg P2) => "irias" ; --# notpresent
    VPB (Cond Sg P3) => "iria" ; --# notpresent
    VPB (Cond Pl P1) => "iríamos" ; --# notpresent
    VPB (Cond Pl P2) => "iríeis" ; --# notpresent
    VPB (Cond Pl P3) => "iriam" ; --# notpresent
    VPB (Imper Sg P2) => "e" ;
    VPB (Imper Sg P3) => "a" ;
    VPB (Imper Pl P1) => "amos" ;
    VPB (Imper Pl P2) => "i" ;
    VPB (Imper Pl P3) => "am" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper estar_Besch : Str -> Verbum = \estar ->
-- 10 | r2
  let est_ = Predef.tk 2 estar in
 {root = est_ ;
  suff = table {
    VI Infn => "ar" ;
    VI Ger => "ando" ;
    VI Part => "ado" ;
    VPB (Pres Ind Sg P1) => "ou" ;
    VPB (Pres Ind Sg P2) => "ás" ;
    VPB (Pres Ind Sg P3) => "á" ;
    VPB (Pres Ind Pl P1) => "amos" ;
    VPB (Pres Ind Pl P2) => "ais" ;
    VPB (Pres Ind Pl P3) => "ão" ;
    VPB (Pres Sub Sg P1) => "eja" ;
    VPB (Pres Sub Sg P2) => "ejas" ;
    VPB (Pres Sub Sg P3) => "eja" ;
    VPB (Pres Sub Pl P1) => "ejamos" ;
    VPB (Pres Sub Pl P2) => "ejais" ;
    VPB (Pres Sub Pl P3) => "ejam" ;
    VPB (PretI Ind Sg P1) => "ava" ; --# notpresent
    VPB (PretI Ind Sg P2) => "avas" ; --# notpresent
    VPB (PretI Ind Sg P3) => "ava" ; --# notpresent
    VPB (PretI Ind Pl P1) => "ávamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => "áveis" ; --# notpresent
    VPB (PretI Ind Pl P3) => "avam" ; --# notpresent
    VPB (PretI Sub Sg P1) => "ivesse" ; --# notpresent
    VPB (PretI Sub Sg P2) => "ivesses" ; --# notpresent
    VPB (PretI Sub Sg P3) => "ivesse" ; --# notpresent
    VPB (PretI Sub Pl P1) => "ivéssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => "ivésseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => "ivessem" ; --# notpresent
    VPB (MQPerf Sg P1) => "ivera" ; --# notpresent
    VPB (MQPerf Sg P2) => "iveras" ; --# notpresent
    VPB (MQPerf Sg P3) => "ivera" ; --# notpresent
    VPB (MQPerf Pl P1) => "ivéramos" ; --# notpresent
    VPB (MQPerf Pl P2) => "ivéreis" ; --# notpresent
    VPB (MQPerf Pl P3) => "iveram" ; --# notpresent
    VPB (PretP Sg P1) => "ive" ; --# notpresent
    VPB (PretP Sg P2) => "iveste" ; --# notpresent
    VPB (PretP Sg P3) => "eve" ; --# notpresent
    VPB (PretP Pl P1) => "ivemos" ; --# notpresent
    VPB (PretP Pl P2) => "ivestes" ; --# notpresent
    VPB (PretP Pl P3) => "iveram" ; --# notpresent
    VPB (Fut Ind Sg P1) => "arei" ; --# notpresent
    VPB (Fut Ind Sg P2) => "arás" ; --# notpresent
    VPB (Fut Ind Sg P3) => "ará" ; --# notpresent
    VPB (Fut Ind Pl P1) => "aremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => "areis" ; --# notpresent
    VPB (Fut Ind Pl P3) => "arão" ; --# notpresent
    VPB (Fut Sub Sg P1) => "iver" ; --# notpresent
    VPB (Fut Sub Sg P2) => "iverese" ; --# notpresent
    VPB (Fut Sub Sg P3) => "iver" ; --# notpresent
    VPB (Fut Sub Pl P1) => "ivermos" ; --# notpresent
    VPB (Fut Sub Pl P2) => "iverdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => "iverem" ; --# notpresent
    VPB (Cond Sg P1) => "aria" ; --# notpresent
    VPB (Cond Sg P2) => "arias" ; --# notpresent
    VPB (Cond Sg P3) => "aria" ; --# notpresent
    VPB (Cond Pl P1) => "aríamos" ; --# notpresent
    VPB (Cond Pl P2) => "aríeis" ; --# notpresent
    VPB (Cond Pl P3) => "ariam" ; --# notpresent
    VPB (Imper Sg P2) => "á" ;
    VPB (Imper Sg P3) => "eja" ;
    VPB (Imper Pl P1) => "ejamos" ;
    VPB (Imper Pl P2) => "ai" ;
    VPB (Imper Pl P3) => "ejam" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper dar_Besch : Str -> Verbum = \dar ->
-- 11 | r59
  let x_ = Predef.tk 3 dar in
 {root = x_ ;
  suff = table {
    VI Infn => "dar" ;
    VI Ger => "dando" ;
    VI Part => "dado" ;
    VPB (Pres Ind Sg P1) => "dou" ;
    VPB (Pres Ind Sg P2) => "dás" ;
    VPB (Pres Ind Sg P3) => "dá" ;
    VPB (Pres Ind Pl P1) => "damos" ;
    VPB (Pres Ind Pl P2) => "dais" ;
    VPB (Pres Ind Pl P3) => "dão" ;
    VPB (Pres Sub Sg P1) => "dê" ;
    VPB (Pres Sub Sg P2) => "dês" ;
    VPB (Pres Sub Sg P3) => "dê" ;
    VPB (Pres Sub Pl P1) => "demos" ;
    VPB (Pres Sub Pl P2) => "deis" ;
    VPB (Pres Sub Pl P3) => vars "deem" "dêem" ;
    VPB (PretI Ind Sg P1) => "dava" ; --# notpresent
    VPB (PretI Ind Sg P2) => "davas" ; --# notpresent
    VPB (PretI Ind Sg P3) => "dava" ; --# notpresent
    VPB (PretI Ind Pl P1) => "dávamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => "dáveis" ; --# notpresent
    VPB (PretI Ind Pl P3) => "davam" ; --# notpresent
    VPB (PretI Sub Sg P1) => "desse" ; --# notpresent
    VPB (PretI Sub Sg P2) => "desses" ; --# notpresent
    VPB (PretI Sub Sg P3) => "desse" ; --# notpresent
    VPB (PretI Sub Pl P1) => "déssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => "désseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => "dessem" ; --# notpresent
    VPB (MQPerf Sg P1) => "dera" ; --# notpresent
    VPB (MQPerf Sg P2) => "deras" ; --# notpresent
    VPB (MQPerf Sg P3) => "dera" ; --# notpresent
    VPB (MQPerf Pl P1) => "déramos" ; --# notpresent
    VPB (MQPerf Pl P2) => "déreis" ; --# notpresent
    VPB (MQPerf Pl P3) => "deram" ; --# notpresent
    VPB (PretP Sg P1) => "dei" ; --# notpresent
    VPB (PretP Sg P2) => "deste" ; --# notpresent
    VPB (PretP Sg P3) => "deu" ; --# notpresent
    VPB (PretP Pl P1) => "demos" ; --# notpresent
    VPB (PretP Pl P2) => "destes" ; --# notpresent
    VPB (PretP Pl P3) => "deram" ; --# notpresent
    VPB (Fut Ind Sg P1) => "darei" ; --# notpresent
    VPB (Fut Ind Sg P2) => "darás" ; --# notpresent
    VPB (Fut Ind Sg P3) => "dará" ; --# notpresent
    VPB (Fut Ind Pl P1) => "daremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => "dareis" ; --# notpresent
    VPB (Fut Ind Pl P3) => "darão" ; --# notpresent
    VPB (Fut Sub Sg P1) => "der" ; --# notpresent
    VPB (Fut Sub Sg P2) => "deres" ; --# notpresent
    VPB (Fut Sub Sg P3) => "der" ; --# notpresent
    VPB (Fut Sub Pl P1) => "dermos" ; --# notpresent
    VPB (Fut Sub Pl P2) => "derdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => "derem" ; --# notpresent
    VPB (Cond Sg P1) => "daria" ; --# notpresent
    VPB (Cond Sg P2) => "darias" ; --# notpresent
    VPB (Cond Sg P3) => "daria" ; --# notpresent
    VPB (Cond Pl P1) => "daríamos" ; --# notpresent
    VPB (Cond Pl P2) => "daríeis" ; --# notpresent
    VPB (Cond Pl P3) => "dariam" ; --# notpresent
    VPB (Imper Sg P2) => "dá" ;
    VPB (Imper Sg P3) => "dê" ;
    VPB (Imper Pl P1) => "demos" ;
    VPB (Imper Pl P2) => "dai" ;
    VPB (Imper Pl P3) => vars "deem" "dêem" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper ficar_Besch : Str -> Verbum = \ficar ->
-- 12 | r23
  let x_ = Predef.tk 5 ficar in
 {root = x_ ;
  suff = table {
    VI Infn => "ficar" ;
    VI Ger => "ficando" ;
    VI Part => "ficado" ;
    VPB (Pres Ind Sg P1) => "fico" ;
    VPB (Pres Ind Sg P2) => "ficas" ;
    VPB (Pres Ind Sg P3) => "fica" ;
    VPB (Pres Ind Pl P1) => "ficamos" ;
    VPB (Pres Ind Pl P2) => "ficais" ;
    VPB (Pres Ind Pl P3) => "ficam" ;
    VPB (Pres Sub Sg P1) => "fique" ;
    VPB (Pres Sub Sg P2) => "fiques" ;
    VPB (Pres Sub Sg P3) => "fique" ;
    VPB (Pres Sub Pl P1) => "fiquemos" ;
    VPB (Pres Sub Pl P2) => "fiqueis" ;
    VPB (Pres Sub Pl P3) => "fiquem" ;
    VPB (PretI Ind Sg P1) => "ficava" ; --# notpresent
    VPB (PretI Ind Sg P2) => "ficavas" ; --# notpresent
    VPB (PretI Ind Sg P3) => "ficava" ; --# notpresent
    VPB (PretI Ind Pl P1) => "ficávamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => "ficáveis" ; --# notpresent
    VPB (PretI Ind Pl P3) => "ficavam" ; --# notpresent
    VPB (PretI Sub Sg P1) => "ficasse" ; --# notpresent
    VPB (PretI Sub Sg P2) => "ficasses" ; --# notpresent
    VPB (PretI Sub Sg P3) => "ficasse" ; --# notpresent
    VPB (PretI Sub Pl P1) => "ficássemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => "ficásseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => "ficassem" ; --# notpresent
    VPB (MQPerf Sg P1) => "ficara" ; --# notpresent
    VPB (MQPerf Sg P2) => "ficaras" ; --# notpresent
    VPB (MQPerf Sg P3) => "ficara" ; --# notpresent
    VPB (MQPerf Pl P1) => "ficáramos" ; --# notpresent
    VPB (MQPerf Pl P2) => "ficáreis" ; --# notpresent
    VPB (MQPerf Pl P3) => "ficaram" ; --# notpresent
    VPB (PretP Sg P1) => "fiquei" ; --# notpresent
    VPB (PretP Sg P2) => "ficaste" ; --# notpresent
    VPB (PretP Sg P3) => "ficou" ; --# notpresent
    VPB (PretP Pl P1) => vars "ficamos" "ficámos" ; --# notpresent
    VPB (PretP Pl P2) => "ficastes" ; --# notpresent
    VPB (PretP Pl P3) => "ficaram" ; --# notpresent
    VPB (Fut Ind Sg P1) => "ficarei" ; --# notpresent
    VPB (Fut Ind Sg P2) => "ficarás" ; --# notpresent
    VPB (Fut Ind Sg P3) => "ficará" ; --# notpresent
    VPB (Fut Ind Pl P1) => "ficaremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => "ficareis" ; --# notpresent
    VPB (Fut Ind Pl P3) => "ficarão" ; --# notpresent
    VPB (Fut Sub Sg P1) => "ficar" ; --# notpresent
    VPB (Fut Sub Sg P2) => "ficares" ; --# notpresent
    VPB (Fut Sub Sg P3) => "ficar" ; --# notpresent
    VPB (Fut Sub Pl P1) => "ficarmos" ; --# notpresent
    VPB (Fut Sub Pl P2) => "ficardes" ; --# notpresent
    VPB (Fut Sub Pl P3) => "ficarem" ; --# notpresent
    VPB (Cond Sg P1) => "ficaria" ; --# notpresent
    VPB (Cond Sg P2) => "ficarias" ; --# notpresent
    VPB (Cond Sg P3) => "ficaria" ; --# notpresent
    VPB (Cond Pl P1) => "ficaríamos" ; --# notpresent
    VPB (Cond Pl P2) => "ficaríeis" ; --# notpresent
    VPB (Cond Pl P3) => "ficariam" ; --# notpresent
    VPB (Imper Sg P2) => "fica" ;
    VPB (Imper Sg P3) => "fique" ;
    VPB (Imper Pl P1) => "fiquemos" ;
    VPB (Imper Pl P2) => "ficai" ;
    VPB (Imper Pl P3) => "fiquem" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper começar_Besch : Str -> Verbum = \começar ->
-- 13 | r24
  let come_ = Predef.tk 3 começar in
 {root = come_ ;
  suff = table {
    VI Infn => "çar" ;
    VI Ger => "çando" ;
    VI Part => "çado" ;
    VPB (Pres Ind Sg P1) => "ço" ;
    VPB (Pres Ind Sg P2) => "ças" ;
    VPB (Pres Ind Sg P3) => "ça" ;
    VPB (Pres Ind Pl P1) => "çamos" ;
    VPB (Pres Ind Pl P2) => "çais" ;
    VPB (Pres Ind Pl P3) => "çam" ;
    VPB (Pres Sub Sg P1) => "ce" ;
    VPB (Pres Sub Sg P2) => "ces" ;
    VPB (Pres Sub Sg P3) => "ce" ;
    VPB (Pres Sub Pl P1) => "cemos" ;
    VPB (Pres Sub Pl P2) => "ceis" ;
    VPB (Pres Sub Pl P3) => "cem" ;
    VPB (PretI Ind Sg P1) => "çava" ; --# notpresent
    VPB (PretI Ind Sg P2) => "çavas" ; --# notpresent
    VPB (PretI Ind Sg P3) => "çava" ; --# notpresent
    VPB (PretI Ind Pl P1) => "çávamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => "çáveis" ; --# notpresent
    VPB (PretI Ind Pl P3) => "çavam" ; --# notpresent
    VPB (PretI Sub Sg P1) => "çasse" ; --# notpresent
    VPB (PretI Sub Sg P2) => "çasses" ; --# notpresent
    VPB (PretI Sub Sg P3) => "çasse" ; --# notpresent
    VPB (PretI Sub Pl P1) => "çássemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => "çasseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => "çassem" ; --# notpresent
    VPB (MQPerf Sg P1) => "çara" ; --# notpresent
    VPB (MQPerf Sg P2) => "çaras" ; --# notpresent
    VPB (MQPerf Sg P3) => "çara" ; --# notpresent
    VPB (MQPerf Pl P1) => "çáramos" ; --# notpresent
    VPB (MQPerf Pl P2) => "çáreis" ; --# notpresent
    VPB (MQPerf Pl P3) => "çaram" ; --# notpresent
    VPB (PretP Sg P1) => "cei" ; --# notpresent
    VPB (PretP Sg P2) => "çaste" ; --# notpresent
    VPB (PretP Sg P3) => "çou" ; --# notpresent
    VPB (PretP Pl P1) => vars "çamos" "çámos" ; --# notpresent
    VPB (PretP Pl P2) => "çastes" ; --# notpresent
    VPB (PretP Pl P3) => "çaram" ; --# notpresent
    VPB (Fut Ind Sg P1) => "çarei" ; --# notpresent
    VPB (Fut Ind Sg P2) => "çarás" ; --# notpresent
    VPB (Fut Ind Sg P3) => "çará" ; --# notpresent
    VPB (Fut Ind Pl P1) => "çaremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => "çareis" ; --# notpresent
    VPB (Fut Ind Pl P3) => "çarão" ; --# notpresent
    VPB (Fut Sub Sg P1) => "çar" ; --# notpresent
    VPB (Fut Sub Sg P2) => "çares" ; --# notpresent
    VPB (Fut Sub Sg P3) => "çar" ; --# notpresent
    VPB (Fut Sub Pl P1) => "çarmos" ; --# notpresent
    VPB (Fut Sub Pl P2) => "çardes" ; --# notpresent
    VPB (Fut Sub Pl P3) => "çarem" ; --# notpresent
    VPB (Cond Sg P1) => "çaria" ; --# notpresent
    VPB (Cond Sg P2) => "çarias" ; --# notpresent
    VPB (Cond Sg P3) => "çaria" ; --# notpresent
    VPB (Cond Pl P1) => "çaríamos" ; --# notpresent
    VPB (Cond Pl P2) => "çarieis" ; --# notpresent
    VPB (Cond Pl P3) => "çariam" ; --# notpresent
    VPB (Imper Sg P2) => "ça" ;
    VPB (Imper Sg P3) => "ce" ;
    VPB (Imper Pl P1) => "cemos" ;
    VPB (Imper Pl P2) => "çai" ;
    VPB (Imper Pl P3) => "cem" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper chegar_Besch : Str -> Verbum = \chegar ->
-- 14 | r26
  let cheg_ = Predef.tk 2 chegar in
 {root = cheg_ ;
  suff = table {
    VI Infn => "ar" ;
    VI Ger => "ando" ;
    VI Part => "ado" ;
    VPB (Pres Ind Sg P1) => "o" ;
    VPB (Pres Ind Sg P2) => "as" ;
    VPB (Pres Ind Sg P3) => "a" ;
    VPB (Pres Ind Pl P1) => "amos" ;
    VPB (Pres Ind Pl P2) => "ais" ;
    VPB (Pres Ind Pl P3) => "am" ;
    VPB (Pres Sub Sg P1) => "ue" ;
    VPB (Pres Sub Sg P2) => "ues" ;
    VPB (Pres Sub Sg P3) => "ue" ;
    VPB (Pres Sub Pl P1) => "uemos" ;
    VPB (Pres Sub Pl P2) => "ueis" ;
    VPB (Pres Sub Pl P3) => "uem" ;
    VPB (PretI Ind Sg P1) => "ava" ; --# notpresent
    VPB (PretI Ind Sg P2) => "avas" ; --# notpresent
    VPB (PretI Ind Sg P3) => "ava" ; --# notpresent
    VPB (PretI Ind Pl P1) => "ávamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => "áveis" ; --# notpresent
    VPB (PretI Ind Pl P3) => "avam" ; --# notpresent
    VPB (PretI Sub Sg P1) => "asse" ; --# notpresent
    VPB (PretI Sub Sg P2) => "asses" ; --# notpresent
    VPB (PretI Sub Sg P3) => "asse" ; --# notpresent
    VPB (PretI Sub Pl P1) => "ássemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => "ásseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => "assem" ; --# notpresent
    VPB (MQPerf Sg P1) => "ara" ; --# notpresent
    VPB (MQPerf Sg P2) => "aras" ; --# notpresent
    VPB (MQPerf Sg P3) => "ara" ; --# notpresent
    VPB (MQPerf Pl P1) => "áramos" ; --# notpresent
    VPB (MQPerf Pl P2) => "áreis" ; --# notpresent
    VPB (MQPerf Pl P3) => "aram" ; --# notpresent
    VPB (PretP Sg P1) => "uei" ; --# notpresent
    VPB (PretP Sg P2) => "aste" ; --# notpresent
    VPB (PretP Sg P3) => "ou" ; --# notpresent
    VPB (PretP Pl P1) => vars "amos" "ámos" ; --# notpresent
    VPB (PretP Pl P2) => "astes" ; --# notpresent
    VPB (PretP Pl P3) => "aram" ; --# notpresent
    VPB (Fut Ind Sg P1) => "arei" ; --# notpresent
    VPB (Fut Ind Sg P2) => "arás" ; --# notpresent
    VPB (Fut Ind Sg P3) => "ará" ; --# notpresent
    VPB (Fut Ind Pl P1) => "aremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => "areis" ; --# notpresent
    VPB (Fut Ind Pl P3) => "arão" ; --# notpresent
    VPB (Fut Sub Sg P1) => "ar" ; --# notpresent
    VPB (Fut Sub Sg P2) => "ares" ; --# notpresent
    VPB (Fut Sub Sg P3) => "ar" ; --# notpresent
    VPB (Fut Sub Pl P1) => "armos" ; --# notpresent
    VPB (Fut Sub Pl P2) => "ardes" ; --# notpresent
    VPB (Fut Sub Pl P3) => "arem" ; --# notpresent
    VPB (Cond Sg P1) => "aria" ; --# notpresent
    VPB (Cond Sg P2) => "arias" ; --# notpresent
    VPB (Cond Sg P3) => "aria" ; --# notpresent
    VPB (Cond Pl P1) => "aríamos" ; --# notpresent
    VPB (Cond Pl P2) => "aríeis" ; --# notpresent
    VPB (Cond Pl P3) => "ariam" ; --# notpresent
    VPB (Imper Sg P2) => "a" ;
    VPB (Imper Sg P3) => "ue" ;
    VPB (Imper Pl P1) => "uemos" ;
    VPB (Imper Pl P2) => "ai" ;
    VPB (Imper Pl P3) => "uem" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper recear_Besch : Str -> Verbum = \recear ->
-- 15 | r46
  let rec_ = Predef.tk 3 recear in
 {root = rec_ ;
  suff = table {
    VI Infn => "ear" ;
    VI Ger => "eando" ;
    VI Part => "eado" ;
    VPB (Pres Ind Sg P1) => "eio" ;
    VPB (Pres Ind Sg P2) => "eias" ;
    VPB (Pres Ind Sg P3) => "eia" ;
    VPB (Pres Ind Pl P1) => "eamos" ;
    VPB (Pres Ind Pl P2) => "eais" ;
    VPB (Pres Ind Pl P3) => "eiam" ;
    VPB (Pres Sub Sg P1) => "eie" ;
    VPB (Pres Sub Sg P2) => "eies" ;
    VPB (Pres Sub Sg P3) => "eie" ;
    VPB (Pres Sub Pl P1) => "eemos" ;
    VPB (Pres Sub Pl P2) => "eeis" ;
    VPB (Pres Sub Pl P3) => "eiem" ;
    VPB (PretI Ind Sg P1) => "eava" ; --# notpresent
    VPB (PretI Ind Sg P2) => "eavas" ; --# notpresent
    VPB (PretI Ind Sg P3) => "eava" ; --# notpresent
    VPB (PretI Ind Pl P1) => "eávamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => "eáveis" ; --# notpresent
    VPB (PretI Ind Pl P3) => "eavam" ; --# notpresent
    VPB (PretI Sub Sg P1) => "easse" ; --# notpresent
    VPB (PretI Sub Sg P2) => "easses" ; --# notpresent
    VPB (PretI Sub Sg P3) => "easse" ; --# notpresent
    VPB (PretI Sub Pl P1) => "eássemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => "eásseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => "eassem" ; --# notpresent
    VPB (MQPerf Sg P1) => "eara" ; --# notpresent
    VPB (MQPerf Sg P2) => "earas" ; --# notpresent
    VPB (MQPerf Sg P3) => "eara" ; --# notpresent
    VPB (MQPerf Pl P1) => "eáramos" ; --# notpresent
    VPB (MQPerf Pl P2) => "eáreis" ; --# notpresent
    VPB (MQPerf Pl P3) => "earam" ; --# notpresent
    VPB (PretP Sg P1) => "eei" ; --# notpresent
    VPB (PretP Sg P2) => "easte" ; --# notpresent
    VPB (PretP Sg P3) => "eou" ; --# notpresent
    VPB (PretP Pl P1) => vars "eamos" "eámos" ; --# notpresent
    VPB (PretP Pl P2) => "eastes" ; --# notpresent
    VPB (PretP Pl P3) => "earam" ; --# notpresent
    VPB (Fut Ind Sg P1) => "earei" ; --# notpresent
    VPB (Fut Ind Sg P2) => "earás" ; --# notpresent
    VPB (Fut Ind Sg P3) => "eará" ; --# notpresent
    VPB (Fut Ind Pl P1) => "earemos" ; --# notpresent
    VPB (Fut Ind Pl P2) => "eareis" ; --# notpresent
    VPB (Fut Ind Pl P3) => "earão" ; --# notpresent
    VPB (Fut Sub Sg P1) => "ear" ; --# notpresent
    VPB (Fut Sub Sg P2) => "eares" ; --# notpresent
    VPB (Fut Sub Sg P3) => "ear" ; --# notpresent
    VPB (Fut Sub Pl P1) => "earmos" ; --# notpresent
    VPB (Fut Sub Pl P2) => "eardes" ; --# notpresent
    VPB (Fut Sub Pl P3) => "earem" ; --# notpresent
    VPB (Cond Sg P1) => "earia" ; --# notpresent
    VPB (Cond Sg P2) => "earias" ; --# notpresent
    VPB (Cond Sg P3) => "earia" ; --# notpresent
    VPB (Cond Pl P1) => "earíamos" ; --# notpresent
    VPB (Cond Pl P2) => "earíeis" ; --# notpresent
    VPB (Cond Pl P3) => "eariam" ; --# notpresent
    VPB (Imper Sg P2) => "eia" ;
    VPB (Imper Sg P3) => "eie" ;
    VPB (Imper Pl P1) => "eemos" ;
    VPB (Imper Pl P2) => "eai" ;
    VPB (Imper Pl P3) => "eiem" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper anunciar_Besch : Str -> Verbum = \anunciar ->
-- 16 | r46
  let anunci_ = Predef.tk 2 anunciar in
 {root = anunci_ ;
  suff = table {
    VI Infn => "ar" ;
    VI Ger => "ando" ;
    VI Part => "ado" ;
    VPB (Pres Ind Sg P1) => "o" ;
    VPB (Pres Ind Sg P2) => "as" ;
    VPB (Pres Ind Sg P3) => "a" ;
    VPB (Pres Ind Pl P1) => "amos" ;
    VPB (Pres Ind Pl P2) => "ais" ;
    VPB (Pres Ind Pl P3) => "am" ;
    VPB (Pres Sub Sg P1) => "e" ;
    VPB (Pres Sub Sg P2) => "es" ;
    VPB (Pres Sub Sg P3) => "e" ;
    VPB (Pres Sub Pl P1) => "emos" ;
    VPB (Pres Sub Pl P2) => "eis" ;
    VPB (Pres Sub Pl P3) => "em" ;
    VPB (PretI Ind Sg P1) => "ava" ; --# notpresent
    VPB (PretI Ind Sg P2) => "avas" ; --# notpresent
    VPB (PretI Ind Sg P3) => "ava" ; --# notpresent
    VPB (PretI Ind Pl P1) => "ávamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => "áveis" ; --# notpresent
    VPB (PretI Ind Pl P3) => "avam" ; --# notpresent
    VPB (PretI Sub Sg P1) => "asse" ; --# notpresent
    VPB (PretI Sub Sg P2) => "asses" ; --# notpresent
    VPB (PretI Sub Sg P3) => "asse" ; --# notpresent
    VPB (PretI Sub Pl P1) => "ássemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => "ásseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => "assem" ; --# notpresent
    VPB (MQPerf Sg P1) => "ara" ; --# notpresent
    VPB (MQPerf Sg P2) => "aras" ; --# notpresent
    VPB (MQPerf Sg P3) => "ara" ; --# notpresent
    VPB (MQPerf Pl P1) => "áramos" ; --# notpresent
    VPB (MQPerf Pl P2) => "áreis" ; --# notpresent
    VPB (MQPerf Pl P3) => "aram" ; --# notpresent
    VPB (PretP Sg P1) => "ei" ; --# notpresent
    VPB (PretP Sg P2) => "aste" ; --# notpresent
    VPB (PretP Sg P3) => "ou" ; --# notpresent
    VPB (PretP Pl P1) => vars "amos" "ámos" ; --# notpresent
    VPB (PretP Pl P2) => "astes" ; --# notpresent
    VPB (PretP Pl P3) => "aram" ; --# notpresent
    VPB (Fut Ind Sg P1) => "arei" ; --# notpresent
    VPB (Fut Ind Sg P2) => "arás" ; --# notpresent
    VPB (Fut Ind Sg P3) => "ará" ; --# notpresent
    VPB (Fut Ind Pl P1) => "aremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => "areis" ; --# notpresent
    VPB (Fut Ind Pl P3) => "arão" ; --# notpresent
    VPB (Fut Sub Sg P1) => "ar" ; --# notpresent
    VPB (Fut Sub Sg P2) => "ares" ; --# notpresent
    VPB (Fut Sub Sg P3) => "ar" ; --# notpresent
    VPB (Fut Sub Pl P1) => "armos" ; --# notpresent
    VPB (Fut Sub Pl P2) => "ardes" ; --# notpresent
    VPB (Fut Sub Pl P3) => "arem" ; --# notpresent
    VPB (Cond Sg P1) => "aria" ; --# notpresent
    VPB (Cond Sg P2) => "arias" ; --# notpresent
    VPB (Cond Sg P3) => "aria" ; --# notpresent
    VPB (Cond Pl P1) => "aríamos" ; --# notpresent
    VPB (Cond Pl P2) => "aríeis" ; --# notpresent
    VPB (Cond Pl P3) => "ariam" ; --# notpresent
    VPB (Imper Sg P2) => "a" ;
    VPB (Imper Sg P3) => "e" ;
    VPB (Imper Pl P1) => "emos" ;
    VPB (Imper Pl P2) => "ai" ;
    VPB (Imper Pl P3) => "em" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper odiar_Besch : Str -> Verbum = \odiar ->
-- 17 | r46
  let od_ = Predef.tk 3 odiar in
 {root = od_ ;
  suff = table {
    VI Infn => "iar" ;
    VI Ger => "iando" ;
    VI Part => "iado" ;
    VPB (Pres Ind Sg P1) => "eio" ;
    VPB (Pres Ind Sg P2) => "eias" ;
    VPB (Pres Ind Sg P3) => "eia" ;
    VPB (Pres Ind Pl P1) => "iamos" ;
    VPB (Pres Ind Pl P2) => "iais" ;
    VPB (Pres Ind Pl P3) => "eiam" ;
    VPB (Pres Sub Sg P1) => "eie" ;
    VPB (Pres Sub Sg P2) => "eies" ;
    VPB (Pres Sub Sg P3) => "eie" ;
    VPB (Pres Sub Pl P1) => "iemos" ;
    VPB (Pres Sub Pl P2) => "ieis" ;
    VPB (Pres Sub Pl P3) => "eiem" ;
    VPB (PretI Ind Sg P1) => "iava" ; --# notpresent
    VPB (PretI Ind Sg P2) => "iavas" ; --# notpresent
    VPB (PretI Ind Sg P3) => "iava" ; --# notpresent
    VPB (PretI Ind Pl P1) => "iávamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => "iáveis" ; --# notpresent
    VPB (PretI Ind Pl P3) => "iavam" ; --# notpresent
    VPB (PretI Sub Sg P1) => "iasse" ; --# notpresent
    VPB (PretI Sub Sg P2) => "iasses" ; --# notpresent
    VPB (PretI Sub Sg P3) => "iasse" ; --# notpresent
    VPB (PretI Sub Pl P1) => "iássemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => "iásseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => "iassem" ; --# notpresent
    VPB (MQPerf Sg P1) => "iara" ; --# notpresent
    VPB (MQPerf Sg P2) => "iaras" ; --# notpresent
    VPB (MQPerf Sg P3) => "iara" ; --# notpresent
    VPB (MQPerf Pl P1) => "iáramos" ; --# notpresent
    VPB (MQPerf Pl P2) => "ipareis" ; --# notpresent
    VPB (MQPerf Pl P3) => "iaram" ; --# notpresent
    VPB (PretP Sg P1) => "iei" ; --# notpresent
    VPB (PretP Sg P2) => "iaste" ; --# notpresent
    VPB (PretP Sg P3) => "iou" ; --# notpresent
    VPB (PretP Pl P1) => "iámos" ; --# notpresent
    VPB (PretP Pl P2) => "iastes" ; --# notpresent
    VPB (PretP Pl P3) => "iaram" ; --# notpresent
    VPB (Fut Ind Sg P1) => "iarei" ; --# notpresent
    VPB (Fut Ind Sg P2) => "iarás" ; --# notpresent
    VPB (Fut Ind Sg P3) => "iará" ; --# notpresent
    VPB (Fut Ind Pl P1) => "iaremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => "iareis" ; --# notpresent
    VPB (Fut Ind Pl P3) => "iarão" ; --# notpresent
    VPB (Fut Sub Sg P1) => "iar" ; --# notpresent
    VPB (Fut Sub Sg P2) => "iares" ; --# notpresent
    VPB (Fut Sub Sg P3) => "iar" ; --# notpresent
    VPB (Fut Sub Pl P1) => "iarmos" ; --# notpresent
    VPB (Fut Sub Pl P2) => "iardes" ; --# notpresent
    VPB (Fut Sub Pl P3) => "iarem" ; --# notpresent
    VPB (Cond Sg P1) => "iaria" ; --# notpresent
    VPB (Cond Sg P2) => "iarias" ; --# notpresent
    VPB (Cond Sg P3) => "iaria" ; --# notpresent
    VPB (Cond Pl P1) => "iaríamos" ; --# notpresent
    VPB (Cond Pl P2) => "iaríeis" ; --# notpresent
    VPB (Cond Pl P3) => "iariam" ; --# notpresent
    VPB (Imper Sg P2) => "eia" ;
    VPB (Imper Sg P3) => "eie" ;
    VPB (Imper Pl P1) => "iemos" ;
    VPB (Imper Pl P2) => "iai" ;
    VPB (Imper Pl P3) => "eiem" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper comerciar_Besch : Str -> Verbum = \comerciar ->
-- 18 | r36
  let comerc_ = Predef.tk 3 comerciar in
 {root = comerc_ ;
  suff = table {
    VI Infn => "iar" ;
    VI Ger => "iando" ;
    VI Part => "iado" ;
    VPB (Pres Ind Sg P1) => vars "eio" "io" ;
    VPB (Pres Ind Sg P2) => vars "eias" "ias" ;
    VPB (Pres Ind Sg P3) => vars "eia" "ia" ;
    VPB (Pres Ind Pl P1) => "iamos" ;
    VPB (Pres Ind Pl P2) => "iais" ;
    VPB (Pres Ind Pl P3) => vars "eiam" "iam" ;
    VPB (Pres Sub Sg P1) => vars "eie" "ie" ;
    VPB (Pres Sub Sg P2) => vars "eies" "ies" ;
    VPB (Pres Sub Sg P3) => vars "eie" "ie" ;
    VPB (Pres Sub Pl P1) => "iemos" ;
    VPB (Pres Sub Pl P2) => "ieis" ;
    VPB (Pres Sub Pl P3) => vars "eiem" "iem" ;
    VPB (PretI Ind Sg P1) => "iava" ; --# notpresent
    VPB (PretI Ind Sg P2) => "iavas" ; --# notpresent
    VPB (PretI Ind Sg P3) => "iava" ; --# notpresent
    VPB (PretI Ind Pl P1) => "iávamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => "iáveis" ; --# notpresent
    VPB (PretI Ind Pl P3) => "iavam" ; --# notpresent
    VPB (PretI Sub Sg P1) => "iasse" ; --# notpresent
    VPB (PretI Sub Sg P2) => "iasses" ; --# notpresent
    VPB (PretI Sub Sg P3) => "iasse" ; --# notpresent
    VPB (PretI Sub Pl P1) => "iássemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => "iásseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => "iassem" ; --# notpresent
    VPB (MQPerf Sg P1) => "iara" ; --# notpresent
    VPB (MQPerf Sg P2) => "iaras" ; --# notpresent
    VPB (MQPerf Sg P3) => "iara" ; --# notpresent
    VPB (MQPerf Pl P1) => "iáramos" ; --# notpresent
    VPB (MQPerf Pl P2) => "iáreis" ; --# notpresent
    VPB (MQPerf Pl P3) => "iaram" ; --# notpresent
    VPB (PretP Sg P1) => "iei" ; --# notpresent
    VPB (PretP Sg P2) => "iaste" ; --# notpresent
    VPB (PretP Sg P3) => "iou" ; --# notpresent
    VPB (PretP Pl P1) => vars "iamos" "iámos" ; --# notpresent
    VPB (PretP Pl P2) => "iastes" ; --# notpresent
    VPB (PretP Pl P3) => "iaram" ; --# notpresent
    VPB (Fut Ind Sg P1) => "iarei" ; --# notpresent
    VPB (Fut Ind Sg P2) => "iarás" ; --# notpresent
    VPB (Fut Ind Sg P3) => "iará" ; --# notpresent
    VPB (Fut Ind Pl P1) => "iaremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => "iareis" ; --# notpresent
    VPB (Fut Ind Pl P3) => "iarão" ; --# notpresent
    VPB (Fut Sub Sg P1) => "iar" ; --# notpresent
    VPB (Fut Sub Sg P2) => "iares" ; --# notpresent
    VPB (Fut Sub Sg P3) => "iar" ; --# notpresent
    VPB (Fut Sub Pl P1) => "iarmos" ; --# notpresent
    VPB (Fut Sub Pl P2) => "iardes" ; --# notpresent
    VPB (Fut Sub Pl P3) => "iarem" ; --# notpresent
    VPB (Cond Sg P1) => "iaria" ; --# notpresent
    VPB (Cond Sg P2) => "iarias" ; --# notpresent
    VPB (Cond Sg P3) => "iaria" ; --# notpresent
    VPB (Cond Pl P1) => "iaríamos" ; --# notpresent
    VPB (Cond Pl P2) => "iaríeis" ; --# notpresent
    VPB (Cond Pl P3) => "iariam" ; --# notpresent
    VPB (Imper Sg P2) => vars "eia" "ia" ;
    VPB (Imper Sg P3) => vars "eie" "ie" ;
    VPB (Imper Pl P1) => "iemos" ;
    VPB (Imper Pl P2) => "iai" ;
    VPB (Imper Pl P3) => vars "eiem" "iem" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper saudar_Besch : Str -> Verbum = \saudar ->
-- 19 | r16
  let sa_ = Predef.tk 4 saudar in
 {root = sa_ ;
  suff = table {
    VI Infn => "udar" ;
    VI Ger => "udando" ;
    VI Part => "udado" ;
    VPB (Pres Ind Sg P1) => "údo" ;
    VPB (Pres Ind Sg P2) => "údas" ;
    VPB (Pres Ind Sg P3) => "úda" ;
    VPB (Pres Ind Pl P1) => "udamos" ;
    VPB (Pres Ind Pl P2) => "udais" ;
    VPB (Pres Ind Pl P3) => "údam" ;
    VPB (Pres Sub Sg P1) => "úde" ;
    VPB (Pres Sub Sg P2) => "údes" ;
    VPB (Pres Sub Sg P3) => "úde" ;
    VPB (Pres Sub Pl P1) => "udemos" ;
    VPB (Pres Sub Pl P2) => "udeis" ;
    VPB (Pres Sub Pl P3) => "údem" ;
    VPB (PretI Ind Sg P1) => "udava" ; --# notpresent
    VPB (PretI Ind Sg P2) => "udavas" ; --# notpresent
    VPB (PretI Ind Sg P3) => "udava" ; --# notpresent
    VPB (PretI Ind Pl P1) => "udávamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => "udáveis" ; --# notpresent
    VPB (PretI Ind Pl P3) => "udavam" ; --# notpresent
    VPB (PretI Sub Sg P1) => "udasse" ; --# notpresent
    VPB (PretI Sub Sg P2) => "udasses" ; --# notpresent
    VPB (PretI Sub Sg P3) => "udasse" ; --# notpresent
    VPB (PretI Sub Pl P1) => "udássemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => "udásseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => "udassem" ; --# notpresent
    VPB (MQPerf Sg P1) => "udara" ; --# notpresent
    VPB (MQPerf Sg P2) => "udaras" ; --# notpresent
    VPB (MQPerf Sg P3) => "udara" ; --# notpresent
    VPB (MQPerf Pl P1) => "udáramos" ; --# notpresent
    VPB (MQPerf Pl P2) => "udáreis" ; --# notpresent
    VPB (MQPerf Pl P3) => "udaram" ; --# notpresent
    VPB (PretP Sg P1) => "udei" ; --# notpresent
    VPB (PretP Sg P2) => "udaste" ; --# notpresent
    VPB (PretP Sg P3) => "udou" ; --# notpresent
    VPB (PretP Pl P1) => vars "udamos" "udámos" ; --# notpresent
    VPB (PretP Pl P2) => "udastes" ; --# notpresent
    VPB (PretP Pl P3) => "udaram" ; --# notpresent
    VPB (Fut Ind Sg P1) => "udarei" ; --# notpresent
    VPB (Fut Ind Sg P2) => "udarás" ; --# notpresent
    VPB (Fut Ind Sg P3) => "udará" ; --# notpresent
    VPB (Fut Ind Pl P1) => "udaremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => "udareis" ; --# notpresent
    VPB (Fut Ind Pl P3) => "udarão" ; --# notpresent
    VPB (Fut Sub Sg P1) => "udar" ; --# notpresent
    VPB (Fut Sub Sg P2) => "udares" ; --# notpresent
    VPB (Fut Sub Sg P3) => "udar" ; --# notpresent
    VPB (Fut Sub Pl P1) => "udarmos" ; --# notpresent
    VPB (Fut Sub Pl P2) => "udardes" ; --# notpresent
    VPB (Fut Sub Pl P3) => "udarem" ; --# notpresent
    VPB (Cond Sg P1) => "udaria" ; --# notpresent
    VPB (Cond Sg P2) => "udarias" ; --# notpresent
    VPB (Cond Sg P3) => "udaria" ; --# notpresent
    VPB (Cond Pl P1) => "udaríamos" ; --# notpresent
    VPB (Cond Pl P2) => "udaríeis" ; --# notpresent
    VPB (Cond Pl P3) => "udariam" ; --# notpresent
    VPB (Imper Sg P2) => "úda" ;
    VPB (Imper Sg P3) => "úde" ;
    VPB (Imper Pl P1) => "udemos" ;
    VPB (Imper Pl P2) => "udai" ;
    VPB (Imper Pl P3) => "údem" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper perdoar_Besch : Str -> Verbum = \perdoar ->
-- 20 | r38
  let perd_ = Predef.tk 3 perdoar in
 {root = perd_ ;
  suff = table {
    VI Infn => "oar" ;
    VI Ger => "oando" ;
    VI Part => "oado" ;
    VPB (Pres Ind Sg P1) => vars "ôo" "oo" ;
    VPB (Pres Ind Sg P2) => "oas" ;
    VPB (Pres Ind Sg P3) => "oa" ;
    VPB (Pres Ind Pl P1) => "oamos" ;
    VPB (Pres Ind Pl P2) => "oais" ;
    VPB (Pres Ind Pl P3) => "oam" ;
    VPB (Pres Sub Sg P1) => "oe" ;
    VPB (Pres Sub Sg P2) => "oes" ;
    VPB (Pres Sub Sg P3) => "oe" ;
    VPB (Pres Sub Pl P1) => "oemos" ;
    VPB (Pres Sub Pl P2) => "oeis" ;
    VPB (Pres Sub Pl P3) => "oem" ;
    VPB (PretI Ind Sg P1) => "oava" ; --# notpresent
    VPB (PretI Ind Sg P2) => "oavas" ; --# notpresent
    VPB (PretI Ind Sg P3) => "oava" ; --# notpresent
    VPB (PretI Ind Pl P1) => "oávamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => "oáveis" ; --# notpresent
    VPB (PretI Ind Pl P3) => "oavam" ; --# notpresent
    VPB (PretI Sub Sg P1) => "oasse" ; --# notpresent
    VPB (PretI Sub Sg P2) => "oasses" ; --# notpresent
    VPB (PretI Sub Sg P3) => "oasse" ; --# notpresent
    VPB (PretI Sub Pl P1) => "oássemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => "oásseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => "oassem" ; --# notpresent
    VPB (MQPerf Sg P1) => "oara" ; --# notpresent
    VPB (MQPerf Sg P2) => "oaras" ; --# notpresent
    VPB (MQPerf Sg P3) => "oara" ; --# notpresent
    VPB (MQPerf Pl P1) => "oáramos" ; --# notpresent
    VPB (MQPerf Pl P2) => "oáreis" ; --# notpresent
    VPB (MQPerf Pl P3) => "oaram" ; --# notpresent
    VPB (PretP Sg P1) => "oei" ; --# notpresent
    VPB (PretP Sg P2) => "oaste" ; --# notpresent
    VPB (PretP Sg P3) => "oou" ; --# notpresent
    VPB (PretP Pl P1) => "oamos" ; --# notpresent
    VPB (PretP Pl P2) => "oastes" ; --# notpresent
    VPB (PretP Pl P3) => "oaram" ; --# notpresent
    VPB (Fut Ind Sg P1) => "oarei" ; --# notpresent
    VPB (Fut Ind Sg P2) => "oarás" ; --# notpresent
    VPB (Fut Ind Sg P3) => "oará" ; --# notpresent
    VPB (Fut Ind Pl P1) => "oaremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => "oareis" ; --# notpresent
    VPB (Fut Ind Pl P3) => "oarão" ; --# notpresent
    VPB (Fut Sub Sg P1) => "oar" ; --# notpresent
    VPB (Fut Sub Sg P2) => "oares" ; --# notpresent
    VPB (Fut Sub Sg P3) => "oar" ; --# notpresent
    VPB (Fut Sub Pl P1) => "oarmos" ; --# notpresent
    VPB (Fut Sub Pl P2) => "oardes" ; --# notpresent
    VPB (Fut Sub Pl P3) => "oarem" ; --# notpresent
    VPB (Cond Sg P1) => "oaria" ; --# notpresent
    VPB (Cond Sg P2) => "oarias" ; --# notpresent
    VPB (Cond Sg P3) => "oaria" ; --# notpresent
    VPB (Cond Pl P1) => "oaríamos" ; --# notpresent
    VPB (Cond Pl P2) => "oaríeis" ; --# notpresent
    VPB (Cond Pl P3) => "oariam" ; --# notpresent
    VPB (Imper Sg P2) => "oa" ;
    VPB (Imper Sg P3) => "oe" ;
    VPB (Imper Pl P1) => "oemos" ;
    VPB (Imper Pl P2) => "oai" ;
    VPB (Imper Pl P3) => "oem" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper averiguar_Besch : Str -> Verbum = \averiguar ->
-- 21 | r30
  let averigu_ = Predef.tk 2 averiguar in
 {root = averigu_ ;
  suff = table {
    VI Infn => "ar" ;
    VI Ger => "ando" ;
    VI Part => "ado" ;
    VPB (Pres Ind Sg P1) => "o" ;
    VPB (Pres Ind Sg P2) => "as" ;
    VPB (Pres Ind Sg P3) => "a" ;
    VPB (Pres Ind Pl P1) => "amos" ;
    VPB (Pres Ind Pl P2) => "ais" ;
    VPB (Pres Ind Pl P3) => "am" ;
    VPB (Pres Sub Sg P1) => "e" ;
    VPB (Pres Sub Sg P2) => "es" ;
    VPB (Pres Sub Sg P3) => "e" ;
    VPB (Pres Sub Pl P1) => "emos" ;
    VPB (Pres Sub Pl P2) => "eis" ;
    VPB (Pres Sub Pl P3) => "em" ;
    VPB (PretI Ind Sg P1) => "ava" ; --# notpresent
    VPB (PretI Ind Sg P2) => "avas" ; --# notpresent
    VPB (PretI Ind Sg P3) => "ava" ; --# notpresent
    VPB (PretI Ind Pl P1) => "ávamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => "áveis" ; --# notpresent
    VPB (PretI Ind Pl P3) => "avam" ; --# notpresent
    VPB (PretI Sub Sg P1) => "asse" ; --# notpresent
    VPB (PretI Sub Sg P2) => "asses" ; --# notpresent
    VPB (PretI Sub Sg P3) => "asse" ; --# notpresent
    VPB (PretI Sub Pl P1) => "ássemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => "ásseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => "assem" ; --# notpresent
    VPB (MQPerf Sg P1) => "ara" ; --# notpresent
    VPB (MQPerf Sg P2) => "aras" ; --# notpresent
    VPB (MQPerf Sg P3) => "ara" ; --# notpresent
    VPB (MQPerf Pl P1) => "áramos" ; --# notpresent
    VPB (MQPerf Pl P2) => "áreis" ; --# notpresent
    VPB (MQPerf Pl P3) => "aram" ; --# notpresent
    VPB (PretP Sg P1) => "ei" ; --# notpresent
    VPB (PretP Sg P2) => "aste" ; --# notpresent
    VPB (PretP Sg P3) => "ou" ; --# notpresent
    VPB (PretP Pl P1) => "amos" ; --# notpresent
    VPB (PretP Pl P2) => "astes" ; --# notpresent
    VPB (PretP Pl P3) => "aram" ; --# notpresent
    VPB (Fut Ind Sg P1) => "arei" ; --# notpresent
    VPB (Fut Ind Sg P2) => "arás" ; --# notpresent
    VPB (Fut Ind Sg P3) => "ará" ; --# notpresent
    VPB (Fut Ind Pl P1) => "aremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => "areis" ; --# notpresent
    VPB (Fut Ind Pl P3) => "arão" ; --# notpresent
    VPB (Fut Sub Sg P1) => "ar" ; --# notpresent
    VPB (Fut Sub Sg P2) => "ares" ; --# notpresent
    VPB (Fut Sub Sg P3) => "ar" ; --# notpresent
    VPB (Fut Sub Pl P1) => "armos" ; --# notpresent
    VPB (Fut Sub Pl P2) => "ardes" ; --# notpresent
    VPB (Fut Sub Pl P3) => "arem" ; --# notpresent
    VPB (Cond Sg P1) => "aria" ; --# notpresent
    VPB (Cond Sg P2) => "arias" ; --# notpresent
    VPB (Cond Sg P3) => "aria" ; --# notpresent
    VPB (Cond Pl P1) => "aríamos" ; --# notpresent
    VPB (Cond Pl P2) => "aríeis" ; --# notpresent
    VPB (Cond Pl P3) => "ariam" ; --# notpresent
    VPB (Imper Sg P2) => "a" ;
    VPB (Imper Sg P3) => "e" ;
    VPB (Imper Pl P1) => "emos" ;
    VPB (Imper Pl P2) => "ai" ;
    VPB (Imper Pl P3) => "em" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper neviscar_Besch : Str -> Verbum = \neviscar ->
-- 22 | r23
  let n_ = Predef.tk 7 neviscar in
 {root = n_ ;
  suff = table {
    VI Infn => "eviscar" ;
    VI Ger => "eviscando" ;
    VI Part => "eviscado" ;
    VPB (Pres Ind Sg P1) => nonExist ;
    VPB (Pres Ind Sg P2) => nonExist ;
    VPB (Pres Ind Sg P3) => "evisca" ;
    VPB (Pres Ind Pl P1) => nonExist ;
    VPB (Pres Ind Pl P2) => nonExist ;
    VPB (Pres Ind Pl P3) => nonExist ;
    VPB (Pres Sub Sg P1) => nonExist ;
    VPB (Pres Sub Sg P2) => nonExist ;
    VPB (Pres Sub Sg P3) => "evisque" ;
    VPB (Pres Sub Pl P1) => nonExist ;
    VPB (Pres Sub Pl P2) => nonExist ;
    VPB (Pres Sub Pl P3) => nonExist ;
    VPB (PretI Ind Sg P1) => nonExist ; --# notpresent
    VPB (PretI Ind Sg P2) => nonExist ; --# notpresent
    VPB (PretI Ind Sg P3) => "eviscava" ; --# notpresent
    VPB (PretI Ind Pl P1) => nonExist ; --# notpresent
    VPB (PretI Ind Pl P2) => nonExist ; --# notpresent
    VPB (PretI Ind Pl P3) => nonExist ; --# notpresent
    VPB (PretI Sub Sg P1) => nonExist ; --# notpresent
    VPB (PretI Sub Sg P2) => nonExist ; --# notpresent
    VPB (PretI Sub Sg P3) => "eviscasse" ; --# notpresent
    VPB (PretI Sub Pl P1) => nonExist ; --# notpresent
    VPB (PretI Sub Pl P2) => nonExist ; --# notpresent
    VPB (PretI Sub Pl P3) => nonExist ; --# notpresent
    VPB (MQPerf Sg P1) => nonExist ; --# notpresent
    VPB (MQPerf Sg P2) => nonExist ; --# notpresent
    VPB (MQPerf Sg P3) => "eviscara" ; --# notpresent
    VPB (MQPerf Pl P1) => nonExist ; --# notpresent
    VPB (MQPerf Pl P2) => nonExist ; --# notpresent
    VPB (MQPerf Pl P3) => nonExist ; --# notpresent
    VPB (PretP Sg P1) => nonExist ; --# notpresent
    VPB (PretP Sg P2) => nonExist ; --# notpresent
    VPB (PretP Sg P3) => "eviscou" ; --# notpresent
    VPB (PretP Pl P1) => nonExist ; --# notpresent
    VPB (PretP Pl P2) => nonExist ; --# notpresent
    VPB (PretP Pl P3) => nonExist ; --# notpresent
    VPB (Fut Ind Sg P1) => nonExist ; --# notpresent
    VPB (Fut Ind Sg P2) => nonExist ; --# notpresent
    VPB (Fut Ind Sg P3) => "eviscará" ; --# notpresent
    VPB (Fut Ind Pl P1) => nonExist ; --# notpresent
    VPB (Fut Ind Pl P2) => nonExist ; --# notpresent
    VPB (Fut Ind Pl P3) => nonExist ; --# notpresent
    VPB (Fut Sub Sg P1) => nonExist ; --# notpresent
    VPB (Fut Sub Sg P2) => nonExist ; --# notpresent
    VPB (Fut Sub Sg P3) => "eviscar" ; --# notpresent
    VPB (Fut Sub Pl P1) => nonExist ; --# notpresent
    VPB (Fut Sub Pl P2) => nonExist ; --# notpresent
    VPB (Fut Sub Pl P3) => nonExist ; --# notpresent
    VPB (Cond Sg P1) => nonExist ; --# notpresent
    VPB (Cond Sg P2) => nonExist ; --# notpresent
    VPB (Cond Sg P3) => "eviscaria" ; --# notpresent
    VPB (Cond Pl P1) => nonExist ; --# notpresent
    VPB (Cond Pl P2) => nonExist ; --# notpresent
    VPB (Cond Pl P3) => nonExist ; --# notpresent
    VPB (Imper Sg P2) => nonExist ;
    VPB (Imper Sg P3) => nonExist ;
    VPB (Imper Pl P1) => nonExist ;
    VPB (Imper Pl P2) => nonExist ;
    VPB (Imper Pl P3) => nonExist ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper adequar_Besch : Str -> Verbum = \adequar ->
-- 23 | r82
  let adequ_ = Predef.tk 2 adequar in
 {root = adequ_ ;
  suff = table {
    VI Infn => "ar" ;
    VI Ger => "ando" ;
    VI Part => "ado" ;
    VPB (Pres Ind Sg P1) => nonExist ;
    VPB (Pres Ind Sg P2) => nonExist ;
    VPB (Pres Ind Sg P3) => nonExist ;
    VPB (Pres Ind Pl P1) => "amos" ;
    VPB (Pres Ind Pl P2) => "ais" ;
    VPB (Pres Ind Pl P3) => nonExist ;
    VPB (Pres Sub Sg P1) => nonExist ;
    VPB (Pres Sub Sg P2) => nonExist ;
    VPB (Pres Sub Sg P3) => nonExist ;
    VPB (Pres Sub Pl P1) => "emos" ;
    VPB (Pres Sub Pl P2) => "eis" ;
    VPB (Pres Sub Pl P3) => nonExist ;
    VPB (PretI Ind Sg P1) => "ava" ; --# notpresent
    VPB (PretI Ind Sg P2) => "avas" ; --# notpresent
    VPB (PretI Ind Sg P3) => "ava" ; --# notpresent
    VPB (PretI Ind Pl P1) => "ávamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => "áveis" ; --# notpresent
    VPB (PretI Ind Pl P3) => "avam" ; --# notpresent
    VPB (PretI Sub Sg P1) => "asse" ; --# notpresent
    VPB (PretI Sub Sg P2) => "asses" ; --# notpresent
    VPB (PretI Sub Sg P3) => "asse" ; --# notpresent
    VPB (PretI Sub Pl P1) => "ássemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => "ásseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => "assem" ; --# notpresent
    VPB (MQPerf Sg P1) => "ara" ; --# notpresent
    VPB (MQPerf Sg P2) => "aras" ; --# notpresent
    VPB (MQPerf Sg P3) => "ara" ; --# notpresent
    VPB (MQPerf Pl P1) => "áramos" ; --# notpresent
    VPB (MQPerf Pl P2) => "áreis" ; --# notpresent
    VPB (MQPerf Pl P3) => "aram" ; --# notpresent
    VPB (PretP Sg P1) => "ei" ; --# notpresent
    VPB (PretP Sg P2) => "aste" ; --# notpresent
    VPB (PretP Sg P3) => "ou" ; --# notpresent
    VPB (PretP Pl P1) => vars "amos" "ámos" ; --# notpresent
    VPB (PretP Pl P2) => "astes" ; --# notpresent
    VPB (PretP Pl P3) => "aram" ; --# notpresent
    VPB (Fut Ind Sg P1) => "arei" ; --# notpresent
    VPB (Fut Ind Sg P2) => "arás" ; --# notpresent
    VPB (Fut Ind Sg P3) => "ará" ; --# notpresent
    VPB (Fut Ind Pl P1) => "aremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => "areis" ; --# notpresent
    VPB (Fut Ind Pl P3) => "arão" ; --# notpresent
    VPB (Fut Sub Sg P1) => "ar" ; --# notpresent
    VPB (Fut Sub Sg P2) => "ares" ; --# notpresent
    VPB (Fut Sub Sg P3) => "ar" ; --# notpresent
    VPB (Fut Sub Pl P1) => "armos" ; --# notpresent
    VPB (Fut Sub Pl P2) => "ardes" ; --# notpresent
    VPB (Fut Sub Pl P3) => "arem" ; --# notpresent
    VPB (Cond Sg P1) => "aria" ; --# notpresent
    VPB (Cond Sg P2) => "arias" ; --# notpresent
    VPB (Cond Sg P3) => "aria" ; --# notpresent
    VPB (Cond Pl P1) => "aríamos" ; --# notpresent
    VPB (Cond Pl P2) => "aríeis" ; --# notpresent
    VPB (Cond Pl P3) => "ariam" ; --# notpresent
    VPB (Imper Sg P2) => nonExist ;
    VPB (Imper Sg P3) => nonExist ;
    VPB (Imper Pl P1) => "emos" ;
    VPB (Imper Pl P2) => "ai" ;
    VPB (Imper Pl P3) => nonExist ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper relampaguear_Besch : Str -> Verbum = \relampaguear ->
-- 24
  let relamp_ = Predef.tk 6 relampaguear in
 {root = relamp_ ;
  suff = table {
    VI Infn => "aguear" ;
    VI Ger => "agueando" ;
    VI Part => "agueado" ;
    VPB (Pres Ind Sg P1) => nonExist ;
    VPB (Pres Ind Sg P2) => nonExist ;
    VPB (Pres Ind Sg P3) => "agueia" ;
    VPB (Pres Ind Pl P1) => nonExist ;
    VPB (Pres Ind Pl P2) => nonExist ;
    VPB (Pres Ind Pl P3) => "agueiam" ;
    VPB (Pres Sub Sg P1) => nonExist ;
    VPB (Pres Sub Sg P2) => nonExist ;
    VPB (Pres Sub Sg P3) => "agueie" ;
    VPB (Pres Sub Pl P1) => nonExist ;
    VPB (Pres Sub Pl P2) => nonExist ;
    VPB (Pres Sub Pl P3) => "agueiem" ;
    VPB (PretI Ind Sg P1) => nonExist ; --# notpresent
    VPB (PretI Ind Sg P2) => nonExist ; --# notpresent
    VPB (PretI Ind Sg P3) => "agueava" ; --# notpresent
    VPB (PretI Ind Pl P1) => nonExist ; --# notpresent
    VPB (PretI Ind Pl P2) => nonExist ; --# notpresent
    VPB (PretI Ind Pl P3) => "agueavam" ; --# notpresent
    VPB (PretI Sub Sg P1) => nonExist ; --# notpresent
    VPB (PretI Sub Sg P2) => nonExist ; --# notpresent
    VPB (PretI Sub Sg P3) => "agueasse" ; --# notpresent
    VPB (PretI Sub Pl P1) => nonExist ; --# notpresent
    VPB (PretI Sub Pl P2) => nonExist ; --# notpresent
    VPB (PretI Sub Pl P3) => "agueassem" ; --# notpresent
    VPB (MQPerf Sg P1) => nonExist ; --# notpresent
    VPB (MQPerf Sg P2) => nonExist ; --# notpresent
    VPB (MQPerf Sg P3) => "agueara" ; --# notpresent
    VPB (MQPerf Pl P1) => nonExist ; --# notpresent
    VPB (MQPerf Pl P2) => nonExist ; --# notpresent
    VPB (MQPerf Pl P3) => "aguearam" ; --# notpresent
    VPB (PretP Sg P1) => nonExist ; --# notpresent
    VPB (PretP Sg P2) => nonExist ; --# notpresent
    VPB (PretP Sg P3) => "agueou" ; --# notpresent
    VPB (PretP Pl P1) => nonExist ; --# notpresent
    VPB (PretP Pl P2) => nonExist ; --# notpresent
    VPB (PretP Pl P3) => "aguearam" ; --# notpresent
    VPB (Fut Ind Sg P1) => nonExist ; --# notpresent
    VPB (Fut Ind Sg P2) => nonExist ; --# notpresent
    VPB (Fut Ind Sg P3) => "agueará" ; --# notpresent
    VPB (Fut Ind Pl P1) => nonExist ; --# notpresent
    VPB (Fut Ind Pl P2) => nonExist ; --# notpresent
    VPB (Fut Ind Pl P3) => "aguearão" ; --# notpresent
    VPB (Fut Sub Sg P1) => nonExist ; --# notpresent
    VPB (Fut Sub Sg P2) => nonExist ; --# notpresent
    VPB (Fut Sub Sg P3) => "aguear" ; --# notpresent
    VPB (Fut Sub Pl P1) => nonExist ; --# notpresent
    VPB (Fut Sub Pl P2) => nonExist ; --# notpresent
    VPB (Fut Sub Pl P3) => "aguearem" ; --# notpresent
    VPB (Cond Sg P1) => nonExist ; --# notpresent
    VPB (Cond Sg P2) => nonExist ; --# notpresent
    VPB (Cond Sg P3) => "eguearia" ; --# notpresent
    VPB (Cond Pl P1) => nonExist ; --# notpresent
    VPB (Cond Pl P2) => nonExist ; --# notpresent
    VPB (Cond Pl P3) => "agueariam" ; --# notpresent
    VPB (Imper Sg P2) => nonExist ;
    VPB (Imper Sg P3) => nonExist ;
    VPB (Imper Pl P1) => nonExist ;
    VPB (Imper Pl P2) => nonExist ;
    VPB (Imper Pl P3) => nonExist ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper aquecer_Besch : Str -> Verbum = \aquecer ->
-- 25 | r25
  let aque_ = Predef.tk 3 aquecer in
 {root = aque_ ;
  suff = table {
    VI Infn => "cer" ;
    VI Ger => "cendo" ;
    VI Part => "cido" ;
    VPB (Pres Ind Sg P1) => "ço" ;
    VPB (Pres Ind Sg P2) => "ces" ;
    VPB (Pres Ind Sg P3) => "ce" ;
    VPB (Pres Ind Pl P1) => "cemos" ;
    VPB (Pres Ind Pl P2) => "ceis" ;
    VPB (Pres Ind Pl P3) => "cem" ;
    VPB (Pres Sub Sg P1) => "ça" ;
    VPB (Pres Sub Sg P2) => "ças" ;
    VPB (Pres Sub Sg P3) => "ça" ;
    VPB (Pres Sub Pl P1) => "çamos" ;
    VPB (Pres Sub Pl P2) => "çais" ;
    VPB (Pres Sub Pl P3) => "çam" ;
    VPB (PretI Ind Sg P1) => "cia" ; --# notpresent
    VPB (PretI Ind Sg P2) => "cias" ; --# notpresent
    VPB (PretI Ind Sg P3) => "cia" ; --# notpresent
    VPB (PretI Ind Pl P1) => "ciamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => "cíeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => "ciam" ; --# notpresent
    VPB (PretI Sub Sg P1) => "cesse" ; --# notpresent
    VPB (PretI Sub Sg P2) => "cesses" ; --# notpresent
    VPB (PretI Sub Sg P3) => "cesse" ; --# notpresent
    VPB (PretI Sub Pl P1) => "cêssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => "cêsseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => "cessem" ; --# notpresent
    VPB (MQPerf Sg P1) => "cera" ; --# notpresent
    VPB (MQPerf Sg P2) => "ceras" ; --# notpresent
    VPB (MQPerf Sg P3) => "cera" ; --# notpresent
    VPB (MQPerf Pl P1) => "cêramos" ; --# notpresent
    VPB (MQPerf Pl P2) => "cêreis" ; --# notpresent
    VPB (MQPerf Pl P3) => "ceram" ; --# notpresent
    VPB (PretP Sg P1) => "ci" ; --# notpresent
    VPB (PretP Sg P2) => "ceste" ; --# notpresent
    VPB (PretP Sg P3) => "ceu" ; --# notpresent
    VPB (PretP Pl P1) => "cemos" ; --# notpresent
    VPB (PretP Pl P2) => "cestes" ; --# notpresent
    VPB (PretP Pl P3) => "ceram" ; --# notpresent
    VPB (Fut Ind Sg P1) => "cerei" ; --# notpresent
    VPB (Fut Ind Sg P2) => "cerás" ; --# notpresent
    VPB (Fut Ind Sg P3) => "cerá" ; --# notpresent
    VPB (Fut Ind Pl P1) => "ceremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => "cereis" ; --# notpresent
    VPB (Fut Ind Pl P3) => "cerão" ; --# notpresent
    VPB (Fut Sub Sg P1) => "cer" ; --# notpresent
    VPB (Fut Sub Sg P2) => "ceres" ; --# notpresent
    VPB (Fut Sub Sg P3) => "cer" ; --# notpresent
    VPB (Fut Sub Pl P1) => "cermos" ; --# notpresent
    VPB (Fut Sub Pl P2) => "cerdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => "cerem" ; --# notpresent
    VPB (Cond Sg P1) => "ceria" ; --# notpresent
    VPB (Cond Sg P2) => "cerias" ; --# notpresent
    VPB (Cond Sg P3) => "ceria" ; --# notpresent
    VPB (Cond Pl P1) => "ceríamos" ; --# notpresent
    VPB (Cond Pl P2) => "ceríeis" ; --# notpresent
    VPB (Cond Pl P3) => "ceriam" ; --# notpresent
    VPB (Imper Sg P2) => "ce" ;
    VPB (Imper Sg P3) => "ça" ;
    VPB (Imper Pl P1) => "çamos" ;
    VPB (Imper Pl P2) => "cei" ;
    VPB (Imper Pl P3) => "çam" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper proteger_Besch : Str -> Verbum = \proteger ->
-- 26 | r27
  let prote_ = Predef.tk 3 proteger in
 {root = prote_ ;
  suff = table {
    VI Infn => "ger" ;
    VI Ger => "gendo" ;
    VI Part => "gido" ;
    VPB (Pres Ind Sg P1) => "jo" ;
    VPB (Pres Ind Sg P2) => "ges" ;
    VPB (Pres Ind Sg P3) => "ge" ;
    VPB (Pres Ind Pl P1) => "gemos" ;
    VPB (Pres Ind Pl P2) => "geis" ;
    VPB (Pres Ind Pl P3) => "gem" ;
    VPB (Pres Sub Sg P1) => "ja" ;
    VPB (Pres Sub Sg P2) => "jas" ;
    VPB (Pres Sub Sg P3) => "ja" ;
    VPB (Pres Sub Pl P1) => "jamos" ;
    VPB (Pres Sub Pl P2) => "jais" ;
    VPB (Pres Sub Pl P3) => "jam" ;
    VPB (PretI Ind Sg P1) => "gia" ; --# notpresent
    VPB (PretI Ind Sg P2) => "gias" ; --# notpresent
    VPB (PretI Ind Sg P3) => "gia" ; --# notpresent
    VPB (PretI Ind Pl P1) => "gíamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => "gíeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => "giam" ; --# notpresent
    VPB (PretI Sub Sg P1) => "gesse" ; --# notpresent
    VPB (PretI Sub Sg P2) => "gesses" ; --# notpresent
    VPB (PretI Sub Sg P3) => "gesse" ; --# notpresent
    VPB (PretI Sub Pl P1) => "gêssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => "gêsseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => "gessem" ; --# notpresent
    VPB (MQPerf Sg P1) => "gera" ; --# notpresent
    VPB (MQPerf Sg P2) => "geras" ; --# notpresent
    VPB (MQPerf Sg P3) => "gera" ; --# notpresent
    VPB (MQPerf Pl P1) => "gêramos" ; --# notpresent
    VPB (MQPerf Pl P2) => "gêreis" ; --# notpresent
    VPB (MQPerf Pl P3) => "geram" ; --# notpresent
    VPB (PretP Sg P1) => "gi" ; --# notpresent
    VPB (PretP Sg P2) => "geste" ; --# notpresent
    VPB (PretP Sg P3) => "geu" ; --# notpresent
    VPB (PretP Pl P1) => "gemos" ; --# notpresent
    VPB (PretP Pl P2) => "gestes" ; --# notpresent
    VPB (PretP Pl P3) => "geram" ; --# notpresent
    VPB (Fut Ind Sg P1) => "gerei" ; --# notpresent
    VPB (Fut Ind Sg P2) => "gerás" ; --# notpresent
    VPB (Fut Ind Sg P3) => "gerá" ; --# notpresent
    VPB (Fut Ind Pl P1) => "geremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => "gereis" ; --# notpresent
    VPB (Fut Ind Pl P3) => "gerão" ; --# notpresent
    VPB (Fut Sub Sg P1) => "ger" ; --# notpresent
    VPB (Fut Sub Sg P2) => "geres" ; --# notpresent
    VPB (Fut Sub Sg P3) => "ger" ; --# notpresent
    VPB (Fut Sub Pl P1) => "germos" ; --# notpresent
    VPB (Fut Sub Pl P2) => "gerdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => "gerem" ; --# notpresent
    VPB (Cond Sg P1) => "geria" ; --# notpresent
    VPB (Cond Sg P2) => "gerias" ; --# notpresent
    VPB (Cond Sg P3) => "geria" ; --# notpresent
    VPB (Cond Pl P1) => "geríamos" ; --# notpresent
    VPB (Cond Pl P2) => "geríeis" ; --# notpresent
    VPB (Cond Pl P3) => "geriam" ; --# notpresent
    VPB (Imper Sg P2) => "ge" ;
    VPB (Imper Sg P3) => "ja" ;
    VPB (Imper Pl P1) => "jamos" ;
    VPB (Imper Pl P2) => "gei" ;
    VPB (Imper Pl P3) => "jam" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper erguer_Besch : Str -> Verbum = \erguer ->
-- 27 | r32
  let erg_ = Predef.tk 3 erguer in
 {root = erg_ ;
  suff = table {
    VI Infn => "uer" ;
    VI Ger => "uendo" ;
    VI Part => "uido" ;
    VPB (Pres Ind Sg P1) => "o" ;
    VPB (Pres Ind Sg P2) => "ues" ;
    VPB (Pres Ind Sg P3) => "ue" ;
    VPB (Pres Ind Pl P1) => "uemos" ;
    VPB (Pres Ind Pl P2) => "ueis" ;
    VPB (Pres Ind Pl P3) => "uem" ;
    VPB (Pres Sub Sg P1) => "a" ;
    VPB (Pres Sub Sg P2) => "as" ;
    VPB (Pres Sub Sg P3) => "a" ;
    VPB (Pres Sub Pl P1) => "amos" ;
    VPB (Pres Sub Pl P2) => "ais" ;
    VPB (Pres Sub Pl P3) => "am" ;
    VPB (PretI Ind Sg P1) => "uia" ; --# notpresent
    VPB (PretI Ind Sg P2) => "uias" ; --# notpresent
    VPB (PretI Ind Sg P3) => "uia" ; --# notpresent
    VPB (PretI Ind Pl P1) => "uíamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => "uíeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => "uiam" ; --# notpresent
    VPB (PretI Sub Sg P1) => "uesse" ; --# notpresent
    VPB (PretI Sub Sg P2) => "uesses" ; --# notpresent
    VPB (PretI Sub Sg P3) => "uesse" ; --# notpresent
    VPB (PretI Sub Pl P1) => "uêssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => "uêsseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => "uessem" ; --# notpresent
    VPB (MQPerf Sg P1) => "uera" ; --# notpresent
    VPB (MQPerf Sg P2) => "ueras" ; --# notpresent
    VPB (MQPerf Sg P3) => "uera" ; --# notpresent
    VPB (MQPerf Pl P1) => "uêramos" ; --# notpresent
    VPB (MQPerf Pl P2) => "uêreis" ; --# notpresent
    VPB (MQPerf Pl P3) => "ueram" ; --# notpresent
    VPB (PretP Sg P1) => "ui" ; --# notpresent
    VPB (PretP Sg P2) => "ueste" ; --# notpresent
    VPB (PretP Sg P3) => "ueu" ; --# notpresent
    VPB (PretP Pl P1) => "uemos" ; --# notpresent
    VPB (PretP Pl P2) => "uestes" ; --# notpresent
    VPB (PretP Pl P3) => "ueram" ; --# notpresent
    VPB (Fut Ind Sg P1) => "uerei" ; --# notpresent
    VPB (Fut Ind Sg P2) => "uerás" ; --# notpresent
    VPB (Fut Ind Sg P3) => "uerá" ; --# notpresent
    VPB (Fut Ind Pl P1) => "ueremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => "uereis" ; --# notpresent
    VPB (Fut Ind Pl P3) => "uerão" ; --# notpresent
    VPB (Fut Sub Sg P1) => "uer" ; --# notpresent
    VPB (Fut Sub Sg P2) => "ueres" ; --# notpresent
    VPB (Fut Sub Sg P3) => "uer" ; --# notpresent
    VPB (Fut Sub Pl P1) => "uermos" ; --# notpresent
    VPB (Fut Sub Pl P2) => "uerdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => "uerem" ; --# notpresent
    VPB (Cond Sg P1) => "ueria" ; --# notpresent
    VPB (Cond Sg P2) => "uerias" ; --# notpresent
    VPB (Cond Sg P3) => "ueria" ; --# notpresent
    VPB (Cond Pl P1) => "ueríamos" ; --# notpresent
    VPB (Cond Pl P2) => "ueríeis" ; --# notpresent
    VPB (Cond Pl P3) => "ueriam" ; --# notpresent
    VPB (Imper Sg P2) => "ue" ;
    VPB (Imper Sg P3) => "a" ;
    VPB (Imper Pl P1) => "amos" ;
    VPB (Imper Pl P2) => "uei" ;
    VPB (Imper Pl P3) => "am" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper moer_Besch : Str -> Verbum = \moer ->
-- 28 | r39
  let m_ = Predef.tk 3 moer in
 {root = m_ ;
  suff = table {
    VI Infn => "oer" ;
    VI Ger => "oendo" ;
    VI Part => "oído" ;
    VPB (Pres Ind Sg P1) => "oo" ;
    VPB (Pres Ind Sg P2) => "óis" ;
    VPB (Pres Ind Sg P3) => "ói" ;
    VPB (Pres Ind Pl P1) => "oemos" ;
    VPB (Pres Ind Pl P2) => "oeis" ;
    VPB (Pres Ind Pl P3) => "oem" ;
    VPB (Pres Sub Sg P1) => "oa" ;
    VPB (Pres Sub Sg P2) => "oas" ;
    VPB (Pres Sub Sg P3) => "oa" ;
    VPB (Pres Sub Pl P1) => "oamos" ;
    VPB (Pres Sub Pl P2) => "oais" ;
    VPB (Pres Sub Pl P3) => "oam" ;
    VPB (PretI Ind Sg P1) => "oía" ; --# notpresent
    VPB (PretI Ind Sg P2) => "oías" ; --# notpresent
    VPB (PretI Ind Sg P3) => "oía" ; --# notpresent
    VPB (PretI Ind Pl P1) => "oíamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => "oíeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => "oíam" ; --# notpresent
    VPB (PretI Sub Sg P1) => "oesse" ; --# notpresent
    VPB (PretI Sub Sg P2) => "oesses" ; --# notpresent
    VPB (PretI Sub Sg P3) => "oesse" ; --# notpresent
    VPB (PretI Sub Pl P1) => "oêssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => "oêsseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => "oessem" ; --# notpresent
    VPB (MQPerf Sg P1) => "oera" ; --# notpresent
    VPB (MQPerf Sg P2) => "oeras" ; --# notpresent
    VPB (MQPerf Sg P3) => "oera" ; --# notpresent
    VPB (MQPerf Pl P1) => "oêramos" ; --# notpresent
    VPB (MQPerf Pl P2) => "oêreis" ; --# notpresent
    VPB (MQPerf Pl P3) => "oeram" ; --# notpresent
    VPB (PretP Sg P1) => "oí" ; --# notpresent
    VPB (PretP Sg P2) => "oeste" ; --# notpresent
    VPB (PretP Sg P3) => "oeu" ; --# notpresent
    VPB (PretP Pl P1) => "oemos" ; --# notpresent
    VPB (PretP Pl P2) => "oestes" ; --# notpresent
    VPB (PretP Pl P3) => "oeram" ; --# notpresent
    VPB (Fut Ind Sg P1) => "oerei" ; --# notpresent
    VPB (Fut Ind Sg P2) => "oerás" ; --# notpresent
    VPB (Fut Ind Sg P3) => "oerá" ; --# notpresent
    VPB (Fut Ind Pl P1) => "oeremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => "oereis" ; --# notpresent
    VPB (Fut Ind Pl P3) => "oerão" ; --# notpresent
    VPB (Fut Sub Sg P1) => "oer" ; --# notpresent
    VPB (Fut Sub Sg P2) => "oeres" ; --# notpresent
    VPB (Fut Sub Sg P3) => "oer" ; --# notpresent
    VPB (Fut Sub Pl P1) => "oermos" ; --# notpresent
    VPB (Fut Sub Pl P2) => "oerdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => "oerem" ; --# notpresent
    VPB (Cond Sg P1) => "oeria" ; --# notpresent
    VPB (Cond Sg P2) => "oerias" ; --# notpresent
    VPB (Cond Sg P3) => "oeria" ; --# notpresent
    VPB (Cond Pl P1) => "oeríamos" ; --# notpresent
    VPB (Cond Pl P2) => "oeríeis" ; --# notpresent
    VPB (Cond Pl P3) => "oeriam" ; --# notpresent
    VPB (Imper Sg P2) => "ói" ;
    VPB (Imper Sg P3) => "oa" ;
    VPB (Imper Pl P1) => "oamos" ;
    VPB (Imper Pl P2) => "oei" ;
    VPB (Imper Pl P3) => "oam" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper dizer_Besch : Str -> Verbum = \dizer ->
-- 29 | r60
  let di_ = Predef.tk 3 dizer in
 {root = di_ ;
  suff = table {
    VI Infn => "zer" ;
    VI Ger => "zendo" ;
    VI Part => "to" ;
    VPB (Pres Ind Sg P1) => "go" ;
    VPB (Pres Ind Sg P2) => "zes" ;
    VPB (Pres Ind Sg P3) => "z" ;
    VPB (Pres Ind Pl P1) => "zemos" ;
    VPB (Pres Ind Pl P2) => "zeis" ;
    VPB (Pres Ind Pl P3) => "zem" ;
    VPB (Pres Sub Sg P1) => "ga" ;
    VPB (Pres Sub Sg P2) => "gas" ;
    VPB (Pres Sub Sg P3) => "ga" ;
    VPB (Pres Sub Pl P1) => "gamos" ;
    VPB (Pres Sub Pl P2) => "gais" ;
    VPB (Pres Sub Pl P3) => "gam" ;
    VPB (PretI Ind Sg P1) => "zia" ; --# notpresent
    VPB (PretI Ind Sg P2) => "zias" ; --# notpresent
    VPB (PretI Ind Sg P3) => "zia" ; --# notpresent
    VPB (PretI Ind Pl P1) => "zíamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => "zíeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => "ziam" ; --# notpresent
    VPB (PretI Sub Sg P1) => "ssesse" ; --# notpresent
    VPB (PretI Sub Sg P2) => "ssesses" ; --# notpresent
    VPB (PretI Sub Sg P3) => "ssesse" ; --# notpresent
    VPB (PretI Sub Pl P1) => "sséssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => "ssésseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => "ssessem" ; --# notpresent
    VPB (MQPerf Sg P1) => "ssera" ; --# notpresent
    VPB (MQPerf Sg P2) => "sseras" ; --# notpresent
    VPB (MQPerf Sg P3) => "ssera" ; --# notpresent
    VPB (MQPerf Pl P1) => "sséramos" ; --# notpresent
    VPB (MQPerf Pl P2) => "sséreis" ; --# notpresent
    VPB (MQPerf Pl P3) => "sseram" ; --# notpresent
    VPB (PretP Sg P1) => "sse" ; --# notpresent
    VPB (PretP Sg P2) => "sseste" ; --# notpresent
    VPB (PretP Sg P3) => "sse" ; --# notpresent
    VPB (PretP Pl P1) => "ssemos" ; --# notpresent
    VPB (PretP Pl P2) => "ssestes" ; --# notpresent
    VPB (PretP Pl P3) => "sseram" ; --# notpresent
    VPB (Fut Ind Sg P1) => "rei" ; --# notpresent
    VPB (Fut Ind Sg P2) => "rás" ; --# notpresent
    VPB (Fut Ind Sg P3) => "rá" ; --# notpresent
    VPB (Fut Ind Pl P1) => "remos" ; --# notpresent
    VPB (Fut Ind Pl P2) => "reis" ; --# notpresent
    VPB (Fut Ind Pl P3) => "rão" ; --# notpresent
    VPB (Fut Sub Sg P1) => "sser" ; --# notpresent
    VPB (Fut Sub Sg P2) => "sseres" ; --# notpresent
    VPB (Fut Sub Sg P3) => "sser" ; --# notpresent
    VPB (Fut Sub Pl P1) => "ssermos" ; --# notpresent
    VPB (Fut Sub Pl P2) => "sserdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => "sserem" ; --# notpresent
    VPB (Cond Sg P1) => "ria" ; --# notpresent
    VPB (Cond Sg P2) => "rias" ; --# notpresent
    VPB (Cond Sg P3) => "ria" ; --# notpresent
    VPB (Cond Pl P1) => "ríamos" ; --# notpresent
    VPB (Cond Pl P2) => "ríeis" ; --# notpresent
    VPB (Cond Pl P3) => "riam" ; --# notpresent
    VPB (Imper Sg P2) => vars "z" "ze" ;
    VPB (Imper Sg P3) => "ga" ;
    VPB (Imper Pl P1) => "gamos" ;
    VPB (Imper Pl P2) => "zei" ;
    VPB (Imper Pl P3) => "gam" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper trazer_Besch : Str -> Verbum = \trazer ->
-- 30 | r73
  let tr_ = Predef.tk 4 trazer in
 {root = tr_ ;
  suff = table {
    VI Infn => "azer" ;
    VI Ger => "azendo" ;
    VI Part => "azido" ;
    VPB (Pres Ind Sg P1) => "ago" ;
    VPB (Pres Ind Sg P2) => "azes" ;
    VPB (Pres Ind Sg P3) => "az" ;
    VPB (Pres Ind Pl P1) => "azemos" ;
    VPB (Pres Ind Pl P2) => "azeis" ;
    VPB (Pres Ind Pl P3) => "azem" ;
    VPB (Pres Sub Sg P1) => "aga" ;
    VPB (Pres Sub Sg P2) => "agas" ;
    VPB (Pres Sub Sg P3) => "aga" ;
    VPB (Pres Sub Pl P1) => "agamos" ;
    VPB (Pres Sub Pl P2) => "agais" ;
    VPB (Pres Sub Pl P3) => "agam" ;
    VPB (PretI Ind Sg P1) => "azia" ; --# notpresent
    VPB (PretI Ind Sg P2) => "azias" ; --# notpresent
    VPB (PretI Ind Sg P3) => "azia" ; --# notpresent
    VPB (PretI Ind Pl P1) => "azíamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => "azíeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => "aziam" ; --# notpresent
    VPB (PretI Sub Sg P1) => "ouxesse" ; --# notpresent
    VPB (PretI Sub Sg P2) => "ouxesses" ; --# notpresent
    VPB (PretI Sub Sg P3) => "ouxesse" ; --# notpresent
    VPB (PretI Sub Pl P1) => "ouxéssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => "ouxésseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => "ouxessem" ; --# notpresent
    VPB (MQPerf Sg P1) => "ouxera" ; --# notpresent
    VPB (MQPerf Sg P2) => "ouxeras" ; --# notpresent
    VPB (MQPerf Sg P3) => "ouxera" ; --# notpresent
    VPB (MQPerf Pl P1) => "ouxéramos" ; --# notpresent
    VPB (MQPerf Pl P2) => "ouxéreis" ; --# notpresent
    VPB (MQPerf Pl P3) => "ouxeram" ; --# notpresent
    VPB (PretP Sg P1) => "ouxe" ; --# notpresent
    VPB (PretP Sg P2) => "ouxeste" ; --# notpresent
    VPB (PretP Sg P3) => "ouxe" ; --# notpresent
    VPB (PretP Pl P1) => "ouxemos" ; --# notpresent
    VPB (PretP Pl P2) => "ouxestes" ; --# notpresent
    VPB (PretP Pl P3) => "ouxeram" ; --# notpresent
    VPB (Fut Ind Sg P1) => "arei" ; --# notpresent
    VPB (Fut Ind Sg P2) => "arás" ; --# notpresent
    VPB (Fut Ind Sg P3) => "ará" ; --# notpresent
    VPB (Fut Ind Pl P1) => "aremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => "areis" ; --# notpresent
    VPB (Fut Ind Pl P3) => "arão" ; --# notpresent
    VPB (Fut Sub Sg P1) => "ouxer" ; --# notpresent
    VPB (Fut Sub Sg P2) => "ouxeres" ; --# notpresent
    VPB (Fut Sub Sg P3) => "ouxer" ; --# notpresent
    VPB (Fut Sub Pl P1) => "ouxermos" ; --# notpresent
    VPB (Fut Sub Pl P2) => "ouxerdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => "ouxerem" ; --# notpresent
    VPB (Cond Sg P1) => "aria" ; --# notpresent
    VPB (Cond Sg P2) => "arias" ; --# notpresent
    VPB (Cond Sg P3) => "aria" ; --# notpresent
    VPB (Cond Pl P1) => "aríamos" ; --# notpresent
    VPB (Cond Pl P2) => "aríeis" ; --# notpresent
    VPB (Cond Pl P3) => "ariam" ; --# notpresent
    VPB (Imper Sg P2) => vars "az" "aze" ;
    VPB (Imper Sg P3) => "aga" ;
    VPB (Imper Pl P1) => "agamos" ;
    VPB (Imper Pl P2) => "azei" ;
    VPB (Imper Pl P3) => "agam" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper fazer_Besch : Str -> Verbum = \fazer ->
-- 31 | r61
  let f_ = Predef.tk 4 fazer in
 {root = f_ ;
  suff = table {
    VI Infn => "azer" ;
    VI Ger => "azendo" ;
    VI Part => "eito" ;
    VPB (Pres Ind Sg P1) => "aço" ;
    VPB (Pres Ind Sg P2) => "azes" ;
    VPB (Pres Ind Sg P3) => "az" ;
    VPB (Pres Ind Pl P1) => "azemos" ;
    VPB (Pres Ind Pl P2) => "azeis" ;
    VPB (Pres Ind Pl P3) => "azem" ;
    VPB (Pres Sub Sg P1) => "aça" ;
    VPB (Pres Sub Sg P2) => "aças" ;
    VPB (Pres Sub Sg P3) => "aça" ;
    VPB (Pres Sub Pl P1) => "açamos" ;
    VPB (Pres Sub Pl P2) => "açais" ;
    VPB (Pres Sub Pl P3) => "açam" ;
    VPB (PretI Ind Sg P1) => "azia" ; --# notpresent
    VPB (PretI Ind Sg P2) => "azias" ; --# notpresent
    VPB (PretI Ind Sg P3) => "azia" ; --# notpresent
    VPB (PretI Ind Pl P1) => "azíamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => "azíeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => "aziam" ; --# notpresent
    VPB (PretI Sub Sg P1) => "izesse" ; --# notpresent
    VPB (PretI Sub Sg P2) => "izesses" ; --# notpresent
    VPB (PretI Sub Sg P3) => "izesse" ; --# notpresent
    VPB (PretI Sub Pl P1) => "izéssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => "izésseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => "izessem" ; --# notpresent
    VPB (MQPerf Sg P1) => "izera" ; --# notpresent
    VPB (MQPerf Sg P2) => "izeras" ; --# notpresent
    VPB (MQPerf Sg P3) => "izera" ; --# notpresent
    VPB (MQPerf Pl P1) => "izéramos" ; --# notpresent
    VPB (MQPerf Pl P2) => "izéreis" ; --# notpresent
    VPB (MQPerf Pl P3) => "izeram" ; --# notpresent
    VPB (PretP Sg P1) => "iz" ; --# notpresent
    VPB (PretP Sg P2) => "izeste" ; --# notpresent
    VPB (PretP Sg P3) => "ez" ; --# notpresent
    VPB (PretP Pl P1) => "izemos" ; --# notpresent
    VPB (PretP Pl P2) => "izestes" ; --# notpresent
    VPB (PretP Pl P3) => "izeram" ; --# notpresent
    VPB (Fut Ind Sg P1) => "arei" ; --# notpresent
    VPB (Fut Ind Sg P2) => "arás" ; --# notpresent
    VPB (Fut Ind Sg P3) => "ará" ; --# notpresent
    VPB (Fut Ind Pl P1) => "aremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => "areis" ; --# notpresent
    VPB (Fut Ind Pl P3) => "arão" ; --# notpresent
    VPB (Fut Sub Sg P1) => "izer" ; --# notpresent
    VPB (Fut Sub Sg P2) => "izeres" ; --# notpresent
    VPB (Fut Sub Sg P3) => "izer" ; --# notpresent
    VPB (Fut Sub Pl P1) => "izermos" ; --# notpresent
    VPB (Fut Sub Pl P2) => "izerdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => "izerem" ; --# notpresent
    VPB (Cond Sg P1) => "aria" ; --# notpresent
    VPB (Cond Sg P2) => "arias" ; --# notpresent
    VPB (Cond Sg P3) => "aria" ; --# notpresent
    VPB (Cond Pl P1) => "aríamos" ; --# notpresent
    VPB (Cond Pl P2) => "aríeis" ; --# notpresent
    VPB (Cond Pl P3) => "ariam" ; --# notpresent
    VPB (Imper Sg P2) => vars "az" "aze" ;
    VPB (Imper Sg P3) => "aça" ;
    VPB (Imper Pl P1) => "açamos" ;
    VPB (Imper Pl P2) => "azei" ;
    VPB (Imper Pl P3) => "açam" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper aprazer_Besch : Str -> Verbum = \aprazer ->
-- 32 | r55
  let apr_ = Predef.tk 4 aprazer in
 {root = apr_ ;
  suff = table {
    VI Infn => "azer" ;
    VI Ger => "azendo" ;
    VI Part => "azido" ;
    VPB (Pres Ind Sg P1) => "azo" ;
    VPB (Pres Ind Sg P2) => "azes" ;
    VPB (Pres Ind Sg P3) => "az" ;
    VPB (Pres Ind Pl P1) => "azemos" ;
    VPB (Pres Ind Pl P2) => "azeis" ;
    VPB (Pres Ind Pl P3) => "azem" ;
    VPB (Pres Sub Sg P1) => "aza" ;
    VPB (Pres Sub Sg P2) => "azas" ;
    VPB (Pres Sub Sg P3) => "aza" ;
    VPB (Pres Sub Pl P1) => "azarmos" ;
    VPB (Pres Sub Pl P2) => "azais" ;
    VPB (Pres Sub Pl P3) => "azam" ;
    VPB (PretI Ind Sg P1) => "azia" ; --# notpresent
    VPB (PretI Ind Sg P2) => "azias" ; --# notpresent
    VPB (PretI Ind Sg P3) => "azia" ; --# notpresent
    VPB (PretI Ind Pl P1) => "azíamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => "azíeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => "aziam" ; --# notpresent
    VPB (PretI Sub Sg P1) => "ouvesse" ; --# notpresent
    VPB (PretI Sub Sg P2) => "ouvesses" ; --# notpresent
    VPB (PretI Sub Sg P3) => "ouvesse" ; --# notpresent
    VPB (PretI Sub Pl P1) => "ouvéssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => "ouvésseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => "ouvessem" ; --# notpresent
    VPB (MQPerf Sg P1) => "ouvera" ; --# notpresent
    VPB (MQPerf Sg P2) => "ouveras" ; --# notpresent
    VPB (MQPerf Sg P3) => "ouvera" ; --# notpresent
    VPB (MQPerf Pl P1) => "ouvéramos" ; --# notpresent
    VPB (MQPerf Pl P2) => "ouvéreis" ; --# notpresent
    VPB (MQPerf Pl P3) => "ouveram" ; --# notpresent
    VPB (PretP Sg P1) => "ouve" ; --# notpresent
    VPB (PretP Sg P2) => "ouveste" ; --# notpresent
    VPB (PretP Sg P3) => "ouve" ; --# notpresent
    VPB (PretP Pl P1) => "ouvemos" ; --# notpresent
    VPB (PretP Pl P2) => "ouvéreis" ; --# notpresent
    VPB (PretP Pl P3) => "ouveram" ; --# notpresent
    VPB (Fut Ind Sg P1) => "azerei" ; --# notpresent
    VPB (Fut Ind Sg P2) => "azerás" ; --# notpresent
    VPB (Fut Ind Sg P3) => "azerá" ; --# notpresent
    VPB (Fut Ind Pl P1) => "azeremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => "azereis" ; --# notpresent
    VPB (Fut Ind Pl P3) => "azerão" ; --# notpresent
    VPB (Fut Sub Sg P1) => "ouver" ; --# notpresent
    VPB (Fut Sub Sg P2) => "ouveres" ; --# notpresent
    VPB (Fut Sub Sg P3) => "ouver" ; --# notpresent
    VPB (Fut Sub Pl P1) => "ouvermos" ; --# notpresent
    VPB (Fut Sub Pl P2) => "ouverdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => "ouverem" ; --# notpresent
    VPB (Cond Sg P1) => "azeria" ; --# notpresent
    VPB (Cond Sg P2) => "ezerias" ; --# notpresent
    VPB (Cond Sg P3) => "azeria" ; --# notpresent
    VPB (Cond Pl P1) => "azeríamos" ; --# notpresent
    VPB (Cond Pl P2) => "azeríeis" ; --# notpresent
    VPB (Cond Pl P3) => "azeriam" ; --# notpresent
    VPB (Imper Sg P2) => vars "az" "aze" ;
    VPB (Imper Sg P3) => "aza" ;
    VPB (Imper Pl P1) => "azamos" ;
    VPB (Imper Pl P2) => "azei" ;
    VPB (Imper Pl P3) => "azam" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper jazer_Besch : Str -> Verbum = \jazer ->
-- 33 | r43
  let jaz_ = Predef.tk 2 jazer in
 {root = jaz_ ;
  suff = table {
    VI Infn => "er" ;
    VI Ger => "endo" ;
    VI Part => "ido" ;
    VPB (Pres Ind Sg P1) => "o" ;
    VPB (Pres Ind Sg P2) => "es" ;
    VPB (Pres Ind Sg P3) => "" ;
    VPB (Pres Ind Pl P1) => "emos" ;
    VPB (Pres Ind Pl P2) => "eis" ;
    VPB (Pres Ind Pl P3) => "em" ;
    VPB (Pres Sub Sg P1) => "a" ;
    VPB (Pres Sub Sg P2) => "as" ;
    VPB (Pres Sub Sg P3) => "a" ;
    VPB (Pres Sub Pl P1) => "amos" ;
    VPB (Pres Sub Pl P2) => "ais" ;
    VPB (Pres Sub Pl P3) => "am" ;
    VPB (PretI Ind Sg P1) => "ia" ; --# notpresent
    VPB (PretI Ind Sg P2) => "ias" ; --# notpresent
    VPB (PretI Ind Sg P3) => "ia" ; --# notpresent
    VPB (PretI Ind Pl P1) => "íamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => "íeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => "iam" ; --# notpresent
    VPB (PretI Sub Sg P1) => "esse" ; --# notpresent
    VPB (PretI Sub Sg P2) => "esses" ; --# notpresent
    VPB (PretI Sub Sg P3) => "esses" ; --# notpresent
    VPB (PretI Sub Pl P1) => "êssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => "êsseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => "essem" ; --# notpresent
    VPB (MQPerf Sg P1) => "era" ; --# notpresent
    VPB (MQPerf Sg P2) => "eras" ; --# notpresent
    VPB (MQPerf Sg P3) => "era" ; --# notpresent
    VPB (MQPerf Pl P1) => "êramos" ; --# notpresent
    VPB (MQPerf Pl P2) => "êreis" ; --# notpresent
    VPB (MQPerf Pl P3) => "eram" ; --# notpresent
    VPB (PretP Sg P1) => "i" ; --# notpresent
    VPB (PretP Sg P2) => "este" ; --# notpresent
    VPB (PretP Sg P3) => "eu" ; --# notpresent
    VPB (PretP Pl P1) => "emos" ; --# notpresent
    VPB (PretP Pl P2) => "estes" ; --# notpresent
    VPB (PretP Pl P3) => "eram" ; --# notpresent
    VPB (Fut Ind Sg P1) => "erei" ; --# notpresent
    VPB (Fut Ind Sg P2) => "erás" ; --# notpresent
    VPB (Fut Ind Sg P3) => "erá" ; --# notpresent
    VPB (Fut Ind Pl P1) => "eremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => "ereis" ; --# notpresent
    VPB (Fut Ind Pl P3) => "erão" ; --# notpresent
    VPB (Fut Sub Sg P1) => "er" ; --# notpresent
    VPB (Fut Sub Sg P2) => "eres" ; --# notpresent
    VPB (Fut Sub Sg P3) => "er" ; --# notpresent
    VPB (Fut Sub Pl P1) => "ermos" ; --# notpresent
    VPB (Fut Sub Pl P2) => "erdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => "erem" ; --# notpresent
    VPB (Cond Sg P1) => "eria" ; --# notpresent
    VPB (Cond Sg P2) => "erias" ; --# notpresent
    VPB (Cond Sg P3) => "eria" ; --# notpresent
    VPB (Cond Pl P1) => "eríamos" ; --# notpresent
    VPB (Cond Pl P2) => "eríeis" ; --# notpresent
    VPB (Cond Pl P3) => "eriam" ; --# notpresent
    VPB (Imper Sg P2) => vars "" "e" ;
    VPB (Imper Sg P3) => "a" ;
    VPB (Imper Pl P1) => "amos" ;
    VPB (Imper Pl P2) => "ei" ;
    VPB (Imper Pl P3) => "am" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper caber_Besch : Str -> Verbum = \caber ->
-- 34 | r56
  let c_ = Predef.tk 4 caber in
 {root = c_ ;
  suff = table {
    VI Infn => "aber" ;
    VI Ger => "abendo" ;
    VI Part => "abido" ;
    VPB (Pres Ind Sg P1) => "aibo" ;
    VPB (Pres Ind Sg P2) => "abes" ;
    VPB (Pres Ind Sg P3) => "abe" ;
    VPB (Pres Ind Pl P1) => "abemos" ;
    VPB (Pres Ind Pl P2) => "abeis" ;
    VPB (Pres Ind Pl P3) => "abem" ;
    VPB (Pres Sub Sg P1) => "aiba" ;
    VPB (Pres Sub Sg P2) => "aibas" ;
    VPB (Pres Sub Sg P3) => "aiba" ;
    VPB (Pres Sub Pl P1) => "aibamos" ;
    VPB (Pres Sub Pl P2) => "aibais" ;
    VPB (Pres Sub Pl P3) => "aibam" ;
    VPB (PretI Ind Sg P1) => "abia" ; --# notpresent
    VPB (PretI Ind Sg P2) => "abias" ; --# notpresent
    VPB (PretI Ind Sg P3) => "abia" ; --# notpresent
    VPB (PretI Ind Pl P1) => "abíamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => "abíeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => "abiam" ; --# notpresent
    VPB (PretI Sub Sg P1) => "oubesse" ; --# notpresent
    VPB (PretI Sub Sg P2) => "oubesses" ; --# notpresent
    VPB (PretI Sub Sg P3) => "oubesse" ; --# notpresent
    VPB (PretI Sub Pl P1) => "oubéssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => "oubésseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => "oubessem" ; --# notpresent
    VPB (MQPerf Sg P1) => "oubera" ; --# notpresent
    VPB (MQPerf Sg P2) => "ouberas" ; --# notpresent
    VPB (MQPerf Sg P3) => "oubera" ; --# notpresent
    VPB (MQPerf Pl P1) => "oubéramos" ; --# notpresent
    VPB (MQPerf Pl P2) => "oubéreis" ; --# notpresent
    VPB (MQPerf Pl P3) => "ouberam" ; --# notpresent
    VPB (PretP Sg P1) => "oube" ; --# notpresent
    VPB (PretP Sg P2) => "oubeste" ; --# notpresent
    VPB (PretP Sg P3) => "oube" ; --# notpresent
    VPB (PretP Pl P1) => "oubemos" ; --# notpresent
    VPB (PretP Pl P2) => "oubestes" ; --# notpresent
    VPB (PretP Pl P3) => "ouberam" ; --# notpresent
    VPB (Fut Ind Sg P1) => "aberei" ; --# notpresent
    VPB (Fut Ind Sg P2) => "aberás" ; --# notpresent
    VPB (Fut Ind Sg P3) => "aberá" ; --# notpresent
    VPB (Fut Ind Pl P1) => "aberemos" ; --# notpresent
    VPB (Fut Ind Pl P2) => "abereis" ; --# notpresent
    VPB (Fut Ind Pl P3) => "aberão" ; --# notpresent
    VPB (Fut Sub Sg P1) => "ouber" ; --# notpresent
    VPB (Fut Sub Sg P2) => "ouberes" ; --# notpresent
    VPB (Fut Sub Sg P3) => "ouber" ; --# notpresent
    VPB (Fut Sub Pl P1) => "oubermos" ; --# notpresent
    VPB (Fut Sub Pl P2) => "ouberdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => "ouberem" ; --# notpresent
    VPB (Cond Sg P1) => "aberia" ; --# notpresent
    VPB (Cond Sg P2) => "aberias" ; --# notpresent
    VPB (Cond Sg P3) => "aberia" ; --# notpresent
    VPB (Cond Pl P1) => "aberíamos" ; --# notpresent
    VPB (Cond Pl P2) => "aberíeis" ; --# notpresent
    VPB (Cond Pl P3) => "aberiam" ; --# notpresent
    VPB (Imper Sg P2) => nonExist ;
    VPB (Imper Sg P3) => nonExist ;
    VPB (Imper Pl P1) => nonExist ;
    VPB (Imper Pl P2) => nonExist ;
    VPB (Imper Pl P3) => nonExist ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper saber_Besch : Str -> Verbum = \saber ->
-- 35 | r72
  let s_ = Predef.tk 4 saber in
 {root = s_ ;
  suff = table {
    VI Infn => "aber" ;
    VI Ger => "abendo" ;
    VI Part => "abido" ;
    VPB (Pres Ind Sg P1) => "ei" ;
    VPB (Pres Ind Sg P2) => "abes" ;
    VPB (Pres Ind Sg P3) => "abe" ;
    VPB (Pres Ind Pl P1) => "abemos" ;
    VPB (Pres Ind Pl P2) => "abeis" ;
    VPB (Pres Ind Pl P3) => "abem" ;
    VPB (Pres Sub Sg P1) => "aiba" ;
    VPB (Pres Sub Sg P2) => "aibas" ;
    VPB (Pres Sub Sg P3) => "aiba" ;
    VPB (Pres Sub Pl P1) => "aibamos" ;
    VPB (Pres Sub Pl P2) => "aibais" ;
    VPB (Pres Sub Pl P3) => "aibam" ;
    VPB (PretI Ind Sg P1) => "abia" ; --# notpresent
    VPB (PretI Ind Sg P2) => "abias" ; --# notpresent
    VPB (PretI Ind Sg P3) => "abia" ; --# notpresent
    VPB (PretI Ind Pl P1) => "abíamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => "abíeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => "abiam" ; --# notpresent
    VPB (PretI Sub Sg P1) => "oubesse" ; --# notpresent
    VPB (PretI Sub Sg P2) => "oubesses" ; --# notpresent
    VPB (PretI Sub Sg P3) => "oubesse" ; --# notpresent
    VPB (PretI Sub Pl P1) => "oubéssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => "oubésseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => "oubessem" ; --# notpresent
    VPB (MQPerf Sg P1) => "oubera" ; --# notpresent
    VPB (MQPerf Sg P2) => "ouberas" ; --# notpresent
    VPB (MQPerf Sg P3) => "oubera" ; --# notpresent
    VPB (MQPerf Pl P1) => "oubéramos" ; --# notpresent
    VPB (MQPerf Pl P2) => "oubéreis" ; --# notpresent
    VPB (MQPerf Pl P3) => "ouberam" ; --# notpresent
    VPB (PretP Sg P1) => "oube" ; --# notpresent
    VPB (PretP Sg P2) => "oubeste" ; --# notpresent
    VPB (PretP Sg P3) => "oube" ; --# notpresent
    VPB (PretP Pl P1) => "oubemos" ; --# notpresent
    VPB (PretP Pl P2) => "oubestes" ; --# notpresent
    VPB (PretP Pl P3) => "ouberam" ; --# notpresent
    VPB (Fut Ind Sg P1) => "aberei" ; --# notpresent
    VPB (Fut Ind Sg P2) => "aberás" ; --# notpresent
    VPB (Fut Ind Sg P3) => "aberá" ; --# notpresent
    VPB (Fut Ind Pl P1) => "aberemos" ; --# notpresent
    VPB (Fut Ind Pl P2) => "abereis" ; --# notpresent
    VPB (Fut Ind Pl P3) => "aberão" ; --# notpresent
    VPB (Fut Sub Sg P1) => "ouber" ; --# notpresent
    VPB (Fut Sub Sg P2) => "ouberes" ; --# notpresent
    VPB (Fut Sub Sg P3) => "ouber" ; --# notpresent
    VPB (Fut Sub Pl P1) => "oubermos" ; --# notpresent
    VPB (Fut Sub Pl P2) => "ouberdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => "ouberem" ; --# notpresent
    VPB (Cond Sg P1) => "aberia" ; --# notpresent
    VPB (Cond Sg P2) => "aberias" ; --# notpresent
    VPB (Cond Sg P3) => "aberia" ; --# notpresent
    VPB (Cond Pl P1) => "aberiamos" ; --# notpresent
    VPB (Cond Pl P2) => "aberieis" ; --# notpresent
    VPB (Cond Pl P3) => "aberiam" ; --# notpresent
    VPB (Imper Sg P2) => "abe" ;
    VPB (Imper Sg P3) => "aiba" ;
    VPB (Imper Pl P1) => "aibamos" ;
    VPB (Imper Pl P2) => "abei" ;
    VPB (Imper Pl P3) => "aibam" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper poder_Besch : Str -> Verbum = \poder ->
-- 36 | r66
  let p_ = Predef.tk 4 poder in
 {root = p_ ;
  suff = table {
    VI Infn => "oder" ;
    VI Ger => "odendo" ;
    VI Part => "odido" ;
    VPB (Pres Ind Sg P1) => "osso" ;
    VPB (Pres Ind Sg P2) => "odes" ;
    VPB (Pres Ind Sg P3) => "ode" ;
    VPB (Pres Ind Pl P1) => "odemos" ;
    VPB (Pres Ind Pl P2) => "odeis" ;
    VPB (Pres Ind Pl P3) => "odem" ;
    VPB (Pres Sub Sg P1) => "ossa" ;
    VPB (Pres Sub Sg P2) => "ossas" ;
    VPB (Pres Sub Sg P3) => "ossa" ;
    VPB (Pres Sub Pl P1) => "ossamos" ;
    VPB (Pres Sub Pl P2) => "ossais" ;
    VPB (Pres Sub Pl P3) => "ossam" ;
    VPB (PretI Ind Sg P1) => "odia" ; --# notpresent
    VPB (PretI Ind Sg P2) => "odias" ; --# notpresent
    VPB (PretI Ind Sg P3) => "odia" ; --# notpresent
    VPB (PretI Ind Pl P1) => "odiamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => "odieis" ; --# notpresent
    VPB (PretI Ind Pl P3) => "odiam" ; --# notpresent
    VPB (PretI Sub Sg P1) => "udesse" ; --# notpresent
    VPB (PretI Sub Sg P2) => "udesses" ; --# notpresent
    VPB (PretI Sub Sg P3) => "udesse" ; --# notpresent
    VPB (PretI Sub Pl P1) => "udéssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => "udésseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => "udessem" ; --# notpresent
    VPB (MQPerf Sg P1) => "udera" ; --# notpresent
    VPB (MQPerf Sg P2) => "uderas" ; --# notpresent
    VPB (MQPerf Sg P3) => "udera" ; --# notpresent
    VPB (MQPerf Pl P1) => "udéramos" ; --# notpresent
    VPB (MQPerf Pl P2) => "udéreis" ; --# notpresent
    VPB (MQPerf Pl P3) => "uderam" ; --# notpresent
    VPB (PretP Sg P1) => "ude" ; --# notpresent
    VPB (PretP Sg P2) => "udeste" ; --# notpresent
    VPB (PretP Sg P3) => "ôde" ; --# notpresent
    VPB (PretP Pl P1) => "udemos" ; --# notpresent
    VPB (PretP Pl P2) => "udestes" ; --# notpresent
    VPB (PretP Pl P3) => "uderam" ; --# notpresent
    VPB (Fut Ind Sg P1) => "oderei" ; --# notpresent
    VPB (Fut Ind Sg P2) => "oderás" ; --# notpresent
    VPB (Fut Ind Sg P3) => "oderá" ; --# notpresent
    VPB (Fut Ind Pl P1) => "oderemos" ; --# notpresent
    VPB (Fut Ind Pl P2) => "odereis" ; --# notpresent
    VPB (Fut Ind Pl P3) => "oderão" ; --# notpresent
    VPB (Fut Sub Sg P1) => "uder" ; --# notpresent
    VPB (Fut Sub Sg P2) => "uderes" ; --# notpresent
    VPB (Fut Sub Sg P3) => "uder" ; --# notpresent
    VPB (Fut Sub Pl P1) => "udermos" ; --# notpresent
    VPB (Fut Sub Pl P2) => "uderdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => "uderem" ; --# notpresent
    VPB (Cond Sg P1) => "oderia" ; --# notpresent
    VPB (Cond Sg P2) => "oderias" ; --# notpresent
    VPB (Cond Sg P3) => "oderia" ; --# notpresent
    VPB (Cond Pl P1) => "oderíamos" ; --# notpresent
    VPB (Cond Pl P2) => "oderíeis" ; --# notpresent
    VPB (Cond Pl P3) => "oderiam" ; --# notpresent
    VPB (Imper Sg P2) => nonExist ;
    VPB (Imper Sg P3) => nonExist ;
    VPB (Imper Pl P1) => nonExist ;
    VPB (Imper Pl P2) => nonExist ;
    VPB (Imper Pl P3) => nonExist ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper crer_Besch : Str -> Verbum = \crer ->
-- 37 | r58
  let cr_ = Predef.tk 2 crer in
 {root = cr_ ;
  suff = table {
    VI Infn => "er" ;
    VI Ger => "endo" ;
    VI Part => "ido" ;
    VPB (Pres Ind Sg P1) => "eio" ;
    VPB (Pres Ind Sg P2) => "ês" ;
    VPB (Pres Ind Sg P3) => "ê" ;
    VPB (Pres Ind Pl P1) => "emos" ;
    VPB (Pres Ind Pl P2) => "edes" ;
    VPB (Pres Ind Pl P3) => vars "eem" "êem" ;
    VPB (Pres Sub Sg P1) => "eia" ;
    VPB (Pres Sub Sg P2) => "eais" ;
    VPB (Pres Sub Sg P3) => "eia" ;
    VPB (Pres Sub Pl P1) => "eiamos" ;
    VPB (Pres Sub Pl P2) => "eiais" ;
    VPB (Pres Sub Pl P3) => "eiam" ;
    VPB (PretI Ind Sg P1) => "ia" ; --# notpresent
    VPB (PretI Ind Sg P2) => "ias" ; --# notpresent
    VPB (PretI Ind Sg P3) => "ia" ; --# notpresent
    VPB (PretI Ind Pl P1) => "íamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => "íeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => "iam" ; --# notpresent
    VPB (PretI Sub Sg P1) => "esse" ; --# notpresent
    VPB (PretI Sub Sg P2) => "esses" ; --# notpresent
    VPB (PretI Sub Sg P3) => "esse" ; --# notpresent
    VPB (PretI Sub Pl P1) => "êssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => "êsseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => "essem" ; --# notpresent
    VPB (MQPerf Sg P1) => "era" ; --# notpresent
    VPB (MQPerf Sg P2) => "eras" ; --# notpresent
    VPB (MQPerf Sg P3) => "era" ; --# notpresent
    VPB (MQPerf Pl P1) => "êramos" ; --# notpresent
    VPB (MQPerf Pl P2) => "êreis" ; --# notpresent
    VPB (MQPerf Pl P3) => "eram" ; --# notpresent
    VPB (PretP Sg P1) => "i" ; --# notpresent
    VPB (PretP Sg P2) => "este" ; --# notpresent
    VPB (PretP Sg P3) => "eu" ; --# notpresent
    VPB (PretP Pl P1) => "emos" ; --# notpresent
    VPB (PretP Pl P2) => "estes" ; --# notpresent
    VPB (PretP Pl P3) => "eram" ; --# notpresent
    VPB (Fut Ind Sg P1) => "erei" ; --# notpresent
    VPB (Fut Ind Sg P2) => "erás" ; --# notpresent
    VPB (Fut Ind Sg P3) => "erá" ; --# notpresent
    VPB (Fut Ind Pl P1) => "eremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => "ereis" ; --# notpresent
    VPB (Fut Ind Pl P3) => "erão" ; --# notpresent
    VPB (Fut Sub Sg P1) => "er" ; --# notpresent
    VPB (Fut Sub Sg P2) => "eres" ; --# notpresent
    VPB (Fut Sub Sg P3) => "er" ; --# notpresent
    VPB (Fut Sub Pl P1) => "ermos" ; --# notpresent
    VPB (Fut Sub Pl P2) => "erdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => "erem" ; --# notpresent
    VPB (Cond Sg P1) => "eria" ; --# notpresent
    VPB (Cond Sg P2) => "erias" ; --# notpresent
    VPB (Cond Sg P3) => "eria" ; --# notpresent
    VPB (Cond Pl P1) => "eríamos" ; --# notpresent
    VPB (Cond Pl P2) => "eríeis" ; --# notpresent
    VPB (Cond Pl P3) => "eriam" ; --# notpresent
    VPB (Imper Sg P2) => "ê" ;
    VPB (Imper Sg P3) => "eia" ;
    VPB (Imper Pl P1) => "eiamos" ;
    VPB (Imper Pl P2) => "ede" ;
    VPB (Imper Pl P3) => "eiam" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper querer_Besch : Str -> Verbum = \querer ->
-- 38 | r69
  let qu_ = Predef.tk 4 querer in
 {root = qu_ ;
  suff = table {
    VI Infn => "erer" ;
    VI Ger => "erendo" ;
    VI Part => "erido" ;
    VPB (Pres Ind Sg P1) => "ero" ;
    VPB (Pres Ind Sg P2) => "eres" ;
    VPB (Pres Ind Sg P3) => "er" ;
    VPB (Pres Ind Pl P1) => "eremos" ;
    VPB (Pres Ind Pl P2) => "ereis" ;
    VPB (Pres Ind Pl P3) => "erem" ;
    VPB (Pres Sub Sg P1) => "eira" ;
    VPB (Pres Sub Sg P2) => "eiras" ;
    VPB (Pres Sub Sg P3) => "eira" ;
    VPB (Pres Sub Pl P1) => "eiramos" ;
    VPB (Pres Sub Pl P2) => "eirais" ;
    VPB (Pres Sub Pl P3) => "eiram" ;
    VPB (PretI Ind Sg P1) => "eria" ; --# notpresent
    VPB (PretI Ind Sg P2) => "erias" ; --# notpresent
    VPB (PretI Ind Sg P3) => "eria" ; --# notpresent
    VPB (PretI Ind Pl P1) => "eríamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => "eríeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => "eriam" ; --# notpresent
    VPB (PretI Sub Sg P1) => "isesse" ; --# notpresent
    VPB (PretI Sub Sg P2) => "isesses" ; --# notpresent
    VPB (PretI Sub Sg P3) => "isesse" ; --# notpresent
    VPB (PretI Sub Pl P1) => "iséssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => "isésseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => "isessem" ; --# notpresent
    VPB (MQPerf Sg P1) => "isera" ; --# notpresent
    VPB (MQPerf Sg P2) => "iseras" ; --# notpresent
    VPB (MQPerf Sg P3) => "isera" ; --# notpresent
    VPB (MQPerf Pl P1) => "iséramos" ; --# notpresent
    VPB (MQPerf Pl P2) => "iséreis" ; --# notpresent
    VPB (MQPerf Pl P3) => "iseram" ; --# notpresent
    VPB (PretP Sg P1) => "is" ; --# notpresent
    VPB (PretP Sg P2) => "iseste" ; --# notpresent
    VPB (PretP Sg P3) => "is" ; --# notpresent
    VPB (PretP Pl P1) => "isemos" ; --# notpresent
    VPB (PretP Pl P2) => "isestes" ; --# notpresent
    VPB (PretP Pl P3) => "iseram" ; --# notpresent
    VPB (Fut Ind Sg P1) => "ererei" ; --# notpresent
    VPB (Fut Ind Sg P2) => "ererás" ; --# notpresent
    VPB (Fut Ind Sg P3) => "ererá" ; --# notpresent
    VPB (Fut Ind Pl P1) => "ereremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => "erereis" ; --# notpresent
    VPB (Fut Ind Pl P3) => "ererão" ; --# notpresent
    VPB (Fut Sub Sg P1) => "iser" ; --# notpresent
    VPB (Fut Sub Sg P2) => "iseres" ; --# notpresent
    VPB (Fut Sub Sg P3) => "iser" ; --# notpresent
    VPB (Fut Sub Pl P1) => "isermos" ; --# notpresent
    VPB (Fut Sub Pl P2) => "iserdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => "iserem" ; --# notpresent
    VPB (Cond Sg P1) => "ereria" ; --# notpresent
    VPB (Cond Sg P2) => "ererias" ; --# notpresent
    VPB (Cond Sg P3) => "ereria" ; --# notpresent
    VPB (Cond Pl P1) => "ereríamos" ; --# notpresent
    VPB (Cond Pl P2) => "ereríeis" ; --# notpresent
    VPB (Cond Pl P3) => "ereriam" ; --# notpresent
    VPB (Imper Sg P2) => "er" ;
    VPB (Imper Sg P3) => "eira" ;
    VPB (Imper Pl P1) => "eiramos" ;
    VPB (Imper Pl P2) => "erei" ;
    VPB (Imper Pl P3) => "eiram" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper requerer_Besch : Str -> Verbum = \requerer ->
-- 39 | r70
  let reque_ = Predef.tk 3 requerer in
 {root = reque_ ;
  suff = table {
    VI Infn => "rer" ;
    VI Ger => "rendo" ;
    VI Part => "rido" ;
    VPB (Pres Ind Sg P1) => "iro" ;
    VPB (Pres Ind Sg P2) => "res" ;
    VPB (Pres Ind Sg P3) => "r" ;
    VPB (Pres Ind Pl P1) => "remos" ;
    VPB (Pres Ind Pl P2) => "reis" ;
    VPB (Pres Ind Pl P3) => "rem" ;
    VPB (Pres Sub Sg P1) => "ira" ;
    VPB (Pres Sub Sg P2) => "iras" ;
    VPB (Pres Sub Sg P3) => "ira" ;
    VPB (Pres Sub Pl P1) => "iramos" ;
    VPB (Pres Sub Pl P2) => "irais" ;
    VPB (Pres Sub Pl P3) => "iram" ;
    VPB (PretI Ind Sg P1) => "ria" ; --# notpresent
    VPB (PretI Ind Sg P2) => "rias" ; --# notpresent
    VPB (PretI Ind Sg P3) => "ria" ; --# notpresent
    VPB (PretI Ind Pl P1) => "ríamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => "ríeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => "riam" ; --# notpresent
    VPB (PretI Sub Sg P1) => "resse" ; --# notpresent
    VPB (PretI Sub Sg P2) => "resses" ; --# notpresent
    VPB (PretI Sub Sg P3) => "resse" ; --# notpresent
    VPB (PretI Sub Pl P1) => "rêssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => "rêsseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => "ressem" ; --# notpresent
    VPB (MQPerf Sg P1) => "rera" ; --# notpresent
    VPB (MQPerf Sg P2) => "reras" ; --# notpresent
    VPB (MQPerf Sg P3) => "rera" ; --# notpresent
    VPB (MQPerf Pl P1) => "rêramos" ; --# notpresent
    VPB (MQPerf Pl P2) => "rêreis" ; --# notpresent
    VPB (MQPerf Pl P3) => "reram" ; --# notpresent
    VPB (PretP Sg P1) => "ri" ; --# notpresent
    VPB (PretP Sg P2) => "reste" ; --# notpresent
    VPB (PretP Sg P3) => "reu" ; --# notpresent
    VPB (PretP Pl P1) => "remos" ; --# notpresent
    VPB (PretP Pl P2) => "restes" ; --# notpresent
    VPB (PretP Pl P3) => "reram" ; --# notpresent
    VPB (Fut Ind Sg P1) => "rerei" ; --# notpresent
    VPB (Fut Ind Sg P2) => "rerás" ; --# notpresent
    VPB (Fut Ind Sg P3) => "rerá" ; --# notpresent
    VPB (Fut Ind Pl P1) => "reremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => "rereis" ; --# notpresent
    VPB (Fut Ind Pl P3) => "rerão" ; --# notpresent
    VPB (Fut Sub Sg P1) => "rer" ; --# notpresent
    VPB (Fut Sub Sg P2) => "reres" ; --# notpresent
    VPB (Fut Sub Sg P3) => "rer" ; --# notpresent
    VPB (Fut Sub Pl P1) => "rermos" ; --# notpresent
    VPB (Fut Sub Pl P2) => "rerdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => "rerem" ; --# notpresent
    VPB (Cond Sg P1) => "reria" ; --# notpresent
    VPB (Cond Sg P2) => "rerias" ; --# notpresent
    VPB (Cond Sg P3) => "reria" ; --# notpresent
    VPB (Cond Pl P1) => "reríamos" ; --# notpresent
    VPB (Cond Pl P2) => "reríeis" ; --# notpresent
    VPB (Cond Pl P3) => "reriam" ; --# notpresent
    VPB (Imper Sg P2) => "r" ;
    VPB (Imper Sg P3) => "ira" ;
    VPB (Imper Pl P1) => "iramos" ;
    VPB (Imper Pl P2) => "rei" ;
    VPB (Imper Pl P3) => "iram" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper ver_Besch : Str -> Verbum = \ver ->
-- 40 | r25
  let v_ = Predef.tk 2 ver in
 {root = v_ ;
  suff = table {
    VI Infn => "er" ;
    VI Ger => "endo" ;
    VI Part => "isto" ;
    VPB (Pres Ind Sg P1) => "ejo" ;
    VPB (Pres Ind Sg P2) => "ês" ;
    VPB (Pres Ind Sg P3) => "ê" ;
    VPB (Pres Ind Pl P1) => "emos" ;
    VPB (Pres Ind Pl P2) => "edes" ;
    VPB (Pres Ind Pl P3) => vars "eem" "êem" ;
    VPB (Pres Sub Sg P1) => "eja" ;
    VPB (Pres Sub Sg P2) => "ejas" ;
    VPB (Pres Sub Sg P3) => "eja" ;
    VPB (Pres Sub Pl P1) => "ejamos" ;
    VPB (Pres Sub Pl P2) => "ejais" ;
    VPB (Pres Sub Pl P3) => "ejam" ;
    VPB (PretI Ind Sg P1) => "ia" ; --# notpresent
    VPB (PretI Ind Sg P2) => "ias" ; --# notpresent
    VPB (PretI Ind Sg P3) => "ia" ; --# notpresent
    VPB (PretI Ind Pl P1) => "íamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => "íeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => "iam" ; --# notpresent
    VPB (PretI Sub Sg P1) => "isse" ; --# notpresent
    VPB (PretI Sub Sg P2) => "isses" ; --# notpresent
    VPB (PretI Sub Sg P3) => "isse" ; --# notpresent
    VPB (PretI Sub Pl P1) => "íssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => "ísseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => "issem" ; --# notpresent
    VPB (MQPerf Sg P1) => "ira" ; --# notpresent
    VPB (MQPerf Sg P2) => "iras" ; --# notpresent
    VPB (MQPerf Sg P3) => "ira" ; --# notpresent
    VPB (MQPerf Pl P1) => "íramos" ; --# notpresent
    VPB (MQPerf Pl P2) => "íreis" ; --# notpresent
    VPB (MQPerf Pl P3) => "iram" ; --# notpresent
    VPB (PretP Sg P1) => "i" ; --# notpresent
    VPB (PretP Sg P2) => "iste" ; --# notpresent
    VPB (PretP Sg P3) => "iu" ; --# notpresent
    VPB (PretP Pl P1) => "imos" ; --# notpresent
    VPB (PretP Pl P2) => "istes" ; --# notpresent
    VPB (PretP Pl P3) => "iram" ; --# notpresent
    VPB (Fut Ind Sg P1) => "erei" ; --# notpresent
    VPB (Fut Ind Sg P2) => "erás" ; --# notpresent
    VPB (Fut Ind Sg P3) => "erá" ; --# notpresent
    VPB (Fut Ind Pl P1) => "eremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => "ereis" ; --# notpresent
    VPB (Fut Ind Pl P3) => "erão" ; --# notpresent
    VPB (Fut Sub Sg P1) => "ir" ; --# notpresent
    VPB (Fut Sub Sg P2) => "ires" ; --# notpresent
    VPB (Fut Sub Sg P3) => "ir" ; --# notpresent
    VPB (Fut Sub Pl P1) => "irmos" ; --# notpresent
    VPB (Fut Sub Pl P2) => "irdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => "irem" ; --# notpresent
    VPB (Cond Sg P1) => "eria" ; --# notpresent
    VPB (Cond Sg P2) => "erias" ; --# notpresent
    VPB (Cond Sg P3) => "eria" ; --# notpresent
    VPB (Cond Pl P1) => "eríamos" ; --# notpresent
    VPB (Cond Pl P2) => "eríeis" ; --# notpresent
    VPB (Cond Pl P3) => "eriam" ; --# notpresent
    VPB (Imper Sg P2) => "ê" ;
    VPB (Imper Sg P3) => "eja" ;
    VPB (Imper Pl P1) => "ejamos" ;
    VPB (Imper Pl P2) => "ede" ;
    VPB (Imper Pl P3) => "ejam" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper prover_Besch : Str -> Verbum = \prover ->
-- 41 | r68
  let prov_ = Predef.tk 2 prover in
 {root = prov_ ;
  suff = table {
    VI Infn => "er" ;
    VI Ger => "endo" ;
    VI Part => "ido" ;
    VPB (Pres Ind Sg P1) => "ejo" ;
    VPB (Pres Ind Sg P2) => "ês" ;
    VPB (Pres Ind Sg P3) => "ê" ;
    VPB (Pres Ind Pl P1) => "emos" ;
    VPB (Pres Ind Pl P2) => "edes" ;
    VPB (Pres Ind Pl P3) => vars "eem" "êem" ;
    VPB (Pres Sub Sg P1) => "eja" ;
    VPB (Pres Sub Sg P2) => "ejas" ;
    VPB (Pres Sub Sg P3) => "eja" ;
    VPB (Pres Sub Pl P1) => "ejamos" ;
    VPB (Pres Sub Pl P2) => "ejais" ;
    VPB (Pres Sub Pl P3) => "ejam" ;
    VPB (PretI Ind Sg P1) => "ia" ; --# notpresent
    VPB (PretI Ind Sg P2) => "ias" ; --# notpresent
    VPB (PretI Ind Sg P3) => "ia" ; --# notpresent
    VPB (PretI Ind Pl P1) => "íamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => "íeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => "iam" ; --# notpresent
    VPB (PretI Sub Sg P1) => "esse" ; --# notpresent
    VPB (PretI Sub Sg P2) => "esses" ; --# notpresent
    VPB (PretI Sub Sg P3) => "esse" ; --# notpresent
    VPB (PretI Sub Pl P1) => "êssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => "êsseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => "essem" ; --# notpresent
    VPB (MQPerf Sg P1) => "era" ; --# notpresent
    VPB (MQPerf Sg P2) => "eras" ; --# notpresent
    VPB (MQPerf Sg P3) => "era" ; --# notpresent
    VPB (MQPerf Pl P1) => "êramos" ; --# notpresent
    VPB (MQPerf Pl P2) => "êreis" ; --# notpresent
    VPB (MQPerf Pl P3) => "eram" ; --# notpresent
    VPB (PretP Sg P1) => "i" ; --# notpresent
    VPB (PretP Sg P2) => "este" ; --# notpresent
    VPB (PretP Sg P3) => "eu" ; --# notpresent
    VPB (PretP Pl P1) => "emos" ; --# notpresent
    VPB (PretP Pl P2) => "estes" ; --# notpresent
    VPB (PretP Pl P3) => "eram" ; --# notpresent
    VPB (Fut Ind Sg P1) => "erei" ; --# notpresent
    VPB (Fut Ind Sg P2) => "erás" ; --# notpresent
    VPB (Fut Ind Sg P3) => "erá" ; --# notpresent
    VPB (Fut Ind Pl P1) => "eremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => "ereis" ; --# notpresent
    VPB (Fut Ind Pl P3) => "erão" ; --# notpresent
    VPB (Fut Sub Sg P1) => "er" ; --# notpresent
    VPB (Fut Sub Sg P2) => "eres" ; --# notpresent
    VPB (Fut Sub Sg P3) => "er" ; --# notpresent
    VPB (Fut Sub Pl P1) => "ermos" ; --# notpresent
    VPB (Fut Sub Pl P2) => "erdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => "erem" ; --# notpresent
    VPB (Cond Sg P1) => "eria" ; --# notpresent
    VPB (Cond Sg P2) => "erias" ; --# notpresent
    VPB (Cond Sg P3) => "eria" ; --# notpresent
    VPB (Cond Pl P1) => "eríamos" ; --# notpresent
    VPB (Cond Pl P2) => "eríeis" ; --# notpresent
    VPB (Cond Pl P3) => "eriam" ; --# notpresent
    VPB (Imper Sg P2) => "ê" ;
    VPB (Imper Sg P3) => "eja" ;
    VPB (Imper Pl P1) => "ejamos" ;
    VPB (Imper Pl P2) => "ede" ;
    VPB (Imper Pl P3) => "ejam" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper ler_Besch : Str -> Verbum = \ler ->
-- 42 | r58
  let l_ = Predef.tk 2 ler in
 {root = l_ ;
  suff = table {
    VI Infn => "er" ;
    VI Ger => "endo" ;
    VI Part => "ido" ;
    VPB (Pres Ind Sg P1) => "eio" ;
    VPB (Pres Ind Sg P2) => "ês" ;
    VPB (Pres Ind Sg P3) => "ê" ;
    VPB (Pres Ind Pl P1) => "emos" ;
    VPB (Pres Ind Pl P2) => "edes" ;
    VPB (Pres Ind Pl P3) => vars "eem" "êem" ;
    VPB (Pres Sub Sg P1) => "eia" ;
    VPB (Pres Sub Sg P2) => "eias" ;
    VPB (Pres Sub Sg P3) => "eia" ;
    VPB (Pres Sub Pl P1) => "eiamos" ;
    VPB (Pres Sub Pl P2) => "eiais" ;
    VPB (Pres Sub Pl P3) => "eiam" ;
    VPB (PretI Ind Sg P1) => "ia" ; --# notpresent
    VPB (PretI Ind Sg P2) => "ias" ; --# notpresent
    VPB (PretI Ind Sg P3) => "ia" ; --# notpresent
    VPB (PretI Ind Pl P1) => "iamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => "ieis" ; --# notpresent
    VPB (PretI Ind Pl P3) => "iam" ; --# notpresent
    VPB (PretI Sub Sg P1) => "esse" ; --# notpresent
    VPB (PretI Sub Sg P2) => "esses" ; --# notpresent
    VPB (PretI Sub Sg P3) => "esse" ; --# notpresent
    VPB (PretI Sub Pl P1) => "êssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => "êsseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => "essem" ; --# notpresent
    VPB (MQPerf Sg P1) => "era" ; --# notpresent
    VPB (MQPerf Sg P2) => "eras" ; --# notpresent
    VPB (MQPerf Sg P3) => "era" ; --# notpresent
    VPB (MQPerf Pl P1) => "êramos" ; --# notpresent
    VPB (MQPerf Pl P2) => "êreis" ; --# notpresent
    VPB (MQPerf Pl P3) => "eram" ; --# notpresent
    VPB (PretP Sg P1) => "i" ; --# notpresent
    VPB (PretP Sg P2) => "este" ; --# notpresent
    VPB (PretP Sg P3) => "eu" ; --# notpresent
    VPB (PretP Pl P1) => "emos" ; --# notpresent
    VPB (PretP Pl P2) => "estes" ; --# notpresent
    VPB (PretP Pl P3) => "eram" ; --# notpresent
    VPB (Fut Ind Sg P1) => "erei" ; --# notpresent
    VPB (Fut Ind Sg P2) => "erás" ; --# notpresent
    VPB (Fut Ind Sg P3) => "erá" ; --# notpresent
    VPB (Fut Ind Pl P1) => "eremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => "ereis" ; --# notpresent
    VPB (Fut Ind Pl P3) => "erão" ; --# notpresent
    VPB (Fut Sub Sg P1) => "er" ; --# notpresent
    VPB (Fut Sub Sg P2) => "eres" ; --# notpresent
    VPB (Fut Sub Sg P3) => "er" ; --# notpresent
    VPB (Fut Sub Pl P1) => "ermos" ; --# notpresent
    VPB (Fut Sub Pl P2) => "erdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => "erem" ; --# notpresent
    VPB (Cond Sg P1) => "eria" ; --# notpresent
    VPB (Cond Sg P2) => "erias" ; --# notpresent
    VPB (Cond Sg P3) => "eria" ; --# notpresent
    VPB (Cond Pl P1) => "eríamos" ; --# notpresent
    VPB (Cond Pl P2) => "eríeis" ; --# notpresent
    VPB (Cond Pl P3) => "eriam" ; --# notpresent
    VPB (Imper Sg P2) => "ê" ;
    VPB (Imper Sg P3) => "eia" ;
    VPB (Imper Pl P1) => "eiamos" ;
    VPB (Imper Pl P2) => "ede" ;
    VPB (Imper Pl P3) => "eiam" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper valer_Besch : Str -> Verbum = \valer ->
-- 43 | r74
  let val_ = Predef.tk 2 valer in
 {root = val_ ;
  suff = table {
    VI Infn => "er" ;
    VI Ger => "endo" ;
    VI Part => "ido" ;
    VPB (Pres Ind Sg P1) => "ho" ;
    VPB (Pres Ind Sg P2) => "es" ;
    VPB (Pres Ind Sg P3) => "e" ;
    VPB (Pres Ind Pl P1) => "emos" ;
    VPB (Pres Ind Pl P2) => "eis" ;
    VPB (Pres Ind Pl P3) => "em" ;
    VPB (Pres Sub Sg P1) => "ha" ;
    VPB (Pres Sub Sg P2) => "has" ;
    VPB (Pres Sub Sg P3) => "ha" ;
    VPB (Pres Sub Pl P1) => "hamos" ;
    VPB (Pres Sub Pl P2) => "hais" ;
    VPB (Pres Sub Pl P3) => "ham" ;
    VPB (PretI Ind Sg P1) => "ia" ; --# notpresent
    VPB (PretI Ind Sg P2) => "ias" ; --# notpresent
    VPB (PretI Ind Sg P3) => "ia" ; --# notpresent
    VPB (PretI Ind Pl P1) => "íamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => "íeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => "iam" ; --# notpresent
    VPB (PretI Sub Sg P1) => "esse" ; --# notpresent
    VPB (PretI Sub Sg P2) => "esses" ; --# notpresent
    VPB (PretI Sub Sg P3) => "esse" ; --# notpresent
    VPB (PretI Sub Pl P1) => "êssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => "êsseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => "essem" ; --# notpresent
    VPB (MQPerf Sg P1) => "era" ; --# notpresent
    VPB (MQPerf Sg P2) => "eras" ; --# notpresent
    VPB (MQPerf Sg P3) => "era" ; --# notpresent
    VPB (MQPerf Pl P1) => "êramos" ; --# notpresent
    VPB (MQPerf Pl P2) => "êreis" ; --# notpresent
    VPB (MQPerf Pl P3) => "eram" ; --# notpresent
    VPB (PretP Sg P1) => "i" ; --# notpresent
    VPB (PretP Sg P2) => "este" ; --# notpresent
    VPB (PretP Sg P3) => "eu" ; --# notpresent
    VPB (PretP Pl P1) => "emos" ; --# notpresent
    VPB (PretP Pl P2) => "estes" ; --# notpresent
    VPB (PretP Pl P3) => "eram" ; --# notpresent
    VPB (Fut Ind Sg P1) => "erei" ; --# notpresent
    VPB (Fut Ind Sg P2) => "erás" ; --# notpresent
    VPB (Fut Ind Sg P3) => "erá" ; --# notpresent
    VPB (Fut Ind Pl P1) => "eremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => "ereis" ; --# notpresent
    VPB (Fut Ind Pl P3) => "erão" ; --# notpresent
    VPB (Fut Sub Sg P1) => "er" ; --# notpresent
    VPB (Fut Sub Sg P2) => "eres" ; --# notpresent
    VPB (Fut Sub Sg P3) => "er" ; --# notpresent
    VPB (Fut Sub Pl P1) => "ermos" ; --# notpresent
    VPB (Fut Sub Pl P2) => "erdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => "erem" ; --# notpresent
    VPB (Cond Sg P1) => "eria" ; --# notpresent
    VPB (Cond Sg P2) => "erias" ; --# notpresent
    VPB (Cond Sg P3) => "eria" ; --# notpresent
    VPB (Cond Pl P1) => "eríamos" ; --# notpresent
    VPB (Cond Pl P2) => "eríeis" ; --# notpresent
    VPB (Cond Pl P3) => "eriam" ; --# notpresent
    VPB (Imper Sg P2) => "e" ;
    VPB (Imper Sg P3) => "ha" ;
    VPB (Imper Pl P1) => "hamos" ;
    VPB (Imper Pl P2) => "ei" ;
    VPB (Imper Pl P3) => "ham" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper perder_Besch : Str -> Verbum = \perder ->
-- 44 | r65
  let per_ = Predef.tk 3 perder in
 {root = per_ ;
  suff = table {
    VI Infn => "der" ;
    VI Ger => "dendo" ;
    VI Part => "dido" ;
    VPB (Pres Ind Sg P1) => "co" ;
    VPB (Pres Ind Sg P2) => "des" ;
    VPB (Pres Ind Sg P3) => "de" ;
    VPB (Pres Ind Pl P1) => "demos" ;
    VPB (Pres Ind Pl P2) => "deis" ;
    VPB (Pres Ind Pl P3) => "dem" ;
    VPB (Pres Sub Sg P1) => "ca" ;
    VPB (Pres Sub Sg P2) => "cas" ;
    VPB (Pres Sub Sg P3) => "ca" ;
    VPB (Pres Sub Pl P1) => "camos" ;
    VPB (Pres Sub Pl P2) => "cais" ;
    VPB (Pres Sub Pl P3) => "cam" ;
    VPB (PretI Ind Sg P1) => "dia" ; --# notpresent
    VPB (PretI Ind Sg P2) => "dias" ; --# notpresent
    VPB (PretI Ind Sg P3) => "dia" ; --# notpresent
    VPB (PretI Ind Pl P1) => "díamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => "díeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => "diam" ; --# notpresent
    VPB (PretI Sub Sg P1) => "desse" ; --# notpresent
    VPB (PretI Sub Sg P2) => "desses" ; --# notpresent
    VPB (PretI Sub Sg P3) => "desse" ; --# notpresent
    VPB (PretI Sub Pl P1) => "dêssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => "dêsseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => "dessem" ; --# notpresent
    VPB (MQPerf Sg P1) => "dera" ; --# notpresent
    VPB (MQPerf Sg P2) => "deras" ; --# notpresent
    VPB (MQPerf Sg P3) => "dera" ; --# notpresent
    VPB (MQPerf Pl P1) => "dêramos" ; --# notpresent
    VPB (MQPerf Pl P2) => "dêreis" ; --# notpresent
    VPB (MQPerf Pl P3) => "deram" ; --# notpresent
    VPB (PretP Sg P1) => "di" ; --# notpresent
    VPB (PretP Sg P2) => "deste" ; --# notpresent
    VPB (PretP Sg P3) => "deu" ; --# notpresent
    VPB (PretP Pl P1) => "demos" ; --# notpresent
    VPB (PretP Pl P2) => "destes" ; --# notpresent
    VPB (PretP Pl P3) => "deram" ; --# notpresent
    VPB (Fut Ind Sg P1) => "derei" ; --# notpresent
    VPB (Fut Ind Sg P2) => "derás" ; --# notpresent
    VPB (Fut Ind Sg P3) => "derá" ; --# notpresent
    VPB (Fut Ind Pl P1) => "deremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => "dereis" ; --# notpresent
    VPB (Fut Ind Pl P3) => "derão" ; --# notpresent
    VPB (Fut Sub Sg P1) => "der" ; --# notpresent
    VPB (Fut Sub Sg P2) => "deres" ; --# notpresent
    VPB (Fut Sub Sg P3) => "der" ; --# notpresent
    VPB (Fut Sub Pl P1) => "dermos" ; --# notpresent
    VPB (Fut Sub Pl P2) => "derdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => "derem" ; --# notpresent
    VPB (Cond Sg P1) => "deria" ; --# notpresent
    VPB (Cond Sg P2) => "derias" ; --# notpresent
    VPB (Cond Sg P3) => "deria" ; --# notpresent
    VPB (Cond Pl P1) => "deríamos" ; --# notpresent
    VPB (Cond Pl P2) => "deríeis" ; --# notpresent
    VPB (Cond Pl P3) => "deriam" ; --# notpresent
    VPB (Imper Sg P2) => "de" ;
    VPB (Imper Sg P3) => "ca" ;
    VPB (Imper Pl P1) => "camos" ;
    VPB (Imper Pl P2) => "dei" ;
    VPB (Imper Pl P3) => "cam" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper pôr_Besch : Str -> Verbum = \pôr ->
-- 45 | r67
  let p_ = Predef.tk 2 pôr in
 {root = p_ ;
  suff = table {
    VI Infn => "ôr" ;
    VI Ger => "ondo" ;
    VI Part => "osto" ;
    VPB (Pres Ind Sg P1) => "onho" ;
    VPB (Pres Ind Sg P2) => "ões" ;
    VPB (Pres Ind Sg P3) => "õe" ;
    VPB (Pres Ind Pl P1) => "omos" ;
    VPB (Pres Ind Pl P2) => "ondes" ;
    VPB (Pres Ind Pl P3) => "õem" ;
    VPB (Pres Sub Sg P1) => "onha" ;
    VPB (Pres Sub Sg P2) => "onhas" ;
    VPB (Pres Sub Sg P3) => "onha" ;
    VPB (Pres Sub Pl P1) => "onhamos" ;
    VPB (Pres Sub Pl P2) => "onhais" ;
    VPB (Pres Sub Pl P3) => "onham" ;
    VPB (PretI Ind Sg P1) => "unha" ; --# notpresent
    VPB (PretI Ind Sg P2) => "unhas" ; --# notpresent
    VPB (PretI Ind Sg P3) => "unha" ; --# notpresent
    VPB (PretI Ind Pl P1) => "únhamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => "únheis" ; --# notpresent
    VPB (PretI Ind Pl P3) => "unham" ; --# notpresent
    VPB (PretI Sub Sg P1) => "usesse" ; --# notpresent
    VPB (PretI Sub Sg P2) => "usesses" ; --# notpresent
    VPB (PretI Sub Sg P3) => "usesse" ; --# notpresent
    VPB (PretI Sub Pl P1) => "uséssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => "usésseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => "usessem" ; --# notpresent
    VPB (MQPerf Sg P1) => "usera" ; --# notpresent
    VPB (MQPerf Sg P2) => "useras" ; --# notpresent
    VPB (MQPerf Sg P3) => "usera" ; --# notpresent
    VPB (MQPerf Pl P1) => "uséramos" ; --# notpresent
    VPB (MQPerf Pl P2) => "uséreis" ; --# notpresent
    VPB (MQPerf Pl P3) => "useram" ; --# notpresent
    VPB (PretP Sg P1) => "us" ; --# notpresent
    VPB (PretP Sg P2) => "useste" ; --# notpresent
    VPB (PretP Sg P3) => "ôs" ; --# notpresent
    VPB (PretP Pl P1) => "usemos" ; --# notpresent
    VPB (PretP Pl P2) => "usestes" ; --# notpresent
    VPB (PretP Pl P3) => "useram" ; --# notpresent
    VPB (Fut Ind Sg P1) => "orei" ; --# notpresent
    VPB (Fut Ind Sg P2) => "orás" ; --# notpresent
    VPB (Fut Ind Sg P3) => "orá" ; --# notpresent
    VPB (Fut Ind Pl P1) => "oremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => "oreis" ; --# notpresent
    VPB (Fut Ind Pl P3) => "orão" ; --# notpresent
    VPB (Fut Sub Sg P1) => "user" ; --# notpresent
    VPB (Fut Sub Sg P2) => "useres" ; --# notpresent
    VPB (Fut Sub Sg P3) => "user" ; --# notpresent
    VPB (Fut Sub Pl P1) => "usermos" ; --# notpresent
    VPB (Fut Sub Pl P2) => "userdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => "userem" ; --# notpresent
    VPB (Cond Sg P1) => "oria" ; --# notpresent
    VPB (Cond Sg P2) => "orias" ; --# notpresent
    VPB (Cond Sg P3) => "oria" ; --# notpresent
    VPB (Cond Pl P1) => "oríamos" ; --# notpresent
    VPB (Cond Pl P2) => "oríeis" ; --# notpresent
    VPB (Cond Pl P3) => "oriam" ; --# notpresent
    VPB (Imper Sg P2) => "õe" ;
    VPB (Imper Sg P3) => "onha" ;
    VPB (Imper Pl P1) => "onhamos" ;
    VPB (Imper Pl P2) => "onde" ;
    VPB (Imper Pl P3) => "onham" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper acontecer_Besch : Str -> Verbum = \acontecer ->
-- 46 | r25
  let aconte_ = Predef.tk 3 acontecer in
 {root = aconte_ ;
  suff = table {
    VI Infn => "cer" ;
    VI Ger => "cendo" ;
    VI Part => "cido" ;
    VPB (Pres Ind Sg P1) => nonExist ;
    VPB (Pres Ind Sg P2) => nonExist ;
    VPB (Pres Ind Sg P3) => "ce" ;
    VPB (Pres Ind Pl P1) => nonExist ;
    VPB (Pres Ind Pl P2) => nonExist ;
    VPB (Pres Ind Pl P3) => "cem" ;
    VPB (Pres Sub Sg P1) => nonExist ;
    VPB (Pres Sub Sg P2) => nonExist ;
    VPB (Pres Sub Sg P3) => "ça" ;
    VPB (Pres Sub Pl P1) => nonExist ;
    VPB (Pres Sub Pl P2) => nonExist ;
    VPB (Pres Sub Pl P3) => "çam" ;
    VPB (PretI Ind Sg P1) => nonExist ; --# notpresent
    VPB (PretI Ind Sg P2) => nonExist ; --# notpresent
    VPB (PretI Ind Sg P3) => "cia" ; --# notpresent
    VPB (PretI Ind Pl P1) => nonExist ; --# notpresent
    VPB (PretI Ind Pl P2) => nonExist ; --# notpresent
    VPB (PretI Ind Pl P3) => "ciam" ; --# notpresent
    VPB (PretI Sub Sg P1) => nonExist ; --# notpresent
    VPB (PretI Sub Sg P2) => nonExist ; --# notpresent
    VPB (PretI Sub Sg P3) => "cesse" ; --# notpresent
    VPB (PretI Sub Pl P1) => nonExist ; --# notpresent
    VPB (PretI Sub Pl P2) => nonExist ; --# notpresent
    VPB (PretI Sub Pl P3) => "cessem" ; --# notpresent
    VPB (MQPerf Sg P1) => nonExist ; --# notpresent
    VPB (MQPerf Sg P2) => nonExist ; --# notpresent
    VPB (MQPerf Sg P3) => "cera" ; --# notpresent
    VPB (MQPerf Pl P1) => nonExist ; --# notpresent
    VPB (MQPerf Pl P2) => nonExist ; --# notpresent
    VPB (MQPerf Pl P3) => "ceram" ; --# notpresent
    VPB (PretP Sg P1) => nonExist ; --# notpresent
    VPB (PretP Sg P2) => nonExist ; --# notpresent
    VPB (PretP Sg P3) => "ceu" ; --# notpresent
    VPB (PretP Pl P1) => nonExist ; --# notpresent
    VPB (PretP Pl P2) => nonExist ; --# notpresent
    VPB (PretP Pl P3) => "ceram" ; --# notpresent
    VPB (Fut Ind Sg P1) => nonExist ; --# notpresent
    VPB (Fut Ind Sg P2) => nonExist ; --# notpresent
    VPB (Fut Ind Sg P3) => "cerá" ; --# notpresent
    VPB (Fut Ind Pl P1) => nonExist ; --# notpresent
    VPB (Fut Ind Pl P2) => nonExist ; --# notpresent
    VPB (Fut Ind Pl P3) => "cerão" ; --# notpresent
    VPB (Fut Sub Sg P1) => nonExist ; --# notpresent
    VPB (Fut Sub Sg P2) => nonExist ; --# notpresent
    VPB (Fut Sub Sg P3) => "cer" ; --# notpresent
    VPB (Fut Sub Pl P1) => nonExist ; --# notpresent
    VPB (Fut Sub Pl P2) => nonExist ; --# notpresent
    VPB (Fut Sub Pl P3) => "cerem" ; --# notpresent
    VPB (Cond Sg P1) => nonExist ; --# notpresent
    VPB (Cond Sg P2) => nonExist ; --# notpresent
    VPB (Cond Sg P3) => "ceria" ; --# notpresent
    VPB (Cond Pl P1) => nonExist ; --# notpresent
    VPB (Cond Pl P2) => nonExist ; --# notpresent
    VPB (Cond Pl P3) => "ceriam" ; --# notpresent
    VPB (Imper Sg P2) => nonExist ;
    VPB (Imper Sg P3) => nonExist ;
    VPB (Imper Pl P1) => nonExist ;
    VPB (Imper Pl P2) => nonExist ;
    VPB (Imper Pl P3) => nonExist ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper chover_Besch : Str -> Verbum = \chover ->
-- 47 | r6
  let chov_ = Predef.tk 2 chover in
 {root = chov_ ;
  suff = table {
    VI Infn => "er" ;
    VI Ger => "endo" ;
    VI Part => "ido" ;
    VPB (Pres Ind Sg P1) => nonExist ;
    VPB (Pres Ind Sg P2) => nonExist ;
    VPB (Pres Ind Sg P3) => "e" ;
    VPB (Pres Ind Pl P1) => nonExist ;
    VPB (Pres Ind Pl P2) => nonExist ;
    VPB (Pres Ind Pl P3) => "em" ;
    VPB (Pres Sub Sg P1) => nonExist ;
    VPB (Pres Sub Sg P2) => nonExist ;
    VPB (Pres Sub Sg P3) => "a" ;
    VPB (Pres Sub Pl P1) => nonExist ;
    VPB (Pres Sub Pl P2) => nonExist ;
    VPB (Pres Sub Pl P3) => "am" ;
    VPB (PretI Ind Sg P1) => nonExist ; --# notpresent
    VPB (PretI Ind Sg P2) => nonExist ; --# notpresent
    VPB (PretI Ind Sg P3) => "ia" ; --# notpresent
    VPB (PretI Ind Pl P1) => nonExist ; --# notpresent
    VPB (PretI Ind Pl P2) => nonExist ; --# notpresent
    VPB (PretI Ind Pl P3) => "iam" ; --# notpresent
    VPB (PretI Sub Sg P1) => nonExist ; --# notpresent
    VPB (PretI Sub Sg P2) => nonExist ; --# notpresent
    VPB (PretI Sub Sg P3) => "esse" ; --# notpresent
    VPB (PretI Sub Pl P1) => nonExist ; --# notpresent
    VPB (PretI Sub Pl P2) => nonExist ; --# notpresent
    VPB (PretI Sub Pl P3) => "essem" ; --# notpresent
    VPB (MQPerf Sg P1) => nonExist ; --# notpresent
    VPB (MQPerf Sg P2) => nonExist ; --# notpresent
    VPB (MQPerf Sg P3) => "era" ; --# notpresent
    VPB (MQPerf Pl P1) => nonExist ; --# notpresent
    VPB (MQPerf Pl P2) => nonExist ; --# notpresent
    VPB (MQPerf Pl P3) => "eram" ; --# notpresent
    VPB (PretP Sg P1) => nonExist ; --# notpresent
    VPB (PretP Sg P2) => nonExist ; --# notpresent
    VPB (PretP Sg P3) => "eu" ; --# notpresent
    VPB (PretP Pl P1) => nonExist ; --# notpresent
    VPB (PretP Pl P2) => nonExist ; --# notpresent
    VPB (PretP Pl P3) => "eram" ; --# notpresent
    VPB (Fut Ind Sg P1) => nonExist ; --# notpresent
    VPB (Fut Ind Sg P2) => nonExist ; --# notpresent
    VPB (Fut Ind Sg P3) => "erá" ; --# notpresent
    VPB (Fut Ind Pl P1) => nonExist ; --# notpresent
    VPB (Fut Ind Pl P2) => nonExist ; --# notpresent
    VPB (Fut Ind Pl P3) => "erão" ; --# notpresent
    VPB (Fut Sub Sg P1) => nonExist ; --# notpresent
    VPB (Fut Sub Sg P2) => nonExist ; --# notpresent
    VPB (Fut Sub Sg P3) => "er" ; --# notpresent
    VPB (Fut Sub Pl P1) => nonExist ; --# notpresent
    VPB (Fut Sub Pl P2) => nonExist ; --# notpresent
    VPB (Fut Sub Pl P3) => "erem" ; --# notpresent
    VPB (Cond Sg P1) => nonExist ; --# notpresent
    VPB (Cond Sg P2) => nonExist ; --# notpresent
    VPB (Cond Sg P3) => "eria" ; --# notpresent
    VPB (Cond Pl P1) => nonExist ; --# notpresent
    VPB (Cond Pl P2) => nonExist ; --# notpresent
    VPB (Cond Pl P3) => "eriam" ; --# notpresent
    VPB (Imper Sg P2) => nonExist ;
    VPB (Imper Sg P3) => nonExist ;
    VPB (Imper Pl P1) => nonExist ;
    VPB (Imper Pl P2) => nonExist ;
    VPB (Imper Pl P3) => nonExist ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper doer_Besch : Str -> Verbum = \doer ->
-- 48 | r83
  let d_ = Predef.tk 3 doer in
 {root = d_ ;
  suff = table {
    VI Infn => "oer" ;
    VI Ger => "oendo" ;
    VI Part => "oído" ;
    VPB (Pres Ind Sg P1) => nonExist ;
    VPB (Pres Ind Sg P2) => nonExist ;
    VPB (Pres Ind Sg P3) => "ói" ;
    VPB (Pres Ind Pl P1) => nonExist ;
    VPB (Pres Ind Pl P2) => nonExist ;
    VPB (Pres Ind Pl P3) => "oem" ;
    VPB (Pres Sub Sg P1) => nonExist ;
    VPB (Pres Sub Sg P2) => nonExist ;
    VPB (Pres Sub Sg P3) => "oa" ;
    VPB (Pres Sub Pl P1) => nonExist ;
    VPB (Pres Sub Pl P2) => nonExist ;
    VPB (Pres Sub Pl P3) => "oam" ;
    VPB (PretI Ind Sg P1) => nonExist ; --# notpresent
    VPB (PretI Ind Sg P2) => nonExist ; --# notpresent
    VPB (PretI Ind Sg P3) => "oía" ; --# notpresent
    VPB (PretI Ind Pl P1) => nonExist ; --# notpresent
    VPB (PretI Ind Pl P2) => nonExist ; --# notpresent
    VPB (PretI Ind Pl P3) => "oíam" ; --# notpresent
    VPB (PretI Sub Sg P1) => nonExist ; --# notpresent
    VPB (PretI Sub Sg P2) => nonExist ; --# notpresent
    VPB (PretI Sub Sg P3) => "oesse" ; --# notpresent
    VPB (PretI Sub Pl P1) => nonExist ; --# notpresent
    VPB (PretI Sub Pl P2) => nonExist ; --# notpresent
    VPB (PretI Sub Pl P3) => "oessem" ; --# notpresent
    VPB (MQPerf Sg P1) => nonExist ; --# notpresent
    VPB (MQPerf Sg P2) => nonExist ; --# notpresent
    VPB (MQPerf Sg P3) => "oera" ; --# notpresent
    VPB (MQPerf Pl P1) => nonExist ; --# notpresent
    VPB (MQPerf Pl P2) => nonExist ; --# notpresent
    VPB (MQPerf Pl P3) => "oeram" ; --# notpresent
    VPB (PretP Sg P1) => nonExist ; --# notpresent
    VPB (PretP Sg P2) => nonExist ; --# notpresent
    VPB (PretP Sg P3) => "oeu" ; --# notpresent
    VPB (PretP Pl P1) => nonExist ; --# notpresent
    VPB (PretP Pl P2) => nonExist ; --# notpresent
    VPB (PretP Pl P3) => "oeram" ; --# notpresent
    VPB (Fut Ind Sg P1) => nonExist ; --# notpresent
    VPB (Fut Ind Sg P2) => nonExist ; --# notpresent
    VPB (Fut Ind Sg P3) => "oerá" ; --# notpresent
    VPB (Fut Ind Pl P1) => nonExist ; --# notpresent
    VPB (Fut Ind Pl P2) => nonExist ; --# notpresent
    VPB (Fut Ind Pl P3) => "oerão" ; --# notpresent
    VPB (Fut Sub Sg P1) => nonExist ; --# notpresent
    VPB (Fut Sub Sg P2) => nonExist ; --# notpresent
    VPB (Fut Sub Sg P3) => "oer" ; --# notpresent
    VPB (Fut Sub Pl P1) => nonExist ; --# notpresent
    VPB (Fut Sub Pl P2) => nonExist ; --# notpresent
    VPB (Fut Sub Pl P3) => "oerem" ; --# notpresent
    VPB (Cond Sg P1) => nonExist ; --# notpresent
    VPB (Cond Sg P2) => nonExist ; --# notpresent
    VPB (Cond Sg P3) => "oeria" ; --# notpresent
    VPB (Cond Pl P1) => nonExist ; --# notpresent
    VPB (Cond Pl P2) => nonExist ; --# notpresent
    VPB (Cond Pl P3) => "oeriam" ; --# notpresent
    VPB (Imper Sg P2) => nonExist ;
    VPB (Imper Sg P3) => nonExist ;
    VPB (Imper Pl P1) => nonExist ;
    VPB (Imper Pl P2) => nonExist ;
    VPB (Imper Pl P3) => nonExist ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper prazer_Besch : Str -> Verbum = \prazer ->
-- 49 | r55
  let pr_ = Predef.tk 4 prazer in
 {root = pr_ ;
  suff = table {
    VI Infn => "azer" ;
    VI Ger => "azendo" ;
    VI Part => "azido" ;
    VPB (Pres Ind Sg P1) => nonExist ;
    VPB (Pres Ind Sg P2) => nonExist ;
    VPB (Pres Ind Sg P3) => "az" ;
    VPB (Pres Ind Pl P1) => nonExist ;
    VPB (Pres Ind Pl P2) => nonExist ;
    VPB (Pres Ind Pl P3) => "azem" ;
    VPB (Pres Sub Sg P1) => nonExist ;
    VPB (Pres Sub Sg P2) => nonExist ;
    VPB (Pres Sub Sg P3) => "aza" ;
    VPB (Pres Sub Pl P1) => nonExist ;
    VPB (Pres Sub Pl P2) => nonExist ;
    VPB (Pres Sub Pl P3) => "azam" ;
    VPB (PretI Ind Sg P1) => nonExist ; --# notpresent
    VPB (PretI Ind Sg P2) => nonExist ; --# notpresent
    VPB (PretI Ind Sg P3) => "azia" ; --# notpresent
    VPB (PretI Ind Pl P1) => nonExist ; --# notpresent
    VPB (PretI Ind Pl P2) => nonExist ; --# notpresent
    VPB (PretI Ind Pl P3) => "aziam" ; --# notpresent
    VPB (PretI Sub Sg P1) => nonExist ; --# notpresent
    VPB (PretI Sub Sg P2) => nonExist ; --# notpresent
    VPB (PretI Sub Sg P3) => "ouvesse" ; --# notpresent
    VPB (PretI Sub Pl P1) => nonExist ; --# notpresent
    VPB (PretI Sub Pl P2) => nonExist ; --# notpresent
    VPB (PretI Sub Pl P3) => "ouvessem" ; --# notpresent
    VPB (MQPerf Sg P1) => nonExist ; --# notpresent
    VPB (MQPerf Sg P2) => nonExist ; --# notpresent
    VPB (MQPerf Sg P3) => "ouvera" ; --# notpresent
    VPB (MQPerf Pl P1) => nonExist ; --# notpresent
    VPB (MQPerf Pl P2) => nonExist ; --# notpresent
    VPB (MQPerf Pl P3) => "ouveram" ; --# notpresent
    VPB (PretP Sg P1) => nonExist ; --# notpresent
    VPB (PretP Sg P2) => nonExist ; --# notpresent
    VPB (PretP Sg P3) => "ouve" ; --# notpresent
    VPB (PretP Pl P1) => nonExist ; --# notpresent
    VPB (PretP Pl P2) => nonExist ; --# notpresent
    VPB (PretP Pl P3) => "ouveram" ; --# notpresent
    VPB (Fut Ind Sg P1) => nonExist ; --# notpresent
    VPB (Fut Ind Sg P2) => nonExist ; --# notpresent
    VPB (Fut Ind Sg P3) => "azerá" ; --# notpresent
    VPB (Fut Ind Pl P1) => nonExist ; --# notpresent
    VPB (Fut Ind Pl P2) => nonExist ; --# notpresent
    VPB (Fut Ind Pl P3) => "azerão" ; --# notpresent
    VPB (Fut Sub Sg P1) => nonExist ; --# notpresent
    VPB (Fut Sub Sg P2) => nonExist ; --# notpresent
    VPB (Fut Sub Sg P3) => "ouver" ; --# notpresent
    VPB (Fut Sub Pl P1) => nonExist ; --# notpresent
    VPB (Fut Sub Pl P2) => nonExist ; --# notpresent
    VPB (Fut Sub Pl P3) => "ouverem" ; --# notpresent
    VPB (Cond Sg P1) => nonExist ; --# notpresent
    VPB (Cond Sg P2) => nonExist ; --# notpresent
    VPB (Cond Sg P3) => "azeria" ; --# notpresent
    VPB (Cond Pl P1) => nonExist ; --# notpresent
    VPB (Cond Pl P2) => nonExist ; --# notpresent
    VPB (Cond Pl P3) => "azeriam" ; --# notpresent
    VPB (Imper Sg P2) => nonExist ;
    VPB (Imper Sg P3) => nonExist ;
    VPB (Imper Pl P1) => nonExist ;
    VPB (Imper Pl P2) => nonExist ;
    VPB (Imper Pl P3) => nonExist ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper precaver_Besch : Str -> Verbum = \precaver ->
-- 50 | r85
  let precav_ = Predef.tk 2 precaver in
 {root = precav_ ;
  suff = table {
    VI Infn => "er" ;
    VI Ger => "endo" ;
    VI Part => "ido" ;
    VPB (Pres Ind Sg P1) => nonExist ;
    VPB (Pres Ind Sg P2) => nonExist ;
    VPB (Pres Ind Sg P3) => nonExist ;
    VPB (Pres Ind Pl P1) => "emos" ;
    VPB (Pres Ind Pl P2) => "eis" ;
    VPB (Pres Ind Pl P3) => nonExist ;
    VPB (Pres Sub Sg P1) => nonExist ;
    VPB (Pres Sub Sg P2) => nonExist ;
    VPB (Pres Sub Sg P3) => nonExist ;
    VPB (Pres Sub Pl P1) => nonExist ;
    VPB (Pres Sub Pl P2) => nonExist ;
    VPB (Pres Sub Pl P3) => nonExist ;
    VPB (PretI Ind Sg P1) => "ia" ; --# notpresent
    VPB (PretI Ind Sg P2) => "ias" ; --# notpresent
    VPB (PretI Ind Sg P3) => "ia" ; --# notpresent
    VPB (PretI Ind Pl P1) => "íamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => "íeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => "iam" ; --# notpresent
    VPB (PretI Sub Sg P1) => "esse" ; --# notpresent
    VPB (PretI Sub Sg P2) => "esses" ; --# notpresent
    VPB (PretI Sub Sg P3) => "esse" ; --# notpresent
    VPB (PretI Sub Pl P1) => "êssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => "êsseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => "essem" ; --# notpresent
    VPB (MQPerf Sg P1) => "era" ; --# notpresent
    VPB (MQPerf Sg P2) => "eras" ; --# notpresent
    VPB (MQPerf Sg P3) => "era" ; --# notpresent
    VPB (MQPerf Pl P1) => "êramos" ; --# notpresent
    VPB (MQPerf Pl P2) => "êreis" ; --# notpresent
    VPB (MQPerf Pl P3) => "eram" ; --# notpresent
    VPB (PretP Sg P1) => "i" ; --# notpresent
    VPB (PretP Sg P2) => "este" ; --# notpresent
    VPB (PretP Sg P3) => "eu" ; --# notpresent
    VPB (PretP Pl P1) => "emos" ; --# notpresent
    VPB (PretP Pl P2) => "estes" ; --# notpresent
    VPB (PretP Pl P3) => "eram" ; --# notpresent
    VPB (Fut Ind Sg P1) => "erei" ; --# notpresent
    VPB (Fut Ind Sg P2) => "erás" ; --# notpresent
    VPB (Fut Ind Sg P3) => "erá" ; --# notpresent
    VPB (Fut Ind Pl P1) => "eremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => "ereis" ; --# notpresent
    VPB (Fut Ind Pl P3) => "erão" ; --# notpresent
    VPB (Fut Sub Sg P1) => "er" ; --# notpresent
    VPB (Fut Sub Sg P2) => "eres" ; --# notpresent
    VPB (Fut Sub Sg P3) => "er" ; --# notpresent
    VPB (Fut Sub Pl P1) => "ermos" ; --# notpresent
    VPB (Fut Sub Pl P2) => "erdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => "erem" ; --# notpresent
    VPB (Cond Sg P1) => "eria" ; --# notpresent
    VPB (Cond Sg P2) => "erias" ; --# notpresent
    VPB (Cond Sg P3) => "eria" ; --# notpresent
    VPB (Cond Pl P1) => "eríamos" ; --# notpresent
    VPB (Cond Pl P2) => "eríeis" ; --# notpresent
    VPB (Cond Pl P3) => "eriam" ; --# notpresent
    VPB (Imper Sg P2) => nonExist ;
    VPB (Imper Sg P3) => nonExist ;
    VPB (Imper Pl P1) => nonExist ;
    VPB (Imper Pl P2) => "ei" ;
    VPB (Imper Pl P3) => nonExist ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper reaver_Besch : Str -> Verbum = \reaver ->
-- 51 | r86
  let re_ = Predef.tk 4 reaver in
 {root = re_ ;
  suff = table {
    VI Infn => "aver" ;
    VI Ger => "avendo" ;
    VI Part => "avido" ;
    VPB (Pres Ind Sg P1) => nonExist ;
    VPB (Pres Ind Sg P2) => nonExist ;
    VPB (Pres Ind Sg P3) => nonExist ;
    VPB (Pres Ind Pl P1) => "avemos" ;
    VPB (Pres Ind Pl P2) => "aveis" ;
    VPB (Pres Ind Pl P3) => nonExist ;
    VPB (Pres Sub Sg P1) => nonExist ;
    VPB (Pres Sub Sg P2) => nonExist ;
    VPB (Pres Sub Sg P3) => nonExist ;
    VPB (Pres Sub Pl P1) => nonExist ;
    VPB (Pres Sub Pl P2) => nonExist ;
    VPB (Pres Sub Pl P3) => nonExist ;
    VPB (PretI Ind Sg P1) => "avia" ; --# notpresent
    VPB (PretI Ind Sg P2) => "avias" ; --# notpresent
    VPB (PretI Ind Sg P3) => "avia" ; --# notpresent
    VPB (PretI Ind Pl P1) => "avíamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => "avíeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => "aviam" ; --# notpresent
    VPB (PretI Sub Sg P1) => "ouvesse" ; --# notpresent
    VPB (PretI Sub Sg P2) => "ouvesses" ; --# notpresent
    VPB (PretI Sub Sg P3) => "ouvesse" ; --# notpresent
    VPB (PretI Sub Pl P1) => "ouvéssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => "ouvésseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => "ouvessem" ; --# notpresent
    VPB (MQPerf Sg P1) => "ouvera" ; --# notpresent
    VPB (MQPerf Sg P2) => "ouveras" ; --# notpresent
    VPB (MQPerf Sg P3) => "ouvera" ; --# notpresent
    VPB (MQPerf Pl P1) => "ouvéramos" ; --# notpresent
    VPB (MQPerf Pl P2) => "ouvéreis" ; --# notpresent
    VPB (MQPerf Pl P3) => "ouveram" ; --# notpresent
    VPB (PretP Sg P1) => "ouve" ; --# notpresent
    VPB (PretP Sg P2) => "ouveste" ; --# notpresent
    VPB (PretP Sg P3) => "ouve" ; --# notpresent
    VPB (PretP Pl P1) => "ouvemos" ; --# notpresent
    VPB (PretP Pl P2) => "ouvestes" ; --# notpresent
    VPB (PretP Pl P3) => "ouveram" ; --# notpresent
    VPB (Fut Ind Sg P1) => "averei" ; --# notpresent
    VPB (Fut Ind Sg P2) => "averás" ; --# notpresent
    VPB (Fut Ind Sg P3) => "averá" ; --# notpresent
    VPB (Fut Ind Pl P1) => "averemos" ; --# notpresent
    VPB (Fut Ind Pl P2) => "avereis" ; --# notpresent
    VPB (Fut Ind Pl P3) => "averão" ; --# notpresent
    VPB (Fut Sub Sg P1) => "ouver" ; --# notpresent
    VPB (Fut Sub Sg P2) => "ouveres" ; --# notpresent
    VPB (Fut Sub Sg P3) => "ouver" ; --# notpresent
    VPB (Fut Sub Pl P1) => "ouvermos" ; --# notpresent
    VPB (Fut Sub Pl P2) => "ouverdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => "ouverem" ; --# notpresent
    VPB (Cond Sg P1) => "averia" ; --# notpresent
    VPB (Cond Sg P2) => "averias" ; --# notpresent
    VPB (Cond Sg P3) => "averia" ; --# notpresent
    VPB (Cond Pl P1) => "averíamos" ; --# notpresent
    VPB (Cond Pl P2) => "averíeis" ; --# notpresent
    VPB (Cond Pl P3) => "averiam" ; --# notpresent
    VPB (Imper Sg P2) => nonExist ;
    VPB (Imper Sg P3) => nonExist ;
    VPB (Imper Pl P1) => nonExist ;
    VPB (Imper Pl P2) => "avei" ;
    VPB (Imper Pl P3) => nonExist ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper redigir_Besch : Str -> Verbum = \redigir ->
-- 52 | r28
  let red_ = Predef.tk 4 redigir in
 {root = red_ ;
  suff = table {
    VI Infn => "igir" ;
    VI Ger => "igindo" ;
    VI Part => "igido" ;
    VPB (Pres Ind Sg P1) => "ijo" ;
    VPB (Pres Ind Sg P2) => "iges" ;
    VPB (Pres Ind Sg P3) => "ige" ;
    VPB (Pres Ind Pl P1) => "igimos" ;
    VPB (Pres Ind Pl P2) => "igis" ;
    VPB (Pres Ind Pl P3) => "igem" ;
    VPB (Pres Sub Sg P1) => "ija" ;
    VPB (Pres Sub Sg P2) => "ijas" ;
    VPB (Pres Sub Sg P3) => "ija" ;
    VPB (Pres Sub Pl P1) => "ijamos" ;
    VPB (Pres Sub Pl P2) => "ijais" ;
    VPB (Pres Sub Pl P3) => "ijam" ;
    VPB (PretI Ind Sg P1) => "igia" ; --# notpresent
    VPB (PretI Ind Sg P2) => "igias" ; --# notpresent
    VPB (PretI Ind Sg P3) => "igia" ; --# notpresent
    VPB (PretI Ind Pl P1) => "igíamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => "ígieis" ; --# notpresent
    VPB (PretI Ind Pl P3) => "igiam" ; --# notpresent
    VPB (PretI Sub Sg P1) => "igisse" ; --# notpresent
    VPB (PretI Sub Sg P2) => "igisses" ; --# notpresent
    VPB (PretI Sub Sg P3) => "igisse" ; --# notpresent
    VPB (PretI Sub Pl P1) => "igíssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => "igísseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => "igissem" ; --# notpresent
    VPB (MQPerf Sg P1) => "igira" ; --# notpresent
    VPB (MQPerf Sg P2) => "igiras" ; --# notpresent
    VPB (MQPerf Sg P3) => "igira" ; --# notpresent
    VPB (MQPerf Pl P1) => "igíramos" ; --# notpresent
    VPB (MQPerf Pl P2) => "igíreis" ; --# notpresent
    VPB (MQPerf Pl P3) => "igiram" ; --# notpresent
    VPB (PretP Sg P1) => "igi" ; --# notpresent
    VPB (PretP Sg P2) => "igiste" ; --# notpresent
    VPB (PretP Sg P3) => "igiu" ; --# notpresent
    VPB (PretP Pl P1) => "igimos" ; --# notpresent
    VPB (PretP Pl P2) => "igistes" ; --# notpresent
    VPB (PretP Pl P3) => "igiram" ; --# notpresent
    VPB (Fut Ind Sg P1) => "igirei" ; --# notpresent
    VPB (Fut Ind Sg P2) => "igirás" ; --# notpresent
    VPB (Fut Ind Sg P3) => "igirá" ; --# notpresent
    VPB (Fut Ind Pl P1) => "igiremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => "igireis" ; --# notpresent
    VPB (Fut Ind Pl P3) => "igirão" ; --# notpresent
    VPB (Fut Sub Sg P1) => "igir" ; --# notpresent
    VPB (Fut Sub Sg P2) => "igires" ; --# notpresent
    VPB (Fut Sub Sg P3) => "igir" ; --# notpresent
    VPB (Fut Sub Pl P1) => "igirmos" ; --# notpresent
    VPB (Fut Sub Pl P2) => "igirdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => "igirem" ; --# notpresent
    VPB (Cond Sg P1) => "igiria" ; --# notpresent
    VPB (Cond Sg P2) => "igirias" ; --# notpresent
    VPB (Cond Sg P3) => "igiria" ; --# notpresent
    VPB (Cond Pl P1) => "igiríamos" ; --# notpresent
    VPB (Cond Pl P2) => "igiríeis" ; --# notpresent
    VPB (Cond Pl P3) => "igiriam" ; --# notpresent
    VPB (Imper Sg P2) => "ige" ;
    VPB (Imper Sg P3) => "ija" ;
    VPB (Imper Pl P1) => "ijamos" ;
    VPB (Imper Pl P2) => "igi" ;
    VPB (Imper Pl P3) => "ijam" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper extinguir_Besch : Str -> Verbum = \extinguir ->
-- 53 | r33
  let extin_ = Predef.tk 4 extinguir in
 {root = extin_ ;
  suff = table {
    VI Infn => "guir" ;
    VI Ger => "guindo" ;
    VI Part => vars "to" "guido" ;
    VPB (Pres Ind Sg P1) => "go" ;
    VPB (Pres Ind Sg P2) => "gues" ;
    VPB (Pres Ind Sg P3) => "gue" ;
    VPB (Pres Ind Pl P1) => "guimos" ;
    VPB (Pres Ind Pl P2) => "guis" ;
    VPB (Pres Ind Pl P3) => "guem" ;
    VPB (Pres Sub Sg P1) => "ga" ;
    VPB (Pres Sub Sg P2) => "gas" ;
    VPB (Pres Sub Sg P3) => "ga" ;
    VPB (Pres Sub Pl P1) => "gamos" ;
    VPB (Pres Sub Pl P2) => "gais" ;
    VPB (Pres Sub Pl P3) => "gam" ;
    VPB (PretI Ind Sg P1) => "guia" ; --# notpresent
    VPB (PretI Ind Sg P2) => "guias" ; --# notpresent
    VPB (PretI Ind Sg P3) => "guia" ; --# notpresent
    VPB (PretI Ind Pl P1) => "guíamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => "guíeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => "guiam" ; --# notpresent
    VPB (PretI Sub Sg P1) => "guisse" ; --# notpresent
    VPB (PretI Sub Sg P2) => "guisses" ; --# notpresent
    VPB (PretI Sub Sg P3) => "guisse" ; --# notpresent
    VPB (PretI Sub Pl P1) => "guíssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => "guísseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => "guissem" ; --# notpresent
    VPB (MQPerf Sg P1) => "guira" ; --# notpresent
    VPB (MQPerf Sg P2) => "guiras" ; --# notpresent
    VPB (MQPerf Sg P3) => "guira" ; --# notpresent
    VPB (MQPerf Pl P1) => "guíramos" ; --# notpresent
    VPB (MQPerf Pl P2) => "guíreis" ; --# notpresent
    VPB (MQPerf Pl P3) => "guiram" ; --# notpresent
    VPB (PretP Sg P1) => "gui" ; --# notpresent
    VPB (PretP Sg P2) => "guiste" ; --# notpresent
    VPB (PretP Sg P3) => "guiu" ; --# notpresent
    VPB (PretP Pl P1) => "guímos" ; --# notpresent
    VPB (PretP Pl P2) => "guistes" ; --# notpresent
    VPB (PretP Pl P3) => "guiram" ; --# notpresent
    VPB (Fut Ind Sg P1) => "guirei" ; --# notpresent
    VPB (Fut Ind Sg P2) => "guirás" ; --# notpresent
    VPB (Fut Ind Sg P3) => "guirá" ; --# notpresent
    VPB (Fut Ind Pl P1) => "guiremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => "guireis" ; --# notpresent
    VPB (Fut Ind Pl P3) => "guirão" ; --# notpresent
    VPB (Fut Sub Sg P1) => "guir" ; --# notpresent
    VPB (Fut Sub Sg P2) => "guires" ; --# notpresent
    VPB (Fut Sub Sg P3) => "guir" ; --# notpresent
    VPB (Fut Sub Pl P1) => "guirmos" ; --# notpresent
    VPB (Fut Sub Pl P2) => "guirdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => "guirem" ; --# notpresent
    VPB (Cond Sg P1) => "guiria" ; --# notpresent
    VPB (Cond Sg P2) => "guirias" ; --# notpresent
    VPB (Cond Sg P3) => "guiria" ; --# notpresent
    VPB (Cond Pl P1) => "guiríamos" ; --# notpresent
    VPB (Cond Pl P2) => "guiríeis" ; --# notpresent
    VPB (Cond Pl P3) => "guiriam" ; --# notpresent
    VPB (Imper Sg P2) => "gue" ;
    VPB (Imper Sg P3) => "ga" ;
    VPB (Imper Pl P1) => "gamos" ;
    VPB (Imper Pl P2) => "gui" ;
    VPB (Imper Pl P3) => "gam" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper servir_Besch : Str -> Verbum = \servir ->
-- 54 | r47
  let s_ = Predef.tk 5 servir in
 {root = s_ ;
  suff = table {
    VI Infn => "ervir" ;
    VI Ger => "ervindo" ;
    VI Part => "ervido" ;
    VPB (Pres Ind Sg P1) => "irvo" ;
    VPB (Pres Ind Sg P2) => "erves" ;
    VPB (Pres Ind Sg P3) => "erve" ;
    VPB (Pres Ind Pl P1) => "ervimos" ;
    VPB (Pres Ind Pl P2) => "ervis" ;
    VPB (Pres Ind Pl P3) => "ervem" ;
    VPB (Pres Sub Sg P1) => "irva" ;
    VPB (Pres Sub Sg P2) => "irvas" ;
    VPB (Pres Sub Sg P3) => "irva" ;
    VPB (Pres Sub Pl P1) => "irvamos" ;
    VPB (Pres Sub Pl P2) => "irvais" ;
    VPB (Pres Sub Pl P3) => "irvam" ;
    VPB (PretI Ind Sg P1) => "ervia" ; --# notpresent
    VPB (PretI Ind Sg P2) => "ervias" ; --# notpresent
    VPB (PretI Ind Sg P3) => "ervia" ; --# notpresent
    VPB (PretI Ind Pl P1) => "ervíamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => "ervíeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => "erviam" ; --# notpresent
    VPB (PretI Sub Sg P1) => "ervisse" ; --# notpresent
    VPB (PretI Sub Sg P2) => "ervisses" ; --# notpresent
    VPB (PretI Sub Sg P3) => "ervisse" ; --# notpresent
    VPB (PretI Sub Pl P1) => "ervíssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => "ervísseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => "ervissem" ; --# notpresent
    VPB (MQPerf Sg P1) => "ervira" ; --# notpresent
    VPB (MQPerf Sg P2) => "erviras" ; --# notpresent
    VPB (MQPerf Sg P3) => "ervira" ; --# notpresent
    VPB (MQPerf Pl P1) => "ervíramos" ; --# notpresent
    VPB (MQPerf Pl P2) => "ervíreis" ; --# notpresent
    VPB (MQPerf Pl P3) => "erviram" ; --# notpresent
    VPB (PretP Sg P1) => "ervi" ; --# notpresent
    VPB (PretP Sg P2) => "erviste" ; --# notpresent
    VPB (PretP Sg P3) => "erviu" ; --# notpresent
    VPB (PretP Pl P1) => "ervimos" ; --# notpresent
    VPB (PretP Pl P2) => "ervistes" ; --# notpresent
    VPB (PretP Pl P3) => "erviram" ; --# notpresent
    VPB (Fut Ind Sg P1) => "ervirei" ; --# notpresent
    VPB (Fut Ind Sg P2) => "ervirás" ; --# notpresent
    VPB (Fut Ind Sg P3) => "ervirá" ; --# notpresent
    VPB (Fut Ind Pl P1) => "erviremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => "ervireis" ; --# notpresent
    VPB (Fut Ind Pl P3) => "ervirão" ; --# notpresent
    VPB (Fut Sub Sg P1) => "ervir" ; --# notpresent
    VPB (Fut Sub Sg P2) => "ervires" ; --# notpresent
    VPB (Fut Sub Sg P3) => "ervir" ; --# notpresent
    VPB (Fut Sub Pl P1) => "ervirmos" ; --# notpresent
    VPB (Fut Sub Pl P2) => "ervirdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => "ervirem" ; --# notpresent
    VPB (Cond Sg P1) => "erviria" ; --# notpresent
    VPB (Cond Sg P2) => "ervirias" ; --# notpresent
    VPB (Cond Sg P3) => "erviria" ; --# notpresent
    VPB (Cond Pl P1) => "erviríamos" ; --# notpresent
    VPB (Cond Pl P2) => "erviríeis" ; --# notpresent
    VPB (Cond Pl P3) => "erviriam" ; --# notpresent
    VPB (Imper Sg P2) => "erve" ;
    VPB (Imper Sg P3) => "irva" ;
    VPB (Imper Pl P1) => "irvamos" ;
    VPB (Imper Pl P2) => "ervi" ;
    VPB (Imper Pl P3) => "irvam" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper seguir_Besch : Str -> Verbum = \seguir ->
-- 55 | r50
  let s_ = Predef.tk 5 seguir in
 {root = s_ ;
  suff = table {
    VI Infn => "eguir" ;
    VI Ger => "eguindo" ;
    VI Part => "eguido" ;
    VPB (Pres Ind Sg P1) => "igo" ;
    VPB (Pres Ind Sg P2) => "egues" ;
    VPB (Pres Ind Sg P3) => "egue" ;
    VPB (Pres Ind Pl P1) => "eguimos" ;
    VPB (Pres Ind Pl P2) => "eguis" ;
    VPB (Pres Ind Pl P3) => "eguem" ;
    VPB (Pres Sub Sg P1) => "iga" ;
    VPB (Pres Sub Sg P2) => "igas" ;
    VPB (Pres Sub Sg P3) => "iga" ;
    VPB (Pres Sub Pl P1) => "igamos" ;
    VPB (Pres Sub Pl P2) => "igais" ;
    VPB (Pres Sub Pl P3) => "igam" ;
    VPB (PretI Ind Sg P1) => "eguia" ; --# notpresent
    VPB (PretI Ind Sg P2) => "eguias" ; --# notpresent
    VPB (PretI Ind Sg P3) => "eguia" ; --# notpresent
    VPB (PretI Ind Pl P1) => "eguíamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => "eguíeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => "eguiam" ; --# notpresent
    VPB (PretI Sub Sg P1) => "eguisse" ; --# notpresent
    VPB (PretI Sub Sg P2) => "eguisses" ; --# notpresent
    VPB (PretI Sub Sg P3) => "eguisse" ; --# notpresent
    VPB (PretI Sub Pl P1) => "eguíssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => "eguísseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => "eguissem" ; --# notpresent
    VPB (MQPerf Sg P1) => "eguira" ; --# notpresent
    VPB (MQPerf Sg P2) => "eguiras" ; --# notpresent
    VPB (MQPerf Sg P3) => "eguira" ; --# notpresent
    VPB (MQPerf Pl P1) => "eguíramos" ; --# notpresent
    VPB (MQPerf Pl P2) => "eguíreis" ; --# notpresent
    VPB (MQPerf Pl P3) => "eguiram" ; --# notpresent
    VPB (PretP Sg P1) => "egui" ; --# notpresent
    VPB (PretP Sg P2) => "eguiste" ; --# notpresent
    VPB (PretP Sg P3) => "eguiu" ; --# notpresent
    VPB (PretP Pl P1) => "eguimos" ; --# notpresent
    VPB (PretP Pl P2) => "eguistes" ; --# notpresent
    VPB (PretP Pl P3) => "eguiram" ; --# notpresent
    VPB (Fut Ind Sg P1) => "eguirei" ; --# notpresent
    VPB (Fut Ind Sg P2) => "eguirás" ; --# notpresent
    VPB (Fut Ind Sg P3) => "eguirá" ; --# notpresent
    VPB (Fut Ind Pl P1) => "eguiremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => "eguireis" ; --# notpresent
    VPB (Fut Ind Pl P3) => "eguirão" ; --# notpresent
    VPB (Fut Sub Sg P1) => "eguir" ; --# notpresent
    VPB (Fut Sub Sg P2) => "eguires" ; --# notpresent
    VPB (Fut Sub Sg P3) => "eguir" ; --# notpresent
    VPB (Fut Sub Pl P1) => "eguirmos" ; --# notpresent
    VPB (Fut Sub Pl P2) => "eguirdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => "eguirem" ; --# notpresent
    VPB (Cond Sg P1) => "eguiria" ; --# notpresent
    VPB (Cond Sg P2) => "eguirias" ; --# notpresent
    VPB (Cond Sg P3) => "eguiria" ; --# notpresent
    VPB (Cond Pl P1) => "eguiríamos" ; --# notpresent
    VPB (Cond Pl P2) => "eguiríeis" ; --# notpresent
    VPB (Cond Pl P3) => "eguiriam" ; --# notpresent
    VPB (Imper Sg P2) => "egue" ;
    VPB (Imper Sg P3) => "iga" ;
    VPB (Imper Pl P1) => "igamos" ;
    VPB (Imper Pl P2) => "egui" ;
    VPB (Imper Pl P3) => "igam" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper sentir_Besch : Str -> Verbum = \sentir ->
-- 56 | r47
  let s_ = Predef.tk 5 sentir in
 {root = s_ ;
  suff = table {
    VI Infn => "entir" ;
    VI Ger => "entindo" ;
    VI Part => "entido" ;
    VPB (Pres Ind Sg P1) => "into" ;
    VPB (Pres Ind Sg P2) => "entes" ;
    VPB (Pres Ind Sg P3) => "ente" ;
    VPB (Pres Ind Pl P1) => "entimos" ;
    VPB (Pres Ind Pl P2) => "entis" ;
    VPB (Pres Ind Pl P3) => "entem" ;
    VPB (Pres Sub Sg P1) => "inta" ;
    VPB (Pres Sub Sg P2) => "intas" ;
    VPB (Pres Sub Sg P3) => "inta" ;
    VPB (Pres Sub Pl P1) => "intamos" ;
    VPB (Pres Sub Pl P2) => "intais" ;
    VPB (Pres Sub Pl P3) => "intam" ;
    VPB (PretI Ind Sg P1) => "entia" ; --# notpresent
    VPB (PretI Ind Sg P2) => "entias" ; --# notpresent
    VPB (PretI Ind Sg P3) => "entia" ; --# notpresent
    VPB (PretI Ind Pl P1) => "entíamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => "entíeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => "entiam" ; --# notpresent
    VPB (PretI Sub Sg P1) => "entisse" ; --# notpresent
    VPB (PretI Sub Sg P2) => "entisses" ; --# notpresent
    VPB (PretI Sub Sg P3) => "entisse" ; --# notpresent
    VPB (PretI Sub Pl P1) => "entíssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => "entísseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => "entissem" ; --# notpresent
    VPB (MQPerf Sg P1) => "entira" ; --# notpresent
    VPB (MQPerf Sg P2) => "entiras" ; --# notpresent
    VPB (MQPerf Sg P3) => "entira" ; --# notpresent
    VPB (MQPerf Pl P1) => "entíramos" ; --# notpresent
    VPB (MQPerf Pl P2) => "entíreis" ; --# notpresent
    VPB (MQPerf Pl P3) => "entiram" ; --# notpresent
    VPB (PretP Sg P1) => "enti" ; --# notpresent
    VPB (PretP Sg P2) => "entiste" ; --# notpresent
    VPB (PretP Sg P3) => "entiu" ; --# notpresent
    VPB (PretP Pl P1) => "entimos" ; --# notpresent
    VPB (PretP Pl P2) => "entistes" ; --# notpresent
    VPB (PretP Pl P3) => "entiram" ; --# notpresent
    VPB (Fut Ind Sg P1) => "entirei" ; --# notpresent
    VPB (Fut Ind Sg P2) => "entirás" ; --# notpresent
    VPB (Fut Ind Sg P3) => "entirá" ; --# notpresent
    VPB (Fut Ind Pl P1) => "entiremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => "entireis" ; --# notpresent
    VPB (Fut Ind Pl P3) => "entirão" ; --# notpresent
    VPB (Fut Sub Sg P1) => "entir" ; --# notpresent
    VPB (Fut Sub Sg P2) => "entires" ; --# notpresent
    VPB (Fut Sub Sg P3) => "entir" ; --# notpresent
    VPB (Fut Sub Pl P1) => "entirmos" ; --# notpresent
    VPB (Fut Sub Pl P2) => "entirdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => "entirem" ; --# notpresent
    VPB (Cond Sg P1) => "entiria" ; --# notpresent
    VPB (Cond Sg P2) => "entirias" ; --# notpresent
    VPB (Cond Sg P3) => "entiria" ; --# notpresent
    VPB (Cond Pl P1) => "entiríamos" ; --# notpresent
    VPB (Cond Pl P2) => "entiríeis" ; --# notpresent
    VPB (Cond Pl P3) => "entiriam" ; --# notpresent
    VPB (Imper Sg P2) => "ente" ;
    VPB (Imper Sg P3) => "inta" ;
    VPB (Imper Pl P1) => "intamos" ;
    VPB (Imper Pl P2) => "enti" ;
    VPB (Imper Pl P3) => "intam" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper preferir_Besch : Str -> Verbum = \preferir ->
-- 57 | r47
  let pref_ = Predef.tk 4 preferir in
 {root = pref_ ;
  suff = table {
    VI Infn => "erir" ;
    VI Ger => "erindo" ;
    VI Part => "erido" ;
    VPB (Pres Ind Sg P1) => "iro" ;
    VPB (Pres Ind Sg P2) => "eres" ;
    VPB (Pres Ind Sg P3) => "ere" ;
    VPB (Pres Ind Pl P1) => "erimos" ;
    VPB (Pres Ind Pl P2) => "eris" ;
    VPB (Pres Ind Pl P3) => "erem" ;
    VPB (Pres Sub Sg P1) => "ira" ;
    VPB (Pres Sub Sg P2) => "iras" ;
    VPB (Pres Sub Sg P3) => "ira" ;
    VPB (Pres Sub Pl P1) => "iramos" ;
    VPB (Pres Sub Pl P2) => "irais" ;
    VPB (Pres Sub Pl P3) => "iram" ;
    VPB (PretI Ind Sg P1) => "eria" ; --# notpresent
    VPB (PretI Ind Sg P2) => "erias" ; --# notpresent
    VPB (PretI Ind Sg P3) => "eria" ; --# notpresent
    VPB (PretI Ind Pl P1) => "eríamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => "eríeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => "eriam" ; --# notpresent
    VPB (PretI Sub Sg P1) => "erisse" ; --# notpresent
    VPB (PretI Sub Sg P2) => "erisses" ; --# notpresent
    VPB (PretI Sub Sg P3) => "erisse" ; --# notpresent
    VPB (PretI Sub Pl P1) => "eríssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => "erísseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => "erissem" ; --# notpresent
    VPB (MQPerf Sg P1) => "erira" ; --# notpresent
    VPB (MQPerf Sg P2) => "eriras" ; --# notpresent
    VPB (MQPerf Sg P3) => "erira" ; --# notpresent
    VPB (MQPerf Pl P1) => "eríramos" ; --# notpresent
    VPB (MQPerf Pl P2) => "eríreis" ; --# notpresent
    VPB (MQPerf Pl P3) => "eriram" ; --# notpresent
    VPB (PretP Sg P1) => "eri" ; --# notpresent
    VPB (PretP Sg P2) => "eriste" ; --# notpresent
    VPB (PretP Sg P3) => "eriu" ; --# notpresent
    VPB (PretP Pl P1) => "erimos" ; --# notpresent
    VPB (PretP Pl P2) => "eristes" ; --# notpresent
    VPB (PretP Pl P3) => "eriram" ; --# notpresent
    VPB (Fut Ind Sg P1) => "erirei" ; --# notpresent
    VPB (Fut Ind Sg P2) => "erirás" ; --# notpresent
    VPB (Fut Ind Sg P3) => "erirá" ; --# notpresent
    VPB (Fut Ind Pl P1) => "eriremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => "erireis" ; --# notpresent
    VPB (Fut Ind Pl P3) => "erirão" ; --# notpresent
    VPB (Fut Sub Sg P1) => "erir" ; --# notpresent
    VPB (Fut Sub Sg P2) => "erires" ; --# notpresent
    VPB (Fut Sub Sg P3) => "erir" ; --# notpresent
    VPB (Fut Sub Pl P1) => "erirmos" ; --# notpresent
    VPB (Fut Sub Pl P2) => "erirdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => "erirem" ; --# notpresent
    VPB (Cond Sg P1) => "eriria" ; --# notpresent
    VPB (Cond Sg P2) => "eririas" ; --# notpresent
    VPB (Cond Sg P3) => "eriria" ; --# notpresent
    VPB (Cond Pl P1) => "eriríamos" ; --# notpresent
    VPB (Cond Pl P2) => "eriríeis" ; --# notpresent
    VPB (Cond Pl P3) => "eririam" ; --# notpresent
    VPB (Imper Sg P2) => "ere" ;
    VPB (Imper Sg P3) => "ira" ;
    VPB (Imper Pl P1) => "iramos" ;
    VPB (Imper Pl P2) => "eri" ;
    VPB (Imper Pl P3) => "iram" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper agredir_Besch : Str -> Verbum = \agredir ->
-- 58 | r48
  let agr_ = Predef.tk 4 agredir in
 {root = agr_ ;
  suff = table {
    VI Infn => "edir" ;
    VI Ger => "edindo" ;
    VI Part => "edido" ;
    VPB (Pres Ind Sg P1) => "ido" ;
    VPB (Pres Ind Sg P2) => "ides" ;
    VPB (Pres Ind Sg P3) => "ide" ;
    VPB (Pres Ind Pl P1) => "edimos" ;
    VPB (Pres Ind Pl P2) => "edis" ;
    VPB (Pres Ind Pl P3) => "idem" ;
    VPB (Pres Sub Sg P1) => "ida" ;
    VPB (Pres Sub Sg P2) => "idas" ;
    VPB (Pres Sub Sg P3) => "ida" ;
    VPB (Pres Sub Pl P1) => "idamos" ;
    VPB (Pres Sub Pl P2) => "idais" ;
    VPB (Pres Sub Pl P3) => "idam" ;
    VPB (PretI Ind Sg P1) => "edia" ; --# notpresent
    VPB (PretI Ind Sg P2) => "edias" ; --# notpresent
    VPB (PretI Ind Sg P3) => "edia" ; --# notpresent
    VPB (PretI Ind Pl P1) => "edíamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => "edíeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => "ediam" ; --# notpresent
    VPB (PretI Sub Sg P1) => "edisse" ; --# notpresent
    VPB (PretI Sub Sg P2) => "edisses" ; --# notpresent
    VPB (PretI Sub Sg P3) => "edisse" ; --# notpresent
    VPB (PretI Sub Pl P1) => "edíssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => "edísseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => "edissem" ; --# notpresent
    VPB (MQPerf Sg P1) => "edira" ; --# notpresent
    VPB (MQPerf Sg P2) => "ediras" ; --# notpresent
    VPB (MQPerf Sg P3) => "edira" ; --# notpresent
    VPB (MQPerf Pl P1) => "edíramos" ; --# notpresent
    VPB (MQPerf Pl P2) => "edíreis" ; --# notpresent
    VPB (MQPerf Pl P3) => "ediram" ; --# notpresent
    VPB (PretP Sg P1) => "edi" ; --# notpresent
    VPB (PretP Sg P2) => "ediste" ; --# notpresent
    VPB (PretP Sg P3) => "ediu" ; --# notpresent
    VPB (PretP Pl P1) => "edimos" ; --# notpresent
    VPB (PretP Pl P2) => "edistes" ; --# notpresent
    VPB (PretP Pl P3) => "ediram" ; --# notpresent
    VPB (Fut Ind Sg P1) => "edirei" ; --# notpresent
    VPB (Fut Ind Sg P2) => "edirás" ; --# notpresent
    VPB (Fut Ind Sg P3) => "edirá" ; --# notpresent
    VPB (Fut Ind Pl P1) => "ediremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => "edireis" ; --# notpresent
    VPB (Fut Ind Pl P3) => "edirão" ; --# notpresent
    VPB (Fut Sub Sg P1) => "edir" ; --# notpresent
    VPB (Fut Sub Sg P2) => "edires" ; --# notpresent
    VPB (Fut Sub Sg P3) => "edir" ; --# notpresent
    VPB (Fut Sub Pl P1) => "edirmos" ; --# notpresent
    VPB (Fut Sub Pl P2) => "edirdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => "edirem" ; --# notpresent
    VPB (Cond Sg P1) => "ediria" ; --# notpresent
    VPB (Cond Sg P2) => "edirias" ; --# notpresent
    VPB (Cond Sg P3) => "ediria" ; --# notpresent
    VPB (Cond Pl P1) => "ediríamos" ; --# notpresent
    VPB (Cond Pl P2) => "ediríeis" ; --# notpresent
    VPB (Cond Pl P3) => "ediriam" ; --# notpresent
    VPB (Imper Sg P2) => "ide" ;
    VPB (Imper Sg P3) => "ida" ;
    VPB (Imper Pl P1) => "idamos" ;
    VPB (Imper Pl P2) => "edi" ;
    VPB (Imper Pl P3) => "idam" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper dormir_Besch : Str -> Verbum = \dormir ->
-- 59 | r51
  let d_ = Predef.tk 5 dormir in
 {root = d_ ;
  suff = table {
    VI Infn => "ormir" ;
    VI Ger => "ormindo" ;
    VI Part => "ormido" ;
    VPB (Pres Ind Sg P1) => "urmo" ;
    VPB (Pres Ind Sg P2) => "ormes" ;
    VPB (Pres Ind Sg P3) => "orme" ;
    VPB (Pres Ind Pl P1) => "ormimos" ;
    VPB (Pres Ind Pl P2) => "ormis" ;
    VPB (Pres Ind Pl P3) => "ormem" ;
    VPB (Pres Sub Sg P1) => "urma" ;
    VPB (Pres Sub Sg P2) => "urmas" ;
    VPB (Pres Sub Sg P3) => "urma" ;
    VPB (Pres Sub Pl P1) => "urmamos" ;
    VPB (Pres Sub Pl P2) => "urmais" ;
    VPB (Pres Sub Pl P3) => "urmam" ;
    VPB (PretI Ind Sg P1) => "ormia" ; --# notpresent
    VPB (PretI Ind Sg P2) => "ormias" ; --# notpresent
    VPB (PretI Ind Sg P3) => "ormia" ; --# notpresent
    VPB (PretI Ind Pl P1) => "ormíamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => "ormíeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => "ormiam" ; --# notpresent
    VPB (PretI Sub Sg P1) => "ormisse" ; --# notpresent
    VPB (PretI Sub Sg P2) => "ormisses" ; --# notpresent
    VPB (PretI Sub Sg P3) => "ormisse" ; --# notpresent
    VPB (PretI Sub Pl P1) => "ormíssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => "ormísseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => "ormissem" ; --# notpresent
    VPB (MQPerf Sg P1) => "ormira" ; --# notpresent
    VPB (MQPerf Sg P2) => "ormiras" ; --# notpresent
    VPB (MQPerf Sg P3) => "ormira" ; --# notpresent
    VPB (MQPerf Pl P1) => "ormíramos" ; --# notpresent
    VPB (MQPerf Pl P2) => "ormíreis" ; --# notpresent
    VPB (MQPerf Pl P3) => "ormiram" ; --# notpresent
    VPB (PretP Sg P1) => "ormi" ; --# notpresent
    VPB (PretP Sg P2) => "ormiste" ; --# notpresent
    VPB (PretP Sg P3) => "ormiu" ; --# notpresent
    VPB (PretP Pl P1) => "ormimos" ; --# notpresent
    VPB (PretP Pl P2) => "ormistes" ; --# notpresent
    VPB (PretP Pl P3) => "ormiram" ; --# notpresent
    VPB (Fut Ind Sg P1) => "ormirei" ; --# notpresent
    VPB (Fut Ind Sg P2) => "ormirás" ; --# notpresent
    VPB (Fut Ind Sg P3) => "ormirá" ; --# notpresent
    VPB (Fut Ind Pl P1) => "ormiremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => "ormireis" ; --# notpresent
    VPB (Fut Ind Pl P3) => "ormirão" ; --# notpresent
    VPB (Fut Sub Sg P1) => "ormir" ; --# notpresent
    VPB (Fut Sub Sg P2) => "ormires" ; --# notpresent
    VPB (Fut Sub Sg P3) => "ormir" ; --# notpresent
    VPB (Fut Sub Pl P1) => "ormirmos" ; --# notpresent
    VPB (Fut Sub Pl P2) => "ormirdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => "ormirem" ; --# notpresent
    VPB (Cond Sg P1) => "ormiria" ; --# notpresent
    VPB (Cond Sg P2) => "ormirias" ; --# notpresent
    VPB (Cond Sg P3) => "ormiria" ; --# notpresent
    VPB (Cond Pl P1) => "ormiríamos" ; --# notpresent
    VPB (Cond Pl P2) => "ormiríeis" ; --# notpresent
    VPB (Cond Pl P3) => "ormiriam" ; --# notpresent
    VPB (Imper Sg P2) => "orme" ;
    VPB (Imper Sg P3) => "urma" ;
    VPB (Imper Pl P1) => "urmamos" ;
    VPB (Imper Pl P2) => "ormi" ;
    VPB (Imper Pl P3) => "urmam" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper polir_Besch : Str -> Verbum = \polir ->
-- 60 | r81
  let p_ = Predef.tk 4 polir in
 {root = p_ ;
  suff = table {
    VI Infn => "olir" ;
    VI Ger => "olindo" ;
    VI Part => "olido" ;
    VPB (Pres Ind Sg P1) => "ulo" ;
    VPB (Pres Ind Sg P2) => "ules" ;
    VPB (Pres Ind Sg P3) => "ule" ;
    VPB (Pres Ind Pl P1) => "olimos" ;
    VPB (Pres Ind Pl P2) => "olis" ;
    VPB (Pres Ind Pl P3) => "ulem" ;
    VPB (Pres Sub Sg P1) => "ula" ;
    VPB (Pres Sub Sg P2) => "ulas" ;
    VPB (Pres Sub Sg P3) => "ula" ;
    VPB (Pres Sub Pl P1) => "ulamos" ;
    VPB (Pres Sub Pl P2) => "ulais" ;
    VPB (Pres Sub Pl P3) => "ulam" ;
    VPB (PretI Ind Sg P1) => "olia" ; --# notpresent
    VPB (PretI Ind Sg P2) => "olias" ; --# notpresent
    VPB (PretI Ind Sg P3) => "olia" ; --# notpresent
    VPB (PretI Ind Pl P1) => "olíamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => "olíeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => "oliam" ; --# notpresent
    VPB (PretI Sub Sg P1) => "olisse" ; --# notpresent
    VPB (PretI Sub Sg P2) => "olisses" ; --# notpresent
    VPB (PretI Sub Sg P3) => "olisse" ; --# notpresent
    VPB (PretI Sub Pl P1) => "olíssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => "olísseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => "olissem" ; --# notpresent
    VPB (MQPerf Sg P1) => "olira" ; --# notpresent
    VPB (MQPerf Sg P2) => "oliras" ; --# notpresent
    VPB (MQPerf Sg P3) => "olira" ; --# notpresent
    VPB (MQPerf Pl P1) => "olíramos" ; --# notpresent
    VPB (MQPerf Pl P2) => "olíreis" ; --# notpresent
    VPB (MQPerf Pl P3) => "oliram" ; --# notpresent
    VPB (PretP Sg P1) => "oli" ; --# notpresent
    VPB (PretP Sg P2) => "oliste" ; --# notpresent
    VPB (PretP Sg P3) => "oliu" ; --# notpresent
    VPB (PretP Pl P1) => "olimos" ; --# notpresent
    VPB (PretP Pl P2) => "olistes" ; --# notpresent
    VPB (PretP Pl P3) => "oliram" ; --# notpresent
    VPB (Fut Ind Sg P1) => "olirei" ; --# notpresent
    VPB (Fut Ind Sg P2) => "olirás" ; --# notpresent
    VPB (Fut Ind Sg P3) => "olirá" ; --# notpresent
    VPB (Fut Ind Pl P1) => "oliremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => "olireis" ; --# notpresent
    VPB (Fut Ind Pl P3) => "olirão" ; --# notpresent
    VPB (Fut Sub Sg P1) => "olir" ; --# notpresent
    VPB (Fut Sub Sg P2) => "olires" ; --# notpresent
    VPB (Fut Sub Sg P3) => "olir" ; --# notpresent
    VPB (Fut Sub Pl P1) => "olirmos" ; --# notpresent
    VPB (Fut Sub Pl P2) => "olirdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => "olirem" ; --# notpresent
    VPB (Cond Sg P1) => "oliria" ; --# notpresent
    VPB (Cond Sg P2) => "olirias" ; --# notpresent
    VPB (Cond Sg P3) => "oliria" ; --# notpresent
    VPB (Cond Pl P1) => "oliríamos" ; --# notpresent
    VPB (Cond Pl P2) => "oliríeis" ; --# notpresent
    VPB (Cond Pl P3) => "oliriam" ; --# notpresent
    VPB (Imper Sg P2) => "ule" ;
    VPB (Imper Sg P3) => "ula" ;
    VPB (Imper Pl P1) => "ulamos" ;
    VPB (Imper Pl P2) => "oli" ;
    VPB (Imper Pl P3) => "ulam" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper acudir_Besch : Str -> Verbum = \acudir ->
-- 61 | r53
  let ac_ = Predef.tk 4 acudir in
 {root = ac_ ;
  suff = table {
    VI Infn => "udir" ;
    VI Ger => "udindo" ;
    VI Part => "udido" ;
    VPB (Pres Ind Sg P1) => "udo" ;
    VPB (Pres Ind Sg P2) => "odes" ;
    VPB (Pres Ind Sg P3) => "ode" ;
    VPB (Pres Ind Pl P1) => "udimos" ;
    VPB (Pres Ind Pl P2) => "udis" ;
    VPB (Pres Ind Pl P3) => "odem" ;
    VPB (Pres Sub Sg P1) => "uda" ;
    VPB (Pres Sub Sg P2) => "udas" ;
    VPB (Pres Sub Sg P3) => "uda" ;
    VPB (Pres Sub Pl P1) => "udamos" ;
    VPB (Pres Sub Pl P2) => "udais" ;
    VPB (Pres Sub Pl P3) => "udam" ;
    VPB (PretI Ind Sg P1) => "udia" ; --# notpresent
    VPB (PretI Ind Sg P2) => "udias" ; --# notpresent
    VPB (PretI Ind Sg P3) => "udia" ; --# notpresent
    VPB (PretI Ind Pl P1) => "udíamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => "udíeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => "udiam" ; --# notpresent
    VPB (PretI Sub Sg P1) => "udisse" ; --# notpresent
    VPB (PretI Sub Sg P2) => "udisses" ; --# notpresent
    VPB (PretI Sub Sg P3) => "udisse" ; --# notpresent
    VPB (PretI Sub Pl P1) => "udíssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => "udísseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => "udissem" ; --# notpresent
    VPB (MQPerf Sg P1) => "udira" ; --# notpresent
    VPB (MQPerf Sg P2) => "udiras" ; --# notpresent
    VPB (MQPerf Sg P3) => "udira" ; --# notpresent
    VPB (MQPerf Pl P1) => "udíramos" ; --# notpresent
    VPB (MQPerf Pl P2) => "udíreis" ; --# notpresent
    VPB (MQPerf Pl P3) => "udiram" ; --# notpresent
    VPB (PretP Sg P1) => "udi" ; --# notpresent
    VPB (PretP Sg P2) => "udiste" ; --# notpresent
    VPB (PretP Sg P3) => "udiu" ; --# notpresent
    VPB (PretP Pl P1) => "udimos" ; --# notpresent
    VPB (PretP Pl P2) => "udistes" ; --# notpresent
    VPB (PretP Pl P3) => "udiram" ; --# notpresent
    VPB (Fut Ind Sg P1) => "udirei" ; --# notpresent
    VPB (Fut Ind Sg P2) => "udirás" ; --# notpresent
    VPB (Fut Ind Sg P3) => "udirá" ; --# notpresent
    VPB (Fut Ind Pl P1) => "udiremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => "udireis" ; --# notpresent
    VPB (Fut Ind Pl P3) => "udirão" ; --# notpresent
    VPB (Fut Sub Sg P1) => "udir" ; --# notpresent
    VPB (Fut Sub Sg P2) => "udires" ; --# notpresent
    VPB (Fut Sub Sg P3) => "udir" ; --# notpresent
    VPB (Fut Sub Pl P1) => "udirmos" ; --# notpresent
    VPB (Fut Sub Pl P2) => "udirdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => "udirem" ; --# notpresent
    VPB (Cond Sg P1) => "udiria" ; --# notpresent
    VPB (Cond Sg P2) => "udirias" ; --# notpresent
    VPB (Cond Sg P3) => "udiria" ; --# notpresent
    VPB (Cond Pl P1) => "udiríamos" ; --# notpresent
    VPB (Cond Pl P2) => "udiríeis" ; --# notpresent
    VPB (Cond Pl P3) => "udiriam" ; --# notpresent
    VPB (Imper Sg P2) => "ode" ;
    VPB (Imper Sg P3) => "uda" ;
    VPB (Imper Pl P1) => "udamos" ;
    VPB (Imper Pl P2) => "udi" ;
    VPB (Imper Pl P3) => "udam" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper fugir_Besch : Str -> Verbum = \fugir ->
-- 62 | r54
  let f_ = Predef.tk 4 fugir in
 {root = f_ ;
  suff = table {
    VI Infn => "ugir" ;
    VI Ger => "ugindo" ;
    VI Part => "ugido" ;
    VPB (Pres Ind Sg P1) => "ujo" ;
    VPB (Pres Ind Sg P2) => "oges" ;
    VPB (Pres Ind Sg P3) => "oge" ;
    VPB (Pres Ind Pl P1) => "ugimos" ;
    VPB (Pres Ind Pl P2) => "ugis" ;
    VPB (Pres Ind Pl P3) => "ogem" ;
    VPB (Pres Sub Sg P1) => "uja" ;
    VPB (Pres Sub Sg P2) => "ujas" ;
    VPB (Pres Sub Sg P3) => "uja" ;
    VPB (Pres Sub Pl P1) => "ujamos" ;
    VPB (Pres Sub Pl P2) => "ujais" ;
    VPB (Pres Sub Pl P3) => "ujam" ;
    VPB (PretI Ind Sg P1) => "ugia" ; --# notpresent
    VPB (PretI Ind Sg P2) => "ugias" ; --# notpresent
    VPB (PretI Ind Sg P3) => "ugia" ; --# notpresent
    VPB (PretI Ind Pl P1) => "ugíamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => "ugíeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => "ugiam" ; --# notpresent
    VPB (PretI Sub Sg P1) => "ugisse" ; --# notpresent
    VPB (PretI Sub Sg P2) => "ugisses" ; --# notpresent
    VPB (PretI Sub Sg P3) => "ugisse" ; --# notpresent
    VPB (PretI Sub Pl P1) => "ugíssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => "ugísseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => "ugissem" ; --# notpresent
    VPB (MQPerf Sg P1) => "ugira" ; --# notpresent
    VPB (MQPerf Sg P2) => "ugiras" ; --# notpresent
    VPB (MQPerf Sg P3) => "ugira" ; --# notpresent
    VPB (MQPerf Pl P1) => "ugíramos" ; --# notpresent
    VPB (MQPerf Pl P2) => "ugíreis" ; --# notpresent
    VPB (MQPerf Pl P3) => "ugiram" ; --# notpresent
    VPB (PretP Sg P1) => "ugi" ; --# notpresent
    VPB (PretP Sg P2) => "ugiste" ; --# notpresent
    VPB (PretP Sg P3) => "ugiu" ; --# notpresent
    VPB (PretP Pl P1) => "ugimos" ; --# notpresent
    VPB (PretP Pl P2) => "ugistes" ; --# notpresent
    VPB (PretP Pl P3) => "ugiram" ; --# notpresent
    VPB (Fut Ind Sg P1) => "ugirei" ; --# notpresent
    VPB (Fut Ind Sg P2) => "ugirás" ; --# notpresent
    VPB (Fut Ind Sg P3) => "ugirá" ; --# notpresent
    VPB (Fut Ind Pl P1) => "ugiremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => "ugereis" ; --# notpresent
    VPB (Fut Ind Pl P3) => "ugirão" ; --# notpresent
    VPB (Fut Sub Sg P1) => "ugir" ; --# notpresent
    VPB (Fut Sub Sg P2) => "ugires" ; --# notpresent
    VPB (Fut Sub Sg P3) => "ugir" ; --# notpresent
    VPB (Fut Sub Pl P1) => "ugirmos" ; --# notpresent
    VPB (Fut Sub Pl P2) => "ugirdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => "ugirem" ; --# notpresent
    VPB (Cond Sg P1) => "ugiria" ; --# notpresent
    VPB (Cond Sg P2) => "ugirias" ; --# notpresent
    VPB (Cond Sg P3) => "ugiria" ; --# notpresent
    VPB (Cond Pl P1) => "ugiríamos" ; --# notpresent
    VPB (Cond Pl P2) => "ugiríeis" ; --# notpresent
    VPB (Cond Pl P3) => "ugiriam" ; --# notpresent
    VPB (Imper Sg P2) => "oge" ;
    VPB (Imper Sg P3) => "uja" ;
    VPB (Imper Pl P1) => "ujamos" ;
    VPB (Imper Pl P2) => "ugi" ;
    VPB (Imper Pl P3) => "ujam" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper frigir_Besch : Str -> Verbum = \frigir ->
-- 63 | r28
  let fr_ = Predef.tk 4 frigir in
 {root = fr_ ;
  suff = table {
    VI Infn => "igir" ;
    VI Ger => "igindo" ;
    VI Part => "igido" ;
    VPB (Pres Ind Sg P1) => "ijo" ;
    VPB (Pres Ind Sg P2) => "eges" ;
    VPB (Pres Ind Sg P3) => "ege" ;
    VPB (Pres Ind Pl P1) => "igimos" ;
    VPB (Pres Ind Pl P2) => "igis" ;
    VPB (Pres Ind Pl P3) => "egem" ;
    VPB (Pres Sub Sg P1) => "ija" ;
    VPB (Pres Sub Sg P2) => "ijas" ;
    VPB (Pres Sub Sg P3) => "ija" ;
    VPB (Pres Sub Pl P1) => "ijamos" ;
    VPB (Pres Sub Pl P2) => "ijais" ;
    VPB (Pres Sub Pl P3) => "ijam" ;
    VPB (PretI Ind Sg P1) => "igia" ; --# notpresent
    VPB (PretI Ind Sg P2) => "igias" ; --# notpresent
    VPB (PretI Ind Sg P3) => "igia" ; --# notpresent
    VPB (PretI Ind Pl P1) => "igíamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => "igíeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => "igiam" ; --# notpresent
    VPB (PretI Sub Sg P1) => "igisse" ; --# notpresent
    VPB (PretI Sub Sg P2) => "igisses" ; --# notpresent
    VPB (PretI Sub Sg P3) => "igisse" ; --# notpresent
    VPB (PretI Sub Pl P1) => "igíssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => "igísseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => "igissem" ; --# notpresent
    VPB (MQPerf Sg P1) => "igira" ; --# notpresent
    VPB (MQPerf Sg P2) => "igiras" ; --# notpresent
    VPB (MQPerf Sg P3) => "igira" ; --# notpresent
    VPB (MQPerf Pl P1) => "igíramos" ; --# notpresent
    VPB (MQPerf Pl P2) => "igíreis" ; --# notpresent
    VPB (MQPerf Pl P3) => "igiram" ; --# notpresent
    VPB (PretP Sg P1) => "igi" ; --# notpresent
    VPB (PretP Sg P2) => "igiste" ; --# notpresent
    VPB (PretP Sg P3) => "igiu" ; --# notpresent
    VPB (PretP Pl P1) => "igimos" ; --# notpresent
    VPB (PretP Pl P2) => "igistes" ; --# notpresent
    VPB (PretP Pl P3) => "igiam" ; --# notpresent
    VPB (Fut Ind Sg P1) => "igirei" ; --# notpresent
    VPB (Fut Ind Sg P2) => "igirás" ; --# notpresent
    VPB (Fut Ind Sg P3) => "igirá" ; --# notpresent
    VPB (Fut Ind Pl P1) => "igiremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => "igireis" ; --# notpresent
    VPB (Fut Ind Pl P3) => "igirão" ; --# notpresent
    VPB (Fut Sub Sg P1) => "igir" ; --# notpresent
    VPB (Fut Sub Sg P2) => "igires" ; --# notpresent
    VPB (Fut Sub Sg P3) => "igir" ; --# notpresent
    VPB (Fut Sub Pl P1) => "igirmos" ; --# notpresent
    VPB (Fut Sub Pl P2) => "igirdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => "igirem" ; --# notpresent
    VPB (Cond Sg P1) => "igiria" ; --# notpresent
    VPB (Cond Sg P2) => "igirias" ; --# notpresent
    VPB (Cond Sg P3) => "igiria" ; --# notpresent
    VPB (Cond Pl P1) => "igiríamos" ; --# notpresent
    VPB (Cond Pl P2) => "igiríeis" ; --# notpresent
    VPB (Cond Pl P3) => "igiriam" ; --# notpresent
    VPB (Imper Sg P2) => "ege" ;
    VPB (Imper Sg P3) => "ija" ;
    VPB (Imper Pl P1) => "ijamos" ;
    VPB (Imper Pl P2) => "igi" ;
    VPB (Imper Pl P3) => "ijam" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper divergir_Besch : Str -> Verbum = \divergir ->
-- 64 | r49
  let div_ = Predef.tk 5 divergir in
 {root = div_ ;
  suff = table {
    VI Infn => "ergir" ;
    VI Ger => "ergindo" ;
    VI Part => "ergido" ;
    VPB (Pres Ind Sg P1) => "irjo" ;
    VPB (Pres Ind Sg P2) => "erges" ;
    VPB (Pres Ind Sg P3) => "erge" ;
    VPB (Pres Ind Pl P1) => "ergimos" ;
    VPB (Pres Ind Pl P2) => "ergis" ;
    VPB (Pres Ind Pl P3) => "ergem" ;
    VPB (Pres Sub Sg P1) => "irja" ;
    VPB (Pres Sub Sg P2) => "irjas" ;
    VPB (Pres Sub Sg P3) => "irja" ;
    VPB (Pres Sub Pl P1) => "irjamos" ;
    VPB (Pres Sub Pl P2) => "irjais" ;
    VPB (Pres Sub Pl P3) => "irjam" ;
    VPB (PretI Ind Sg P1) => "ergia" ; --# notpresent
    VPB (PretI Ind Sg P2) => "ergias" ; --# notpresent
    VPB (PretI Ind Sg P3) => "ergia" ; --# notpresent
    VPB (PretI Ind Pl P1) => "ergíamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => "ergíeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => "ergiam" ; --# notpresent
    VPB (PretI Sub Sg P1) => "ergisse" ; --# notpresent
    VPB (PretI Sub Sg P2) => "ergisses" ; --# notpresent
    VPB (PretI Sub Sg P3) => "ergisse" ; --# notpresent
    VPB (PretI Sub Pl P1) => "ergíssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => "ergísseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => "ergissem" ; --# notpresent
    VPB (MQPerf Sg P1) => "ergira" ; --# notpresent
    VPB (MQPerf Sg P2) => "ergiras" ; --# notpresent
    VPB (MQPerf Sg P3) => "ergira" ; --# notpresent
    VPB (MQPerf Pl P1) => "ergíramos" ; --# notpresent
    VPB (MQPerf Pl P2) => "ergíreis" ; --# notpresent
    VPB (MQPerf Pl P3) => "ergiram" ; --# notpresent
    VPB (PretP Sg P1) => "ergi" ; --# notpresent
    VPB (PretP Sg P2) => "ergiste" ; --# notpresent
    VPB (PretP Sg P3) => "ergiu" ; --# notpresent
    VPB (PretP Pl P1) => "ergimos" ; --# notpresent
    VPB (PretP Pl P2) => "ergistes" ; --# notpresent
    VPB (PretP Pl P3) => "ergiram" ; --# notpresent
    VPB (Fut Ind Sg P1) => "ergirei" ; --# notpresent
    VPB (Fut Ind Sg P2) => "ergirás" ; --# notpresent
    VPB (Fut Ind Sg P3) => "ergirá" ; --# notpresent
    VPB (Fut Ind Pl P1) => "ergiremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => "ergireis" ; --# notpresent
    VPB (Fut Ind Pl P3) => "ergirão" ; --# notpresent
    VPB (Fut Sub Sg P1) => "ergir" ; --# notpresent
    VPB (Fut Sub Sg P2) => "ergires" ; --# notpresent
    VPB (Fut Sub Sg P3) => "ergir" ; --# notpresent
    VPB (Fut Sub Pl P1) => "ergirmos" ; --# notpresent
    VPB (Fut Sub Pl P2) => "ergirdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => "ergirem" ; --# notpresent
    VPB (Cond Sg P1) => "ergiria" ; --# notpresent
    VPB (Cond Sg P2) => "ergirias" ; --# notpresent
    VPB (Cond Sg P3) => "ergiria" ; --# notpresent
    VPB (Cond Pl P1) => "ergiríamos" ; --# notpresent
    VPB (Cond Pl P2) => "ergiríeis" ; --# notpresent
    VPB (Cond Pl P3) => "ergiriam" ; --# notpresent
    VPB (Imper Sg P2) => "erge" ;
    VPB (Imper Sg P3) => "irja" ;
    VPB (Imper Pl P1) => "irjamos" ;
    VPB (Imper Pl P2) => "ergi" ;
    VPB (Imper Pl P3) => "irjam" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper refletir_Besch : Str -> Verbum = \refletir ->
-- 65 | r47
  let refl_ = Predef.tk 4 refletir in
 {root = refl_ ;
  suff = table {
    VI Infn => vars "etir" "ectir" ;
    VI Ger => vars "etindo" "ectindo" ;
    VI Part => vars "etido" "ectido" ;
    VPB (Pres Ind Sg P1) => "ito" ;
    VPB (Pres Ind Sg P2) => vars "etes" "ectes" ;
    VPB (Pres Ind Sg P3) => vars "ete" "ecte" ;
    VPB (Pres Ind Pl P1) => vars "etimos" "ectimos" ;
    VPB (Pres Ind Pl P2) => vars "etis" "ectis" ;
    VPB (Pres Ind Pl P3) => vars "etem" "ectem" ;
    VPB (Pres Sub Sg P1) => "ita" ;
    VPB (Pres Sub Sg P2) => "itas" ;
    VPB (Pres Sub Sg P3) => "ita" ;
    VPB (Pres Sub Pl P1) => "itamos" ;
    VPB (Pres Sub Pl P2) => "itais" ;
    VPB (Pres Sub Pl P3) => "itam" ;
    VPB (PretI Ind Sg P1) => vars "etia" "ectia" ; --# notpresent
    VPB (PretI Ind Sg P2) => vars "etias" "ectias" ; --# notpresent
    VPB (PretI Ind Sg P3) => vars "etia" "ectia" ; --# notpresent
    VPB (PretI Ind Pl P1) => vars "etíamos" "ectíamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => vars "etíeis" "ectíeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => vars "etiam" "ectiam" ; --# notpresent
    VPB (PretI Sub Sg P1) => vars "etisse" "ectisse" ; --# notpresent
    VPB (PretI Sub Sg P2) => vars "etisses" "ectisses" ; --# notpresent
    VPB (PretI Sub Sg P3) => vars "etisse" "ectisse" ; --# notpresent
    VPB (PretI Sub Pl P1) => vars "etíssemos" "ectíssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => vars "etísseis" "ectísseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => vars "etissem" "ectissem" ; --# notpresent
    VPB (MQPerf Sg P1) => vars "etira" "ectira" ; --# notpresent
    VPB (MQPerf Sg P2) => vars "etiras" "ectiras" ; --# notpresent
    VPB (MQPerf Sg P3) => vars "etira" "ectira" ; --# notpresent
    VPB (MQPerf Pl P1) => vars "etíramos" "ectíramos" ; --# notpresent
    VPB (MQPerf Pl P2) => vars "etíreis" "ectíreis" ; --# notpresent
    VPB (MQPerf Pl P3) => vars "etiram" "ectiram" ; --# notpresent
    VPB (PretP Sg P1) => vars "eti" "ecti" ; --# notpresent
    VPB (PretP Sg P2) => vars "etiste" "ectiste" ; --# notpresent
    VPB (PretP Sg P3) => vars "etiu" "ectiu" ; --# notpresent
    VPB (PretP Pl P1) => vars "etimos" "ectimos" ; --# notpresent
    VPB (PretP Pl P2) => vars "etistes" "ectistes" ; --# notpresent
    VPB (PretP Pl P3) => vars "etiram" "ectiram" ; --# notpresent
    VPB (Fut Ind Sg P1) => vars "etirei" "ectirei" ; --# notpresent
    VPB (Fut Ind Sg P2) => vars "etirás" "ectirás" ; --# notpresent
    VPB (Fut Ind Sg P3) => vars "etirá" "ectirá" ; --# notpresent
    VPB (Fut Ind Pl P1) => vars "etiremos" "ectiremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => vars "etireis" "ectireis" ; --# notpresent
    VPB (Fut Ind Pl P3) => vars "etirão" "ectirão" ; --# notpresent
    VPB (Fut Sub Sg P1) => vars "etir" "ectir" ; --# notpresent
    VPB (Fut Sub Sg P2) => vars "etires" "ectires" ; --# notpresent
    VPB (Fut Sub Sg P3) => vars "etir" "ectir" ; --# notpresent
    VPB (Fut Sub Pl P1) => vars "etirmos" "ectirmos" ; --# notpresent
    VPB (Fut Sub Pl P2) => vars "etirdes" "ectirdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => vars "etirem" "ectirem" ; --# notpresent
    VPB (Cond Sg P1) => vars "etiria" "ectiria" ; --# notpresent
    VPB (Cond Sg P2) => vars "etirias" "ectirias" ; --# notpresent
    VPB (Cond Sg P3) => vars "etiria" "ectiria" ; --# notpresent
    VPB (Cond Pl P1) => vars "etiríamos" "ectiríamos" ; --# notpresent
    VPB (Cond Pl P2) => vars "etiríeis" "ectiríeis" ; --# notpresent
    VPB (Cond Pl P3) => vars "etiriam" "ectiriam" ; --# notpresent
    VPB (Imper Sg P2) => vars "ete" "ecte" ;
    VPB (Imper Sg P3) => "ita" ;
    VPB (Imper Pl P1) => "itamos" ;
    VPB (Imper Pl P2) => vars "eti" "ecti" ;
    VPB (Imper Pl P3) => "itram" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper ir_Besch : Str -> Verbum = \ir ->
-- 66 | r53
  let x_ = Predef.tk 2 ir in
 {root = x_ ;
  suff = table {
    VI Infn => "ir" ;
    VI Ger => "indo" ;
    VI Part => "ido" ;
    VPB (Pres Ind Sg P1) => "vou" ;
    VPB (Pres Ind Sg P2) => "vais" ;
    VPB (Pres Ind Sg P3) => "vai" ;
    VPB (Pres Ind Pl P1) => vars "vamos" "imos" ;
    VPB (Pres Ind Pl P2) => vars "ides" "vades" ;
    VPB (Pres Ind Pl P3) => "vão" ;
    VPB (Pres Sub Sg P1) => "vá" ;
    VPB (Pres Sub Sg P2) => "vás" ;
    VPB (Pres Sub Sg P3) => "vá" ;
    VPB (Pres Sub Pl P1) => "vamos" ;
    VPB (Pres Sub Pl P2) => "vades" ;
    VPB (Pres Sub Pl P3) => "vão" ;
    VPB (PretI Ind Sg P1) => "ia" ; --# notpresent
    VPB (PretI Ind Sg P2) => "ias" ; --# notpresent
    VPB (PretI Ind Sg P3) => "ia" ; --# notpresent
    VPB (PretI Ind Pl P1) => "íamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => "íeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => "iam" ; --# notpresent
    VPB (PretI Sub Sg P1) => "fosse" ; --# notpresent
    VPB (PretI Sub Sg P2) => "fosses" ; --# notpresent
    VPB (PretI Sub Sg P3) => "fosse" ; --# notpresent
    VPB (PretI Sub Pl P1) => "fôssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => "fôsseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => "fossem" ; --# notpresent
    VPB (MQPerf Sg P1) => "foram" ; --# notpresent
    VPB (MQPerf Sg P2) => "foras" ; --# notpresent
    VPB (MQPerf Sg P3) => "fora" ; --# notpresent
    VPB (MQPerf Pl P1) => "fôramos" ; --# notpresent
    VPB (MQPerf Pl P2) => "fôreis" ; --# notpresent
    VPB (MQPerf Pl P3) => "foram" ; --# notpresent
    VPB (PretP Sg P1) => "fui" ; --# notpresent
    VPB (PretP Sg P2) => "foste" ; --# notpresent
    VPB (PretP Sg P3) => "foi" ; --# notpresent
    VPB (PretP Pl P1) => "fomos" ; --# notpresent
    VPB (PretP Pl P2) => "fostes" ; --# notpresent
    VPB (PretP Pl P3) => "foram" ; --# notpresent
    VPB (Fut Ind Sg P1) => "irei" ; --# notpresent
    VPB (Fut Ind Sg P2) => "irás" ; --# notpresent
    VPB (Fut Ind Sg P3) => "irá" ; --# notpresent
    VPB (Fut Ind Pl P1) => "iremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => "ireis" ; --# notpresent
    VPB (Fut Ind Pl P3) => "irão" ; --# notpresent
    VPB (Fut Sub Sg P1) => "for" ; --# notpresent
    VPB (Fut Sub Sg P2) => "fores" ; --# notpresent
    VPB (Fut Sub Sg P3) => "for" ; --# notpresent
    VPB (Fut Sub Pl P1) => "formos" ; --# notpresent
    VPB (Fut Sub Pl P2) => "fordes" ; --# notpresent
    VPB (Fut Sub Pl P3) => "forem" ; --# notpresent
    VPB (Cond Sg P1) => "iria" ; --# notpresent
    VPB (Cond Sg P2) => "irias" ; --# notpresent
    VPB (Cond Sg P3) => "iria" ; --# notpresent
    VPB (Cond Pl P1) => "iríamos" ; --# notpresent
    VPB (Cond Pl P2) => "iríeis" ; --# notpresent
    VPB (Cond Pl P3) => "iriam" ; --# notpresent
    VPB (Imper Sg P2) => "vai" ;
    VPB (Imper Sg P3) => "vá" ;
    VPB (Imper Pl P1) => "vamos" ;
    VPB (Imper Pl P2) => "ide" ;
    VPB (Imper Pl P3) => "vão" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper vir_Besch : Str -> Verbum = \vir ->
-- 67 | r63
  let v_ = Predef.tk 2 vir in
 {root = v_ ;
  suff = table {
    VI Infn => "ir" ;
    VI Ger => "indo" ;
    VI Part => "indo" ;
    VPB (Pres Ind Sg P1) => "enho" ;
    VPB (Pres Ind Sg P2) => "ens" ;
    VPB (Pres Ind Sg P3) => "em" ;
    VPB (Pres Ind Pl P1) => "imos" ;
    VPB (Pres Ind Pl P2) => "indes" ;
    VPB (Pres Ind Pl P3) => "êm" ;
    VPB (Pres Sub Sg P1) => "enha" ;
    VPB (Pres Sub Sg P2) => "enhas" ;
    VPB (Pres Sub Sg P3) => "enha" ;
    VPB (Pres Sub Pl P1) => "enhamos" ;
    VPB (Pres Sub Pl P2) => "enhais" ;
    VPB (Pres Sub Pl P3) => "enham" ;
    VPB (PretI Ind Sg P1) => "inha" ; --# notpresent
    VPB (PretI Ind Sg P2) => "inhas" ; --# notpresent
    VPB (PretI Ind Sg P3) => "inha" ; --# notpresent
    VPB (PretI Ind Pl P1) => "ínhamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => "ínheis" ; --# notpresent
    VPB (PretI Ind Pl P3) => "inham" ; --# notpresent
    VPB (PretI Sub Sg P1) => "iesse" ; --# notpresent
    VPB (PretI Sub Sg P2) => "iesses" ; --# notpresent
    VPB (PretI Sub Sg P3) => "iesse" ; --# notpresent
    VPB (PretI Sub Pl P1) => "iéssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => "iésseos" ; --# notpresent
    VPB (PretI Sub Pl P3) => "iessem" ; --# notpresent
    VPB (MQPerf Sg P1) => "iera" ; --# notpresent
    VPB (MQPerf Sg P2) => "ieras" ; --# notpresent
    VPB (MQPerf Sg P3) => "iera" ; --# notpresent
    VPB (MQPerf Pl P1) => "iéramos" ; --# notpresent
    VPB (MQPerf Pl P2) => "iéreis" ; --# notpresent
    VPB (MQPerf Pl P3) => "ieram" ; --# notpresent
    VPB (PretP Sg P1) => "im" ; --# notpresent
    VPB (PretP Sg P2) => "ieste" ; --# notpresent
    VPB (PretP Sg P3) => "eio" ; --# notpresent
    VPB (PretP Pl P1) => "iemos" ; --# notpresent
    VPB (PretP Pl P2) => "iestes" ; --# notpresent
    VPB (PretP Pl P3) => "ieram" ; --# notpresent
    VPB (Fut Ind Sg P1) => "irei" ; --# notpresent
    VPB (Fut Ind Sg P2) => "irás" ; --# notpresent
    VPB (Fut Ind Sg P3) => "irá" ; --# notpresent
    VPB (Fut Ind Pl P1) => "iremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => "ireis" ; --# notpresent
    VPB (Fut Ind Pl P3) => "irão" ; --# notpresent
    VPB (Fut Sub Sg P1) => "ier" ; --# notpresent
    VPB (Fut Sub Sg P2) => "ieres" ; --# notpresent
    VPB (Fut Sub Sg P3) => "ier" ; --# notpresent
    VPB (Fut Sub Pl P1) => "iermos" ; --# notpresent
    VPB (Fut Sub Pl P2) => "ierdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => "ierem" ; --# notpresent
    VPB (Cond Sg P1) => "iria" ; --# notpresent
    VPB (Cond Sg P2) => "irias" ; --# notpresent
    VPB (Cond Sg P3) => "iria" ; --# notpresent
    VPB (Cond Pl P1) => "iríamos" ; --# notpresent
    VPB (Cond Pl P2) => "iríeis" ; --# notpresent
    VPB (Cond Pl P3) => "iriam" ; --# notpresent
    VPB (Imper Sg P2) => "em" ;
    VPB (Imper Sg P3) => "enha" ;
    VPB (Imper Pl P1) => "enhamos" ;
    VPB (Imper Pl P2) => "inde" ;
    VPB (Imper Pl P3) => "enham" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper sair_Besch : Str -> Verbum = \sair ->
-- 68 | r42
  let sa_ = Predef.tk 2 sair in
 {root = sa_ ;
  suff = table {
    VI Infn => "ir" ;
    VI Ger => "indo" ;
    VI Part => "ído" ;
    VPB (Pres Ind Sg P1) => "io" ;
    VPB (Pres Ind Sg P2) => "is" ;
    VPB (Pres Ind Sg P3) => "i" ;
    VPB (Pres Ind Pl P1) => "ímos" ;
    VPB (Pres Ind Pl P2) => "ís" ;
    VPB (Pres Ind Pl P3) => "em" ;
    VPB (Pres Sub Sg P1) => "ia" ;
    VPB (Pres Sub Sg P2) => "ias" ;
    VPB (Pres Sub Sg P3) => "ia" ;
    VPB (Pres Sub Pl P1) => "iamos" ;
    VPB (Pres Sub Pl P2) => "iais" ;
    VPB (Pres Sub Pl P3) => "iam" ;
    VPB (PretI Ind Sg P1) => "ía" ; --# notpresent
    VPB (PretI Ind Sg P2) => "ías" ; --# notpresent
    VPB (PretI Ind Sg P3) => "ía" ; --# notpresent
    VPB (PretI Ind Pl P1) => "íamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => "íeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => "íam" ; --# notpresent
    VPB (PretI Sub Sg P1) => "ísse" ; --# notpresent
    VPB (PretI Sub Sg P2) => "ísses" ; --# notpresent
    VPB (PretI Sub Sg P3) => "ísse" ; --# notpresent
    VPB (PretI Sub Pl P1) => "íssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => "ísseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => "íssem" ; --# notpresent
    VPB (MQPerf Sg P1) => "íra" ; --# notpresent
    VPB (MQPerf Sg P2) => "íras" ; --# notpresent
    VPB (MQPerf Sg P3) => "íra" ; --# notpresent
    VPB (MQPerf Pl P1) => "íramos" ; --# notpresent
    VPB (MQPerf Pl P2) => "íreis" ; --# notpresent
    VPB (MQPerf Pl P3) => "íram" ; --# notpresent
    VPB (PretP Sg P1) => "í" ; --# notpresent
    VPB (PretP Sg P2) => "íste" ; --# notpresent
    VPB (PretP Sg P3) => "iu" ; --# notpresent
    VPB (PretP Pl P1) => "ímos" ; --# notpresent
    VPB (PretP Pl P2) => "ístes" ; --# notpresent
    VPB (PretP Pl P3) => "íram" ; --# notpresent
    VPB (Fut Ind Sg P1) => "irirei" ; --# notpresent
    VPB (Fut Ind Sg P2) => "irás" ; --# notpresent
    VPB (Fut Ind Sg P3) => "irá" ; --# notpresent
    VPB (Fut Ind Pl P1) => "iremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => "ireis" ; --# notpresent
    VPB (Fut Ind Pl P3) => "irão" ; --# notpresent
    VPB (Fut Sub Sg P1) => "ir" ; --# notpresent
    VPB (Fut Sub Sg P2) => "íres" ; --# notpresent
    VPB (Fut Sub Sg P3) => "ir" ; --# notpresent
    VPB (Fut Sub Pl P1) => "írmos" ; --# notpresent
    VPB (Fut Sub Pl P2) => "irdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => nonExist ; --# notpresent
    VPB (Cond Sg P1) => "iria" ; --# notpresent
    VPB (Cond Sg P2) => "irias" ; --# notpresent
    VPB (Cond Sg P3) => "iria" ; --# notpresent
    VPB (Cond Pl P1) => "iríamos" ; --# notpresent
    VPB (Cond Pl P2) => "iríeis" ; --# notpresent
    VPB (Cond Pl P3) => "iriam" ; --# notpresent
    VPB (Imper Sg P2) => "i" ;
    VPB (Imper Sg P3) => "ia" ;
    VPB (Imper Pl P1) => "iamos" ;
    VPB (Imper Pl P2) => "i" ;
    VPB (Imper Pl P3) => "iam" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper rir_Besch : Str -> Verbum = \rir ->
-- 69 | r48
  let r_ = Predef.tk 2 rir in
 {root = r_ ;
  suff = table {
    VI Infn => "ir" ;
    VI Ger => "indo" ;
    VI Part => "ido" ;
    VPB (Pres Ind Sg P1) => "io" ;
    VPB (Pres Ind Sg P2) => "is" ;
    VPB (Pres Ind Sg P3) => "i" ;
    VPB (Pres Ind Pl P1) => "imos" ;
    VPB (Pres Ind Pl P2) => "ides" ;
    VPB (Pres Ind Pl P3) => "iem" ;
    VPB (Pres Sub Sg P1) => "ia" ;
    VPB (Pres Sub Sg P2) => "ias" ;
    VPB (Pres Sub Sg P3) => "ia" ;
    VPB (Pres Sub Pl P1) => "iamos" ;
    VPB (Pres Sub Pl P2) => "iais" ;
    VPB (Pres Sub Pl P3) => "iam" ;
    VPB (PretI Ind Sg P1) => "ia" ; --# notpresent
    VPB (PretI Ind Sg P2) => "ias" ; --# notpresent
    VPB (PretI Ind Sg P3) => "ia" ; --# notpresent
    VPB (PretI Ind Pl P1) => "íamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => "ieis" ; --# notpresent
    VPB (PretI Ind Pl P3) => "iam" ; --# notpresent
    VPB (PretI Sub Sg P1) => "isse" ; --# notpresent
    VPB (PretI Sub Sg P2) => "isses" ; --# notpresent
    VPB (PretI Sub Sg P3) => "isse" ; --# notpresent
    VPB (PretI Sub Pl P1) => "íssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => "ísseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => "issem" ; --# notpresent
    VPB (MQPerf Sg P1) => "ira" ; --# notpresent
    VPB (MQPerf Sg P2) => "iras" ; --# notpresent
    VPB (MQPerf Sg P3) => "ira" ; --# notpresent
    VPB (MQPerf Pl P1) => "íramos" ; --# notpresent
    VPB (MQPerf Pl P2) => "íreis" ; --# notpresent
    VPB (MQPerf Pl P3) => "iram" ; --# notpresent
    VPB (PretP Sg P1) => "i" ; --# notpresent
    VPB (PretP Sg P2) => "iste" ; --# notpresent
    VPB (PretP Sg P3) => "iu" ; --# notpresent
    VPB (PretP Pl P1) => "imos" ; --# notpresent
    VPB (PretP Pl P2) => "istes" ; --# notpresent
    VPB (PretP Pl P3) => "iram" ; --# notpresent
    VPB (Fut Ind Sg P1) => "irei" ; --# notpresent
    VPB (Fut Ind Sg P2) => "irás" ; --# notpresent
    VPB (Fut Ind Sg P3) => "irá" ; --# notpresent
    VPB (Fut Ind Pl P1) => "iremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => "ireis" ; --# notpresent
    VPB (Fut Ind Pl P3) => "irão" ; --# notpresent
    VPB (Fut Sub Sg P1) => "ir" ; --# notpresent
    VPB (Fut Sub Sg P2) => "ires" ; --# notpresent
    VPB (Fut Sub Sg P3) => "ir" ; --# notpresent
    VPB (Fut Sub Pl P1) => "irmos" ; --# notpresent
    VPB (Fut Sub Pl P2) => "irdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => "irem" ; --# notpresent
    VPB (Cond Sg P1) => "iria" ; --# notpresent
    VPB (Cond Sg P2) => "irias" ; --# notpresent
    VPB (Cond Sg P3) => "iria" ; --# notpresent
    VPB (Cond Pl P1) => "iríamos" ; --# notpresent
    VPB (Cond Pl P2) => "iríeis" ; --# notpresent
    VPB (Cond Pl P3) => "iriam" ; --# notpresent
    VPB (Imper Sg P2) => "i" ;
    VPB (Imper Sg P3) => "ia" ;
    VPB (Imper Pl P1) => "íamos" ;
    VPB (Imper Pl P2) => "ide" ;
    VPB (Imper Pl P3) => "iam" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper pedir_Besch : Str -> Verbum = \pedir ->
-- 70 | r63
  let pe_ = Predef.tk 3 pedir in
 {root = pe_ ;
  suff = table {
    VI Infn => "dir" ;
    VI Ger => "dindo" ;
    VI Part => "dido" ;
    VPB (Pres Ind Sg P1) => "ço" ;
    VPB (Pres Ind Sg P2) => "des" ;
    VPB (Pres Ind Sg P3) => "de" ;
    VPB (Pres Ind Pl P1) => "dimos" ;
    VPB (Pres Ind Pl P2) => "dis" ;
    VPB (Pres Ind Pl P3) => "dem" ;
    VPB (Pres Sub Sg P1) => "ça" ;
    VPB (Pres Sub Sg P2) => "ças" ;
    VPB (Pres Sub Sg P3) => "ça" ;
    VPB (Pres Sub Pl P1) => "çamos" ;
    VPB (Pres Sub Pl P2) => "çais" ;
    VPB (Pres Sub Pl P3) => "çam" ;
    VPB (PretI Ind Sg P1) => "dia" ; --# notpresent
    VPB (PretI Ind Sg P2) => "dias" ; --# notpresent
    VPB (PretI Ind Sg P3) => "dia" ; --# notpresent
    VPB (PretI Ind Pl P1) => "díamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => "díeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => "diam" ; --# notpresent
    VPB (PretI Sub Sg P1) => "disse" ; --# notpresent
    VPB (PretI Sub Sg P2) => "disses" ; --# notpresent
    VPB (PretI Sub Sg P3) => "disse" ; --# notpresent
    VPB (PretI Sub Pl P1) => "díssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => "dísseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => "dissem" ; --# notpresent
    VPB (MQPerf Sg P1) => "dira" ; --# notpresent
    VPB (MQPerf Sg P2) => "diras" ; --# notpresent
    VPB (MQPerf Sg P3) => "dira" ; --# notpresent
    VPB (MQPerf Pl P1) => "díramos" ; --# notpresent
    VPB (MQPerf Pl P2) => "díreis" ; --# notpresent
    VPB (MQPerf Pl P3) => "diram" ; --# notpresent
    VPB (PretP Sg P1) => "di" ; --# notpresent
    VPB (PretP Sg P2) => "diste" ; --# notpresent
    VPB (PretP Sg P3) => "diu" ; --# notpresent
    VPB (PretP Pl P1) => "dimos" ; --# notpresent
    VPB (PretP Pl P2) => "distes" ; --# notpresent
    VPB (PretP Pl P3) => "diram" ; --# notpresent
    VPB (Fut Ind Sg P1) => "direi" ; --# notpresent
    VPB (Fut Ind Sg P2) => "dirás" ; --# notpresent
    VPB (Fut Ind Sg P3) => "dirá" ; --# notpresent
    VPB (Fut Ind Pl P1) => "diremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => "direis" ; --# notpresent
    VPB (Fut Ind Pl P3) => "dirão" ; --# notpresent
    VPB (Fut Sub Sg P1) => "dir" ; --# notpresent
    VPB (Fut Sub Sg P2) => "dires" ; --# notpresent
    VPB (Fut Sub Sg P3) => "dir" ; --# notpresent
    VPB (Fut Sub Pl P1) => "dirmos" ; --# notpresent
    VPB (Fut Sub Pl P2) => "dirdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => "direm" ; --# notpresent
    VPB (Cond Sg P1) => "diria" ; --# notpresent
    VPB (Cond Sg P2) => "dirias" ; --# notpresent
    VPB (Cond Sg P3) => "diria" ; --# notpresent
    VPB (Cond Pl P1) => "diríamos" ; --# notpresent
    VPB (Cond Pl P2) => "diríeis" ; --# notpresent
    VPB (Cond Pl P3) => "diriam" ; --# notpresent
    VPB (Imper Sg P2) => "de" ;
    VPB (Imper Sg P3) => "ça" ;
    VPB (Imper Pl P1) => "çamos" ;
    VPB (Imper Pl P2) => "di" ;
    VPB (Imper Pl P3) => "çam" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper ouvir_Besch : Str -> Verbum = \ouvir ->
-- 71 | r63
  let ou_ = Predef.tk 3 ouvir in
 {root = ou_ ;
  suff = table {
    VI Infn => "vir" ;
    VI Ger => "vindo" ;
    VI Part => "vido" ;
    VPB (Pres Ind Sg P1) => "ço" ;
    VPB (Pres Ind Sg P2) => "ves" ;
    VPB (Pres Ind Sg P3) => "ve" ;
    VPB (Pres Ind Pl P1) => "vimos" ;
    VPB (Pres Ind Pl P2) => "vis" ;
    VPB (Pres Ind Pl P3) => "vem" ;
    VPB (Pres Sub Sg P1) => "ça" ;
    VPB (Pres Sub Sg P2) => "ças" ;
    VPB (Pres Sub Sg P3) => "ça" ;
    VPB (Pres Sub Pl P1) => "çamos" ;
    VPB (Pres Sub Pl P2) => "çais" ;
    VPB (Pres Sub Pl P3) => "çam" ;
    VPB (PretI Ind Sg P1) => "via" ; --# notpresent
    VPB (PretI Ind Sg P2) => "vias" ; --# notpresent
    VPB (PretI Ind Sg P3) => "via" ; --# notpresent
    VPB (PretI Ind Pl P1) => "víamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => "víeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => "viam" ; --# notpresent
    VPB (PretI Sub Sg P1) => "visse" ; --# notpresent
    VPB (PretI Sub Sg P2) => "visses" ; --# notpresent
    VPB (PretI Sub Sg P3) => "visse" ; --# notpresent
    VPB (PretI Sub Pl P1) => "víssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => "vísseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => "vissem" ; --# notpresent
    VPB (MQPerf Sg P1) => "vira" ; --# notpresent
    VPB (MQPerf Sg P2) => "viras" ; --# notpresent
    VPB (MQPerf Sg P3) => "vira" ; --# notpresent
    VPB (MQPerf Pl P1) => "viríamos" ; --# notpresent
    VPB (MQPerf Pl P2) => "viríeis" ; --# notpresent
    VPB (MQPerf Pl P3) => "viram" ; --# notpresent
    VPB (PretP Sg P1) => "vi" ; --# notpresent
    VPB (PretP Sg P2) => "viste" ; --# notpresent
    VPB (PretP Sg P3) => "viu" ; --# notpresent
    VPB (PretP Pl P1) => "vimos" ; --# notpresent
    VPB (PretP Pl P2) => "vistes" ; --# notpresent
    VPB (PretP Pl P3) => "viram" ; --# notpresent
    VPB (Fut Ind Sg P1) => "virei" ; --# notpresent
    VPB (Fut Ind Sg P2) => "virás" ; --# notpresent
    VPB (Fut Ind Sg P3) => "virá" ; --# notpresent
    VPB (Fut Ind Pl P1) => "viremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => "vireis" ; --# notpresent
    VPB (Fut Ind Pl P3) => "virão" ; --# notpresent
    VPB (Fut Sub Sg P1) => "vir" ; --# notpresent
    VPB (Fut Sub Sg P2) => "vires" ; --# notpresent
    VPB (Fut Sub Sg P3) => "vir" ; --# notpresent
    VPB (Fut Sub Pl P1) => "virmos" ; --# notpresent
    VPB (Fut Sub Pl P2) => "virdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => "virem" ; --# notpresent
    VPB (Cond Sg P1) => "viria" ; --# notpresent
    VPB (Cond Sg P2) => "virias" ; --# notpresent
    VPB (Cond Sg P3) => "viria" ; --# notpresent
    VPB (Cond Pl P1) => "viríamos" ; --# notpresent
    VPB (Cond Pl P2) => "viríeis" ; --# notpresent
    VPB (Cond Pl P3) => "viriam" ; --# notpresent
    VPB (Imper Sg P2) => "ve" ;
    VPB (Imper Sg P3) => "ça" ;
    VPB (Imper Pl P1) => "çamos" ;
    VPB (Imper Pl P2) => "vi" ;
    VPB (Imper Pl P3) => "çam" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper traduzir_Besch : Str -> Verbum = \traduzir ->
-- 72 | r44
  let traduz_ = Predef.tk 2 traduzir in
 {root = traduz_ ;
  suff = table {
    VI Infn => "ir" ;
    VI Ger => "indo" ;
    VI Part => "ido" ;
    VPB (Pres Ind Sg P1) => "o" ;
    VPB (Pres Ind Sg P2) => "es" ;
    VPB (Pres Ind Sg P3) => "" ;
    VPB (Pres Ind Pl P1) => "imos" ;
    VPB (Pres Ind Pl P2) => "is" ;
    VPB (Pres Ind Pl P3) => "em" ;
    VPB (Pres Sub Sg P1) => "a" ;
    VPB (Pres Sub Sg P2) => "as" ;
    VPB (Pres Sub Sg P3) => "a" ;
    VPB (Pres Sub Pl P1) => "amos" ;
    VPB (Pres Sub Pl P2) => "ais" ;
    VPB (Pres Sub Pl P3) => "am" ;
    VPB (PretI Ind Sg P1) => "ia" ; --# notpresent
    VPB (PretI Ind Sg P2) => "ias" ; --# notpresent
    VPB (PretI Ind Sg P3) => "ia" ; --# notpresent
    VPB (PretI Ind Pl P1) => "íamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => "íeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => "iam" ; --# notpresent
    VPB (PretI Sub Sg P1) => "isse" ; --# notpresent
    VPB (PretI Sub Sg P2) => "isses" ; --# notpresent
    VPB (PretI Sub Sg P3) => "isse" ; --# notpresent
    VPB (PretI Sub Pl P1) => "íssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => "ísseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => "issem" ; --# notpresent
    VPB (MQPerf Sg P1) => "ira" ; --# notpresent
    VPB (MQPerf Sg P2) => "iras" ; --# notpresent
    VPB (MQPerf Sg P3) => "ira" ; --# notpresent
    VPB (MQPerf Pl P1) => "íramos" ; --# notpresent
    VPB (MQPerf Pl P2) => "íreis" ; --# notpresent
    VPB (MQPerf Pl P3) => "iram" ; --# notpresent
    VPB (PretP Sg P1) => "i" ; --# notpresent
    VPB (PretP Sg P2) => "iste" ; --# notpresent
    VPB (PretP Sg P3) => "iu" ; --# notpresent
    VPB (PretP Pl P1) => "imos" ; --# notpresent
    VPB (PretP Pl P2) => "istes" ; --# notpresent
    VPB (PretP Pl P3) => "iram" ; --# notpresent
    VPB (Fut Ind Sg P1) => "irei" ; --# notpresent
    VPB (Fut Ind Sg P2) => "irás" ; --# notpresent
    VPB (Fut Ind Sg P3) => "irá" ; --# notpresent
    VPB (Fut Ind Pl P1) => "iremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => "ireis" ; --# notpresent
    VPB (Fut Ind Pl P3) => "irão" ; --# notpresent
    VPB (Fut Sub Sg P1) => "ir" ; --# notpresent
    VPB (Fut Sub Sg P2) => "ires" ; --# notpresent
    VPB (Fut Sub Sg P3) => "ir" ; --# notpresent
    VPB (Fut Sub Pl P1) => "irmos" ; --# notpresent
    VPB (Fut Sub Pl P2) => "irdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => "irem" ; --# notpresent
    VPB (Cond Sg P1) => "iria" ; --# notpresent
    VPB (Cond Sg P2) => "irias" ; --# notpresent
    VPB (Cond Sg P3) => "iria" ; --# notpresent
    VPB (Cond Pl P1) => "íriamos" ; --# notpresent
    VPB (Cond Pl P2) => "iríeis" ; --# notpresent
    VPB (Cond Pl P3) => "iriam" ; --# notpresent
    VPB (Imper Sg P2) => vars "" "e" ;
    VPB (Imper Sg P3) => "a" ;
    VPB (Imper Pl P1) => "amos" ;
    VPB (Imper Pl P2) => "i" ;
    VPB (Imper Pl P3) => "am" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper distribuir_Besch : Str -> Verbum = \distribuir ->
-- 73 | r40
  let distribu_ = Predef.tk 2 distribuir in
 {root = distribu_ ;
  suff = table {
    VI Infn => "ir" ;
    VI Ger => "indo" ;
    VI Part => "ído" ;
    VPB (Pres Ind Sg P1) => "o" ;
    VPB (Pres Ind Sg P2) => "is" ;
    VPB (Pres Ind Sg P3) => "i" ;
    VPB (Pres Ind Pl P1) => "ímos" ;
    VPB (Pres Ind Pl P2) => "ís" ;
    VPB (Pres Ind Pl P3) => "em" ;
    VPB (Pres Sub Sg P1) => "a" ;
    VPB (Pres Sub Sg P2) => "as" ;
    VPB (Pres Sub Sg P3) => "a" ;
    VPB (Pres Sub Pl P1) => "amos" ;
    VPB (Pres Sub Pl P2) => "ais" ;
    VPB (Pres Sub Pl P3) => "am" ;
    VPB (PretI Ind Sg P1) => "ía" ; --# notpresent
    VPB (PretI Ind Sg P2) => "ías" ; --# notpresent
    VPB (PretI Ind Sg P3) => "ía" ; --# notpresent
    VPB (PretI Ind Pl P1) => "íamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => "íais" ; --# notpresent
    VPB (PretI Ind Pl P3) => "íam" ; --# notpresent
    VPB (PretI Sub Sg P1) => "ísse" ; --# notpresent
    VPB (PretI Sub Sg P2) => "ísses" ; --# notpresent
    VPB (PretI Sub Sg P3) => "ísse" ; --# notpresent
    VPB (PretI Sub Pl P1) => "íssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => "ísseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => "íssem" ; --# notpresent
    VPB (MQPerf Sg P1) => "íra" ; --# notpresent
    VPB (MQPerf Sg P2) => "íras" ; --# notpresent
    VPB (MQPerf Sg P3) => "íra" ; --# notpresent
    VPB (MQPerf Pl P1) => "íramos" ; --# notpresent
    VPB (MQPerf Pl P2) => "íreis" ; --# notpresent
    VPB (MQPerf Pl P3) => "íram" ; --# notpresent
    VPB (PretP Sg P1) => "í" ; --# notpresent
    VPB (PretP Sg P2) => "íste" ; --# notpresent
    VPB (PretP Sg P3) => "iu" ; --# notpresent
    VPB (PretP Pl P1) => "ímos" ; --# notpresent
    VPB (PretP Pl P2) => "istes" ; --# notpresent
    VPB (PretP Pl P3) => "iram" ; --# notpresent
    VPB (Fut Ind Sg P1) => "irei" ; --# notpresent
    VPB (Fut Ind Sg P2) => "irás" ; --# notpresent
    VPB (Fut Ind Sg P3) => "irá" ; --# notpresent
    VPB (Fut Ind Pl P1) => "iremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => "ireis" ; --# notpresent
    VPB (Fut Ind Pl P3) => "irão" ; --# notpresent
    VPB (Fut Sub Sg P1) => "ir" ; --# notpresent
    VPB (Fut Sub Sg P2) => "íres" ; --# notpresent
    VPB (Fut Sub Sg P3) => "ir" ; --# notpresent
    VPB (Fut Sub Pl P1) => "irmos" ; --# notpresent
    VPB (Fut Sub Pl P2) => "irdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => "irem" ; --# notpresent
    VPB (Cond Sg P1) => "iria" ; --# notpresent
    VPB (Cond Sg P2) => "irias" ; --# notpresent
    VPB (Cond Sg P3) => "iria" ; --# notpresent
    VPB (Cond Pl P1) => "iríamos" ; --# notpresent
    VPB (Cond Pl P2) => "irieis" ; --# notpresent
    VPB (Cond Pl P3) => "iriam" ; --# notpresent
    VPB (Imper Sg P2) => "i" ;
    VPB (Imper Sg P3) => "a" ;
    VPB (Imper Pl P1) => "amos" ;
    VPB (Imper Pl P2) => "í" ;
    VPB (Imper Pl P3) => "am" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper destruir_Besch : Str -> Verbum = \destruir ->
-- 74 | r57
  let destr_ = Predef.tk 3 destruir in
 {root = destr_ ;
  suff = table {
    VI Infn => "uir" ;
    VI Ger => "uindo" ;
    VI Part => "uído" ;
    VPB (Pres Ind Sg P1) => "uo" ;
    VPB (Pres Ind Sg P2) => vars "óis" "uis" ;
    VPB (Pres Ind Sg P3) => vars "ói" "ui" ;
    VPB (Pres Ind Pl P1) => "uímos" ;
    VPB (Pres Ind Pl P2) => "uís" ;
    VPB (Pres Ind Pl P3) => vars "oem" "uem" ;
    VPB (Pres Sub Sg P1) => "ua" ;
    VPB (Pres Sub Sg P2) => "uas" ;
    VPB (Pres Sub Sg P3) => "ua" ;
    VPB (Pres Sub Pl P1) => "uamos" ;
    VPB (Pres Sub Pl P2) => "uais" ;
    VPB (Pres Sub Pl P3) => "uam" ;
    VPB (PretI Ind Sg P1) => "uía" ; --# notpresent
    VPB (PretI Ind Sg P2) => "uías" ; --# notpresent
    VPB (PretI Ind Sg P3) => "uía" ; --# notpresent
    VPB (PretI Ind Pl P1) => "uíamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => "uíeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => "uíam" ; --# notpresent
    VPB (PretI Sub Sg P1) => "uísse" ; --# notpresent
    VPB (PretI Sub Sg P2) => "uísses" ; --# notpresent
    VPB (PretI Sub Sg P3) => "uísse" ; --# notpresent
    VPB (PretI Sub Pl P1) => "uíssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => "uísseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => "uíssem" ; --# notpresent
    VPB (MQPerf Sg P1) => "uíra" ; --# notpresent
    VPB (MQPerf Sg P2) => "uíras" ; --# notpresent
    VPB (MQPerf Sg P3) => "uíra" ; --# notpresent
    VPB (MQPerf Pl P1) => "uíramos" ; --# notpresent
    VPB (MQPerf Pl P2) => "uíreis" ; --# notpresent
    VPB (MQPerf Pl P3) => "uíram" ; --# notpresent
    VPB (PretP Sg P1) => "uí" ; --# notpresent
    VPB (PretP Sg P2) => "uíste" ; --# notpresent
    VPB (PretP Sg P3) => "uiu" ; --# notpresent
    VPB (PretP Pl P1) => "uímos" ; --# notpresent
    VPB (PretP Pl P2) => "uístes" ; --# notpresent
    VPB (PretP Pl P3) => "uíram" ; --# notpresent
    VPB (Fut Ind Sg P1) => "uirei" ; --# notpresent
    VPB (Fut Ind Sg P2) => "uirás" ; --# notpresent
    VPB (Fut Ind Sg P3) => "uirá" ; --# notpresent
    VPB (Fut Ind Pl P1) => "uiremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => "uireis" ; --# notpresent
    VPB (Fut Ind Pl P3) => "uirão" ; --# notpresent
    VPB (Fut Sub Sg P1) => "uir" ; --# notpresent
    VPB (Fut Sub Sg P2) => "uíres" ; --# notpresent
    VPB (Fut Sub Sg P3) => "uir" ; --# notpresent
    VPB (Fut Sub Pl P1) => "uírmos" ; --# notpresent
    VPB (Fut Sub Pl P2) => "uírdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => "uírem" ; --# notpresent
    VPB (Cond Sg P1) => "uiria" ; --# notpresent
    VPB (Cond Sg P2) => "uirias" ; --# notpresent
    VPB (Cond Sg P3) => "uiria" ; --# notpresent
    VPB (Cond Pl P1) => "uiríamos" ; --# notpresent
    VPB (Cond Pl P2) => "uiríeis" ; --# notpresent
    VPB (Cond Pl P3) => "uiriam" ; --# notpresent
    VPB (Imper Sg P2) => vars "ói" "ui" ;
    VPB (Imper Sg P3) => "ua" ;
    VPB (Imper Pl P1) => "uamos" ;
    VPB (Imper Pl P2) => "ui" ;
    VPB (Imper Pl P3) => "uam" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper arguir_Besch : Str -> Verbum = \arguir ->
-- 75 | r31
  let arg_ = Predef.tk 3 arguir in
 {root = arg_ ;
  suff = table {
    VI Infn => "uir" ;
    VI Ger => "uindo" ;
    VI Part => "uido" ;
    VPB (Pres Ind Sg P1) => "uo" ;
    VPB (Pres Ind Sg P2) => "úis" ;
    VPB (Pres Ind Sg P3) => "úi" ;
    VPB (Pres Ind Pl P1) => "uimos" ;
    VPB (Pres Ind Pl P2) => "uis" ;
    VPB (Pres Ind Pl P3) => "úem" ;
    VPB (Pres Sub Sg P1) => "ua" ;
    VPB (Pres Sub Sg P2) => "uas" ;
    VPB (Pres Sub Sg P3) => "ua" ;
    VPB (Pres Sub Pl P1) => "uamos" ;
    VPB (Pres Sub Pl P2) => "uais" ;
    VPB (Pres Sub Pl P3) => "uam" ;
    VPB (PretI Ind Sg P1) => "uia" ; --# notpresent
    VPB (PretI Ind Sg P2) => "uias" ; --# notpresent
    VPB (PretI Ind Sg P3) => "uia" ; --# notpresent
    VPB (PretI Ind Pl P1) => "uíamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => "uíeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => "uiam" ; --# notpresent
    VPB (PretI Sub Sg P1) => "uísse" ; --# notpresent
    VPB (PretI Sub Sg P2) => "uísses" ; --# notpresent
    VPB (PretI Sub Sg P3) => "uísse" ; --# notpresent
    VPB (PretI Sub Pl P1) => "uíssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => "uísseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => "uíssem" ; --# notpresent
    VPB (MQPerf Sg P1) => "uíra" ; --# notpresent
    VPB (MQPerf Sg P2) => "uíras" ; --# notpresent
    VPB (MQPerf Sg P3) => "uíra" ; --# notpresent
    VPB (MQPerf Pl P1) => "uíramos" ; --# notpresent
    VPB (MQPerf Pl P2) => "uíreis" ; --# notpresent
    VPB (MQPerf Pl P3) => "uíram" ; --# notpresent
    VPB (PretP Sg P1) => "uí" ; --# notpresent
    VPB (PretP Sg P2) => "uiste" ; --# notpresent
    VPB (PretP Sg P3) => "uiu" ; --# notpresent
    VPB (PretP Pl P1) => "uímos" ; --# notpresent
    VPB (PretP Pl P2) => "uístes" ; --# notpresent
    VPB (PretP Pl P3) => "uíram" ; --# notpresent
    VPB (Fut Ind Sg P1) => "uirei" ; --# notpresent
    VPB (Fut Ind Sg P2) => "uirás" ; --# notpresent
    VPB (Fut Ind Sg P3) => "uirá" ; --# notpresent
    VPB (Fut Ind Pl P1) => "uiremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => "uireis" ; --# notpresent
    VPB (Fut Ind Pl P3) => "uirão" ; --# notpresent
    VPB (Fut Sub Sg P1) => "uir" ; --# notpresent
    VPB (Fut Sub Sg P2) => "uíres" ; --# notpresent
    VPB (Fut Sub Sg P3) => "uir" ; --# notpresent
    VPB (Fut Sub Pl P1) => "uirmos" ; --# notpresent
    VPB (Fut Sub Pl P2) => "uirdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => "uirem" ; --# notpresent
    VPB (Cond Sg P1) => "uiria" ; --# notpresent
    VPB (Cond Sg P2) => "uirias" ; --# notpresent
    VPB (Cond Sg P3) => "uiria" ; --# notpresent
    VPB (Cond Pl P1) => "uiríamos" ; --# notpresent
    VPB (Cond Pl P2) => "uiríeis" ; --# notpresent
    VPB (Cond Pl P3) => "uiriam" ; --# notpresent
    VPB (Imper Sg P2) => "úi" ;
    VPB (Imper Sg P3) => "ua" ;
    VPB (Imper Pl P1) => "uamos" ;
    VPB (Imper Pl P2) => "ui" ;
    VPB (Imper Pl P3) => "uam" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper reunir_Besch : Str -> Verbum = \reunir ->
-- 76 | r18
  let re_ = Predef.tk 4 reunir in
 {root = re_ ;
  suff = table {
    VI Infn => "unir" ;
    VI Ger => "unindo" ;
    VI Part => "unido" ;
    VPB (Pres Ind Sg P1) => "úno" ;
    VPB (Pres Ind Sg P2) => "únes" ;
    VPB (Pres Ind Sg P3) => "úne" ;
    VPB (Pres Ind Pl P1) => "unimos" ;
    VPB (Pres Ind Pl P2) => "unis" ;
    VPB (Pres Ind Pl P3) => "únem" ;
    VPB (Pres Sub Sg P1) => "úna" ;
    VPB (Pres Sub Sg P2) => "únas" ;
    VPB (Pres Sub Sg P3) => "úna" ;
    VPB (Pres Sub Pl P1) => "unamos" ;
    VPB (Pres Sub Pl P2) => "unais" ;
    VPB (Pres Sub Pl P3) => "únam" ;
    VPB (PretI Ind Sg P1) => "unia" ; --# notpresent
    VPB (PretI Ind Sg P2) => "unias" ; --# notpresent
    VPB (PretI Ind Sg P3) => "unia" ; --# notpresent
    VPB (PretI Ind Pl P1) => "uníamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => "uníeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => "uniam" ; --# notpresent
    VPB (PretI Sub Sg P1) => "unisse" ; --# notpresent
    VPB (PretI Sub Sg P2) => "unisses" ; --# notpresent
    VPB (PretI Sub Sg P3) => "unisse" ; --# notpresent
    VPB (PretI Sub Pl P1) => "uníssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => "unísseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => "unissem" ; --# notpresent
    VPB (MQPerf Sg P1) => "unira" ; --# notpresent
    VPB (MQPerf Sg P2) => "uniras" ; --# notpresent
    VPB (MQPerf Sg P3) => "unira" ; --# notpresent
    VPB (MQPerf Pl P1) => "uníramos" ; --# notpresent
    VPB (MQPerf Pl P2) => "uníreis" ; --# notpresent
    VPB (MQPerf Pl P3) => "uniram" ; --# notpresent
    VPB (PretP Sg P1) => "uni" ; --# notpresent
    VPB (PretP Sg P2) => "uniste" ; --# notpresent
    VPB (PretP Sg P3) => "uniu" ; --# notpresent
    VPB (PretP Pl P1) => "unimos" ; --# notpresent
    VPB (PretP Pl P2) => "unistes" ; --# notpresent
    VPB (PretP Pl P3) => "uniram" ; --# notpresent
    VPB (Fut Ind Sg P1) => "unirei" ; --# notpresent
    VPB (Fut Ind Sg P2) => "unirás" ; --# notpresent
    VPB (Fut Ind Sg P3) => "unirá" ; --# notpresent
    VPB (Fut Ind Pl P1) => "uniremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => "unireis" ; --# notpresent
    VPB (Fut Ind Pl P3) => "unirão" ; --# notpresent
    VPB (Fut Sub Sg P1) => "unir" ; --# notpresent
    VPB (Fut Sub Sg P2) => "unires" ; --# notpresent
    VPB (Fut Sub Sg P3) => "unir" ; --# notpresent
    VPB (Fut Sub Pl P1) => "unirmos" ; --# notpresent
    VPB (Fut Sub Pl P2) => "unirdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => "unirem" ; --# notpresent
    VPB (Cond Sg P1) => "uniria" ; --# notpresent
    VPB (Cond Sg P2) => "unirias" ; --# notpresent
    VPB (Cond Sg P3) => "uniria" ; --# notpresent
    VPB (Cond Pl P1) => "uniríamos" ; --# notpresent
    VPB (Cond Pl P2) => "uniríeis" ; --# notpresent
    VPB (Cond Pl P3) => "uniriam" ; --# notpresent
    VPB (Imper Sg P2) => "úne" ;
    VPB (Imper Sg P3) => "úna" ;
    VPB (Imper Pl P1) => "unamos" ;
    VPB (Imper Pl P2) => "uni" ;
    VPB (Imper Pl P3) => "únam" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper proibir_Besch : Str -> Verbum = \proibir ->
-- 77 | r20
  let pro_ = Predef.tk 4 proibir in
 {root = pro_ ;
  suff = table {
    VI Infn => "ibir" ;
    VI Ger => "ibindo" ;
    VI Part => "ibido" ;
    VPB (Pres Ind Sg P1) => "íbo" ;
    VPB (Pres Ind Sg P2) => "íbes" ;
    VPB (Pres Ind Sg P3) => "íbe" ;
    VPB (Pres Ind Pl P1) => "ibimos" ;
    VPB (Pres Ind Pl P2) => "ibis" ;
    VPB (Pres Ind Pl P3) => "íbem" ;
    VPB (Pres Sub Sg P1) => "íba" ;
    VPB (Pres Sub Sg P2) => "íbas" ;
    VPB (Pres Sub Sg P3) => "íba" ;
    VPB (Pres Sub Pl P1) => "ibamos" ;
    VPB (Pres Sub Pl P2) => "ibais" ;
    VPB (Pres Sub Pl P3) => "íbam" ;
    VPB (PretI Ind Sg P1) => "ibia" ; --# notpresent
    VPB (PretI Ind Sg P2) => "ibias" ; --# notpresent
    VPB (PretI Ind Sg P3) => "ibia" ; --# notpresent
    VPB (PretI Ind Pl P1) => "ibíamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => "ibíeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => "ibiam" ; --# notpresent
    VPB (PretI Sub Sg P1) => "ibisse" ; --# notpresent
    VPB (PretI Sub Sg P2) => "ibisses" ; --# notpresent
    VPB (PretI Sub Sg P3) => "ibisse" ; --# notpresent
    VPB (PretI Sub Pl P1) => "ibíssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => "ibísseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => "ibíssem" ; --# notpresent
    VPB (MQPerf Sg P1) => "ibira" ; --# notpresent
    VPB (MQPerf Sg P2) => "ibiras" ; --# notpresent
    VPB (MQPerf Sg P3) => "ibira" ; --# notpresent
    VPB (MQPerf Pl P1) => "ibíramos" ; --# notpresent
    VPB (MQPerf Pl P2) => "ibíreis" ; --# notpresent
    VPB (MQPerf Pl P3) => "ibiram" ; --# notpresent
    VPB (PretP Sg P1) => "ibi" ; --# notpresent
    VPB (PretP Sg P2) => "ibiste" ; --# notpresent
    VPB (PretP Sg P3) => "ibiu" ; --# notpresent
    VPB (PretP Pl P1) => "ibimos" ; --# notpresent
    VPB (PretP Pl P2) => "ibistes" ; --# notpresent
    VPB (PretP Pl P3) => "ibiram" ; --# notpresent
    VPB (Fut Ind Sg P1) => "ibirei" ; --# notpresent
    VPB (Fut Ind Sg P2) => "ibirás" ; --# notpresent
    VPB (Fut Ind Sg P3) => "ibirá" ; --# notpresent
    VPB (Fut Ind Pl P1) => "ibiremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => "ibireis" ; --# notpresent
    VPB (Fut Ind Pl P3) => "ibirão" ; --# notpresent
    VPB (Fut Sub Sg P1) => "ibir" ; --# notpresent
    VPB (Fut Sub Sg P2) => "ibires" ; --# notpresent
    VPB (Fut Sub Sg P3) => "ibir" ; --# notpresent
    VPB (Fut Sub Pl P1) => "ibirmos" ; --# notpresent
    VPB (Fut Sub Pl P2) => "ibirdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => "ibirem" ; --# notpresent
    VPB (Cond Sg P1) => "ibiria" ; --# notpresent
    VPB (Cond Sg P2) => "ibirias" ; --# notpresent
    VPB (Cond Sg P3) => "ibiria" ; --# notpresent
    VPB (Cond Pl P1) => "ibiríamos" ; --# notpresent
    VPB (Cond Pl P2) => "ibiríeis" ; --# notpresent
    VPB (Cond Pl P3) => "ibiriam" ; --# notpresent
    VPB (Imper Sg P2) => "íbe" ;
    VPB (Imper Sg P3) => "íba" ;
    VPB (Imper Pl P1) => "ibamos" ;
    VPB (Imper Pl P2) => "ibi" ;
    VPB (Imper Pl P3) => "íbam" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper imergir_Besch : Str -> Verbum = \imergir ->
-- 78 | r49
  let imerg_ = Predef.tk 2 imergir in
 {root = imerg_ ;
  suff = table {
    VI Infn => "ir" ;
    VI Ger => "indo" ;
    VI Part => "ido" ;
    VPB (Pres Ind Sg P1) => nonExist ;
    VPB (Pres Ind Sg P2) => "es" ;
    VPB (Pres Ind Sg P3) => "e" ;
    VPB (Pres Ind Pl P1) => "imos" ;
    VPB (Pres Ind Pl P2) => "is" ;
    VPB (Pres Ind Pl P3) => "em" ;
    VPB (Pres Sub Sg P1) => nonExist ;
    VPB (Pres Sub Sg P2) => nonExist ;
    VPB (Pres Sub Sg P3) => nonExist ;
    VPB (Pres Sub Pl P1) => nonExist ;
    VPB (Pres Sub Pl P2) => nonExist ;
    VPB (Pres Sub Pl P3) => nonExist ;
    VPB (PretI Ind Sg P1) => "ia" ; --# notpresent
    VPB (PretI Ind Sg P2) => "ias" ; --# notpresent
    VPB (PretI Ind Sg P3) => "ia" ; --# notpresent
    VPB (PretI Ind Pl P1) => "íamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => "íeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => "iam" ; --# notpresent
    VPB (PretI Sub Sg P1) => "isse" ; --# notpresent
    VPB (PretI Sub Sg P2) => "isses" ; --# notpresent
    VPB (PretI Sub Sg P3) => "isse" ; --# notpresent
    VPB (PretI Sub Pl P1) => "íssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => "ísseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => "íssem" ; --# notpresent
    VPB (MQPerf Sg P1) => "ira" ; --# notpresent
    VPB (MQPerf Sg P2) => "iras" ; --# notpresent
    VPB (MQPerf Sg P3) => "ira" ; --# notpresent
    VPB (MQPerf Pl P1) => "íramos" ; --# notpresent
    VPB (MQPerf Pl P2) => "íreis" ; --# notpresent
    VPB (MQPerf Pl P3) => "iram" ; --# notpresent
    VPB (PretP Sg P1) => "i" ; --# notpresent
    VPB (PretP Sg P2) => "iste" ; --# notpresent
    VPB (PretP Sg P3) => "iu" ; --# notpresent
    VPB (PretP Pl P1) => "imos" ; --# notpresent
    VPB (PretP Pl P2) => "istes" ; --# notpresent
    VPB (PretP Pl P3) => "iram" ; --# notpresent
    VPB (Fut Ind Sg P1) => "irei" ; --# notpresent
    VPB (Fut Ind Sg P2) => "irás" ; --# notpresent
    VPB (Fut Ind Sg P3) => "irá" ; --# notpresent
    VPB (Fut Ind Pl P1) => "iremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => "ireis" ; --# notpresent
    VPB (Fut Ind Pl P3) => "irão" ; --# notpresent
    VPB (Fut Sub Sg P1) => "ir" ; --# notpresent
    VPB (Fut Sub Sg P2) => "ires" ; --# notpresent
    VPB (Fut Sub Sg P3) => "ir" ; --# notpresent
    VPB (Fut Sub Pl P1) => "írmos" ; --# notpresent
    VPB (Fut Sub Pl P2) => "írdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => "irem" ; --# notpresent
    VPB (Cond Sg P1) => "iria" ; --# notpresent
    VPB (Cond Sg P2) => "irias" ; --# notpresent
    VPB (Cond Sg P3) => "iria" ; --# notpresent
    VPB (Cond Pl P1) => "iríamos" ; --# notpresent
    VPB (Cond Pl P2) => "iríeis" ; --# notpresent
    VPB (Cond Pl P3) => "iriam" ; --# notpresent
    VPB (Imper Sg P2) => "e" ;
    VPB (Imper Sg P3) => nonExist ;
    VPB (Imper Pl P1) => nonExist ;
    VPB (Imper Pl P2) => "i" ;
    VPB (Imper Pl P3) => nonExist ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper falir_Besch : Str -> Verbum = \falir ->
-- 79 | r81
  let fal_ = Predef.tk 2 falir in
 {root = fal_ ;
  suff = table {
    VI Infn => "ir" ;
    VI Ger => "indo" ;
    VI Part => "ido" ;
    VPB (Pres Ind Sg P1) => nonExist ;
    VPB (Pres Ind Sg P2) => nonExist ;
    VPB (Pres Ind Sg P3) => nonExist ;
    VPB (Pres Ind Pl P1) => "imos" ;
    VPB (Pres Ind Pl P2) => "is" ;
    VPB (Pres Ind Pl P3) => nonExist ;
    VPB (Pres Sub Sg P1) => nonExist ;
    VPB (Pres Sub Sg P2) => nonExist ;
    VPB (Pres Sub Sg P3) => nonExist ;
    VPB (Pres Sub Pl P1) => nonExist ;
    VPB (Pres Sub Pl P2) => nonExist ;
    VPB (Pres Sub Pl P3) => nonExist ;
    VPB (PretI Ind Sg P1) => "ia" ; --# notpresent
    VPB (PretI Ind Sg P2) => "ias" ; --# notpresent
    VPB (PretI Ind Sg P3) => "ia" ; --# notpresent
    VPB (PretI Ind Pl P1) => "íamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => "íeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => "iam" ; --# notpresent
    VPB (PretI Sub Sg P1) => "isse" ; --# notpresent
    VPB (PretI Sub Sg P2) => "isses" ; --# notpresent
    VPB (PretI Sub Sg P3) => "isse" ; --# notpresent
    VPB (PretI Sub Pl P1) => "íssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => "ísseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => "issem" ; --# notpresent
    VPB (MQPerf Sg P1) => "ira" ; --# notpresent
    VPB (MQPerf Sg P2) => "iras" ; --# notpresent
    VPB (MQPerf Sg P3) => "ira" ; --# notpresent
    VPB (MQPerf Pl P1) => "íramos" ; --# notpresent
    VPB (MQPerf Pl P2) => "íreis" ; --# notpresent
    VPB (MQPerf Pl P3) => "iram" ; --# notpresent
    VPB (PretP Sg P1) => "i" ; --# notpresent
    VPB (PretP Sg P2) => "iste" ; --# notpresent
    VPB (PretP Sg P3) => "iu" ; --# notpresent
    VPB (PretP Pl P1) => "imos" ; --# notpresent
    VPB (PretP Pl P2) => "istes" ; --# notpresent
    VPB (PretP Pl P3) => "iram" ; --# notpresent
    VPB (Fut Ind Sg P1) => "irei" ; --# notpresent
    VPB (Fut Ind Sg P2) => "irás" ; --# notpresent
    VPB (Fut Ind Sg P3) => "irá" ; --# notpresent
    VPB (Fut Ind Pl P1) => "iremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => "ireis" ; --# notpresent
    VPB (Fut Ind Pl P3) => "irão" ; --# notpresent
    VPB (Fut Sub Sg P1) => "ir" ; --# notpresent
    VPB (Fut Sub Sg P2) => "ires" ; --# notpresent
    VPB (Fut Sub Sg P3) => "ir" ; --# notpresent
    VPB (Fut Sub Pl P1) => "irmos" ; --# notpresent
    VPB (Fut Sub Pl P2) => "irdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => "irem" ; --# notpresent
    VPB (Cond Sg P1) => "iria" ; --# notpresent
    VPB (Cond Sg P2) => "irias" ; --# notpresent
    VPB (Cond Sg P3) => "iria" ; --# notpresent
    VPB (Cond Pl P1) => "iríamos" ; --# notpresent
    VPB (Cond Pl P2) => "iríeis" ; --# notpresent
    VPB (Cond Pl P3) => "iriam" ; --# notpresent
    VPB (Imper Sg P2) => nonExist ;
    VPB (Imper Sg P3) => nonExist ;
    VPB (Imper Pl P1) => nonExist ;
    VPB (Imper Pl P2) => "i" ;
    VPB (Imper Pl P3) => nonExist ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper remir_Besch : Str -> Verbum = \remir ->
-- 80 | r49
  let rem_ = Predef.tk 2 remir in
 {root = rem_ ;
  suff = table {
    VI Infn => "ir" ;
    VI Ger => "indo" ;
    VI Part => "ido" ;
    VPB (Pres Ind Sg P1) => nonExist ;
    VPB (Pres Ind Sg P2) => nonExist ;
    VPB (Pres Ind Sg P3) => nonExist ;
    VPB (Pres Ind Pl P1) => "imos" ;
    VPB (Pres Ind Pl P2) => "is" ;
    VPB (Pres Ind Pl P3) => nonExist ;
    VPB (Pres Sub Sg P1) => nonExist ;
    VPB (Pres Sub Sg P2) => nonExist ;
    VPB (Pres Sub Sg P3) => nonExist ;
    VPB (Pres Sub Pl P1) => nonExist ;
    VPB (Pres Sub Pl P2) => nonExist ;
    VPB (Pres Sub Pl P3) => nonExist ;
    VPB (PretI Ind Sg P1) => "ia" ; --# notpresent
    VPB (PretI Ind Sg P2) => "ias" ; --# notpresent
    VPB (PretI Ind Sg P3) => "ia" ; --# notpresent
    VPB (PretI Ind Pl P1) => "íamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => "íeis" ; --# notpresent
    VPB (PretI Ind Pl P3) => "iam" ; --# notpresent
    VPB (PretI Sub Sg P1) => "isse" ; --# notpresent
    VPB (PretI Sub Sg P2) => "isses" ; --# notpresent
    VPB (PretI Sub Sg P3) => "isse" ; --# notpresent
    VPB (PretI Sub Pl P1) => "íssemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => "ísseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => "issem" ; --# notpresent
    VPB (MQPerf Sg P1) => "ira" ; --# notpresent
    VPB (MQPerf Sg P2) => "iras" ; --# notpresent
    VPB (MQPerf Sg P3) => "ira" ; --# notpresent
    VPB (MQPerf Pl P1) => "íramos" ; --# notpresent
    VPB (MQPerf Pl P2) => "íreis" ; --# notpresent
    VPB (MQPerf Pl P3) => "iram" ; --# notpresent
    VPB (PretP Sg P1) => "i" ; --# notpresent
    VPB (PretP Sg P2) => "iste" ; --# notpresent
    VPB (PretP Sg P3) => "iu" ; --# notpresent
    VPB (PretP Pl P1) => "imos" ; --# notpresent
    VPB (PretP Pl P2) => "istes" ; --# notpresent
    VPB (PretP Pl P3) => "iram" ; --# notpresent
    VPB (Fut Ind Sg P1) => "irei" ; --# notpresent
    VPB (Fut Ind Sg P2) => "irás" ; --# notpresent
    VPB (Fut Ind Sg P3) => "irá" ; --# notpresent
    VPB (Fut Ind Pl P1) => "iremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => "ireis" ; --# notpresent
    VPB (Fut Ind Pl P3) => "irão" ; --# notpresent
    VPB (Fut Sub Sg P1) => "ir" ; --# notpresent
    VPB (Fut Sub Sg P2) => "ires" ; --# notpresent
    VPB (Fut Sub Sg P3) => "ir" ; --# notpresent
    VPB (Fut Sub Pl P1) => "irmos" ; --# notpresent
    VPB (Fut Sub Pl P2) => "irdes" ; --# notpresent
    VPB (Fut Sub Pl P3) => "irem" ; --# notpresent
    VPB (Cond Sg P1) => "iria" ; --# notpresent
    VPB (Cond Sg P2) => "irias" ; --# notpresent
    VPB (Cond Sg P3) => "iria" ; --# notpresent
    VPB (Cond Pl P1) => "iríamos" ; --# notpresent
    VPB (Cond Pl P2) => "iríeis" ; --# notpresent
    VPB (Cond Pl P3) => "iriam" ; --# notpresent
    VPB (Imper Sg P2) => nonExist ;
    VPB (Imper Sg P3) => nonExist ;
    VPB (Imper Pl P1) => nonExist ;
    VPB (Imper Pl P2) => "i" ;
    VPB (Imper Pl P3) => nonExist ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper viajar_Besch : Str -> Verbum = \viajar ->
-- r22
  let viaj_ = Predef.tk 2 viajar in
 {root = viaj_ ;
  suff = table {
    VI Infn => "ar" ;
    VI Ger => "ando" ;
    VI Part => "ado" ;
    VPB (Pres Ind Sg P1) => "o" ;
    VPB (Pres Ind Sg P2) => "as" ;
    VPB (Pres Ind Sg P3) => "a" ;
    VPB (Pres Ind Pl P1) => "amos" ;
    VPB (Pres Ind Pl P2) => "ais" ;
    VPB (Pres Ind Pl P3) => "am" ;
    VPB (Pres Sub Sg P1) => "e" ;
    VPB (Pres Sub Sg P2) => "es" ;
    VPB (Pres Sub Sg P3) => "e" ;
    VPB (Pres Sub Pl P1) => "emos" ;
    VPB (Pres Sub Pl P2) => "eis" ;
    VPB (Pres Sub Pl P3) => "em" ;
    VPB (PretI Ind Sg P1) => "ava" ; --# notpresent
    VPB (PretI Ind Sg P2) => "avas" ; --# notpresent
    VPB (PretI Ind Sg P3) => "ava" ; --# notpresent
    VPB (PretI Ind Pl P1) => "ávamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => "áveis" ; --# notpresent
    VPB (PretI Ind Pl P3) => "avam" ; --# notpresent
    VPB (PretI Sub Sg P1) => "asse" ; --# notpresent
    VPB (PretI Sub Sg P2) => "asses" ; --# notpresent
    VPB (PretI Sub Sg P3) => "asse" ; --# notpresent
    VPB (PretI Sub Pl P1) => "ássemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => "ásseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => "assem" ; --# notpresent
    VPB (MQPerf Sg P1) => "ara" ; --# notpresent
    VPB (MQPerf Sg P2) => "aras" ; --# notpresent
    VPB (MQPerf Sg P3) => "ara" ; --# notpresent
    VPB (MQPerf Pl P1) => "áramos" ; --# notpresent
    VPB (MQPerf Pl P2) => "áreis" ; --# notpresent
    VPB (MQPerf Pl P3) => "aram" ; --# notpresent
    VPB (PretP Sg P1) => "ei" ; --# notpresent
    VPB (PretP Sg P2) => "aste" ; --# notpresent
    VPB (PretP Sg P3) => "ou" ; --# notpresent
    VPB (PretP Pl P1) => "amos" ; --# notpresent
    VPB (PretP Pl P2) => "astes" ; --# notpresent
    VPB (PretP Pl P3) => "aram" ; --# notpresent
    VPB (Fut Ind Sg P1) => "arei" ; --# notpresent
    VPB (Fut Ind Sg P2) => "arás" ; --# notpresent
    VPB (Fut Ind Sg P3) => "ará" ; --# notpresent
    VPB (Fut Ind Pl P1) => "aremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => "areis" ; --# notpresent
    VPB (Fut Ind Pl P3) => "arão" ; --# notpresent
    VPB (Fut Sub Sg P1) => "ar" ; --# notpresent
    VPB (Fut Sub Sg P2) => "ares" ; --# notpresent
    VPB (Fut Sub Sg P3) => "ar" ; --# notpresent
    VPB (Fut Sub Pl P1) => "armos" ; --# notpresent
    VPB (Fut Sub Pl P2) => "ardes" ; --# notpresent
    VPB (Fut Sub Pl P3) => "arem" ; --# notpresent
    VPB (Cond Sg P1) => "aria" ; --# notpresent
    VPB (Cond Sg P2) => "arias" ; --# notpresent
    VPB (Cond Sg P3) => "aria" ; --# notpresent
    VPB (Cond Pl P1) => "aríamos" ; --# notpresent
    VPB (Cond Pl P2) => "aríeis" ; --# notpresent
    VPB (Cond Pl P3) => "ariam" ; --# notpresent
    VPB (Imper Sg P2) => "a" ;
    VPB (Imper Sg P3) => "e" ;
    VPB (Imper Pl P1) => "emos" ;
    VPB (Imper Pl P2) => "ai" ;
    VPB (Imper Pl P3) => "em" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper suar_Besch : Str -> Verbum = \suar ->
-- r37
  let su_ = Predef.tk 2 suar in
 {root = su_ ;
  suff = table {
    VI Infn => "ar" ;
    VI Ger => "ando" ;
    VI Part => "ado" ;
    VPB (Pres Ind Sg P1) => "o" ;
    VPB (Pres Ind Sg P2) => "as" ;
    VPB (Pres Ind Sg P3) => "a" ;
    VPB (Pres Ind Pl P1) => "amos" ;
    VPB (Pres Ind Pl P2) => "ais" ;
    VPB (Pres Ind Pl P3) => "am" ;
    VPB (Pres Sub Sg P1) => "e" ;
    VPB (Pres Sub Sg P2) => "es" ;
    VPB (Pres Sub Sg P3) => "e" ;
    VPB (Pres Sub Pl P1) => "emos" ;
    VPB (Pres Sub Pl P2) => "eis" ;
    VPB (Pres Sub Pl P3) => "em" ;
    VPB (PretI Ind Sg P1) => "ava" ; --# notpresent
    VPB (PretI Ind Sg P2) => "avas" ; --# notpresent
    VPB (PretI Ind Sg P3) => "ava" ; --# notpresent
    VPB (PretI Ind Pl P1) => "ávamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => "áveis" ; --# notpresent
    VPB (PretI Ind Pl P3) => "avam" ; --# notpresent
    VPB (PretI Sub Sg P1) => "asse" ; --# notpresent
    VPB (PretI Sub Sg P2) => "asses" ; --# notpresent
    VPB (PretI Sub Sg P3) => "asse" ; --# notpresent
    VPB (PretI Sub Pl P1) => "ássemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => "ásseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => "assem" ; --# notpresent
    VPB (MQPerf Sg P1) => "ara" ; --# notpresent
    VPB (MQPerf Sg P2) => "aras" ; --# notpresent
    VPB (MQPerf Sg P3) => "ara" ; --# notpresent
    VPB (MQPerf Pl P1) => "áramos" ; --# notpresent
    VPB (MQPerf Pl P2) => "áreis" ; --# notpresent
    VPB (MQPerf Pl P3) => "aram" ; --# notpresent
    VPB (PretP Sg P1) => "ei" ; --# notpresent
    VPB (PretP Sg P2) => "aste" ; --# notpresent
    VPB (PretP Sg P3) => "ou" ; --# notpresent
    VPB (PretP Pl P1) => "amos" ; --# notpresent
    VPB (PretP Pl P2) => "astes" ; --# notpresent
    VPB (PretP Pl P3) => "aram" ; --# notpresent
    VPB (Fut Ind Sg P1) => "arei" ; --# notpresent
    VPB (Fut Ind Sg P2) => "arás" ; --# notpresent
    VPB (Fut Ind Sg P3) => "ará" ; --# notpresent
    VPB (Fut Ind Pl P1) => "aremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => "areis" ; --# notpresent
    VPB (Fut Ind Pl P3) => "arão" ; --# notpresent
    VPB (Fut Sub Sg P1) => "ar" ; --# notpresent
    VPB (Fut Sub Sg P2) => "ares" ; --# notpresent
    VPB (Fut Sub Sg P3) => "ar" ; --# notpresent
    VPB (Fut Sub Pl P1) => "armos" ; --# notpresent
    VPB (Fut Sub Pl P2) => "ardes" ; --# notpresent
    VPB (Fut Sub Pl P3) => "arem" ; --# notpresent
    VPB (Cond Sg P1) => "aria" ; --# notpresent
    VPB (Cond Sg P2) => "arias" ; --# notpresent
    VPB (Cond Sg P3) => "aria" ; --# notpresent
    VPB (Cond Pl P1) => "aríamos" ; --# notpresent
    VPB (Cond Pl P2) => "aríeis" ; --# notpresent
    VPB (Cond Pl P3) => "ariam" ; --# notpresent
    VPB (Imper Sg P2) => "a" ;
    VPB (Imper Sg P3) => "e" ;
    VPB (Imper Pl P1) => "emos" ;
    VPB (Imper Pl P2) => "ai" ;
    VPB (Imper Pl P3) => "em" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

oper peneirar_Besch : Str -> Verbum = \peneirar ->
-- r10
  let peneir_ = Predef.tk 2 peneirar in
 {root = peneir_ ;
  suff = table {
    VI Infn => "ar" ;
    VI Ger => "ando" ;
    VI Part => "ado" ;
    VPB (Pres Ind Sg P1) => "o" ;
    VPB (Pres Ind Sg P2) => "as" ;
    VPB (Pres Ind Sg P3) => "a" ;
    VPB (Pres Ind Pl P1) => "amos" ;
    VPB (Pres Ind Pl P2) => "ais" ;
    VPB (Pres Ind Pl P3) => "am" ;
    VPB (Pres Sub Sg P1) => "e" ;
    VPB (Pres Sub Sg P2) => "es" ;
    VPB (Pres Sub Sg P3) => "e" ;
    VPB (Pres Sub Pl P1) => "emos" ;
    VPB (Pres Sub Pl P2) => "eis" ;
    VPB (Pres Sub Pl P3) => "em" ;
    VPB (PretI Ind Sg P1) => "ava" ; --# notpresent
    VPB (PretI Ind Sg P2) => "avas" ; --# notpresent
    VPB (PretI Ind Sg P3) => "ava" ; --# notpresent
    VPB (PretI Ind Pl P1) => "ávamos" ; --# notpresent
    VPB (PretI Ind Pl P2) => "áveis" ; --# notpresent
    VPB (PretI Ind Pl P3) => "avam" ; --# notpresent
    VPB (PretI Sub Sg P1) => "asse" ; --# notpresent
    VPB (PretI Sub Sg P2) => "asses" ; --# notpresent
    VPB (PretI Sub Sg P3) => "asse" ; --# notpresent
    VPB (PretI Sub Pl P1) => "ássemos" ; --# notpresent
    VPB (PretI Sub Pl P2) => "ásseis" ; --# notpresent
    VPB (PretI Sub Pl P3) => "assem" ; --# notpresent
    VPB (MQPerf Sg P1) => "ara" ; --# notpresent
    VPB (MQPerf Sg P2) => "aras" ; --# notpresent
    VPB (MQPerf Sg P3) => "ara" ; --# notpresent
    VPB (MQPerf Pl P1) => "áramos" ; --# notpresent
    VPB (MQPerf Pl P2) => "áreis" ; --# notpresent
    VPB (MQPerf Pl P3) => "aram" ; --# notpresent
    VPB (PretP Sg P1) => "ei" ; --# notpresent
    VPB (PretP Sg P2) => "aste" ; --# notpresent
    VPB (PretP Sg P3) => "ou" ; --# notpresent
    VPB (PretP Pl P1) => "amos" ; --# notpresent
    VPB (PretP Pl P2) => "astes" ; --# notpresent
    VPB (PretP Pl P3) => "aram" ; --# notpresent
    VPB (Fut Ind Sg P1) => "arei" ; --# notpresent
    VPB (Fut Ind Sg P2) => "arás" ; --# notpresent
    VPB (Fut Ind Sg P3) => "ará" ; --# notpresent
    VPB (Fut Ind Pl P1) => "aremos" ; --# notpresent
    VPB (Fut Ind Pl P2) => "areis" ; --# notpresent
    VPB (Fut Ind Pl P3) => "arão" ; --# notpresent
    VPB (Fut Sub Sg P1) => "ar" ; --# notpresent
    VPB (Fut Sub Sg P2) => "ares" ; --# notpresent
    VPB (Fut Sub Sg P3) => "ar" ; --# notpresent
    VPB (Fut Sub Pl P1) => "armos" ; --# notpresent
    VPB (Fut Sub Pl P2) => "ardes" ; --# notpresent
    VPB (Fut Sub Pl P3) => "arem" ; --# notpresent
    VPB (Cond Sg P1) => "aria" ; --# notpresent
    VPB (Cond Sg P2) => "aries" ; --# notpresent
    VPB (Cond Sg P3) => "aria" ; --# notpresent
    VPB (Cond Pl P1) => "aríamos" ; --# notpresent
    VPB (Cond Pl P2) => "aríeis" ; --# notpresent
    VPB (Cond Pl P3) => "ariam" ; --# notpresent
    VPB (Imper Sg P2) => "a" ;
    VPB (Imper Sg P3) => "e" ;
    VPB (Imper Pl P1) => "emos" ;
    VPB (Imper Pl P2) => "ai" ;
    VPB (Imper Pl P3) => "em" ;
    VPB (Imper Sg P1) => nonExist
    }
  } ;

} ;
